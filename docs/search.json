[{"path":"https://openpharma.github.io/simaerep/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 F. Hoffmann-La Roche Ltd simaerep authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://openpharma.github.io/simaerep/articles/check_poisson.html","id":"load","dir":"Articles","previous_headings":"","what":"Load","title":"Check Poisson Test Applicability","text":"","code":"suppressPackageStartupMessages( library(tidyverse) ) suppressPackageStartupMessages( library(knitr) ) suppressPackageStartupMessages( library(furrr) ) suppressPackageStartupMessages( library(future) ) suppressPackageStartupMessages( library(simaerep) )"},{"path":"https://openpharma.github.io/simaerep/articles/check_poisson.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Check Poisson Test Applicability","text":"Perhaps might scenarios one prefers use parametric test vs non-parametric bootstrap-based resampling method calculate AE -reporting. simaerep provides function bootstrap resampling entire study preserving actual site parameters number patients visit_med75. Using pool can check whether p-values calculated poisson.test() represent accurate probabilities.","code":""},{"path":"https://openpharma.github.io/simaerep/articles/check_poisson.html","id":"test-data-and-standard-processing","dir":"Articles","previous_headings":"Introduction","what":"Test Data and Standard Processing","title":"Check Poisson Test Applicability","text":"simulate three studies varying ae per visit rate use functions already introduced.","code":"df_visit1 <- sim_test_data_study(   n_pat = 1000,   n_sites = 100,   frac_site_with_ur = 0.2,   ur_rate = 0.5,   max_visit_mean = 20,   max_visit_sd = 4,   ae_per_visit_mean = 0.5 )  df_visit1$study_id <- \"ae_per_visit: 0.5\"  df_visit2 <- sim_test_data_study(   n_pat = 1000,   n_sites = 100,   frac_site_with_ur = 0.2,   ur_rate = 0.5,   max_visit_mean = 20,   max_visit_sd = 4,   ae_per_visit_mean = 0.2 )  df_visit2$study_id <- \"ae_per_visit: 0.2\"  df_visit3 <- sim_test_data_study(   n_pat = 1000,   n_sites = 100,   frac_site_with_ur = 0.2,   ur_rate = 0.5,   max_visit_mean = 20,   max_visit_sd = 4,   ae_per_visit_mean = 0.05 )  df_visit3$study_id <- \"ae_per_visit: 0.05\"  df_visit <- bind_rows(df_visit1, df_visit2, df_visit3)  df_site <- site_aggr(df_visit)  df_sim_sites <- sim_sites(df_site, df_visit)  df_visit ## # A tibble: 58,505 × 9 ##    patnum  site_number is_ur max_visit_mean max_visit_sd ae_per_visit_mean visit ##    <chr>   <chr>       <lgl>          <dbl>        <dbl>             <dbl> <int> ##  1 P000001 S0001       TRUE              20            4              0.25     1 ##  2 P000001 S0001       TRUE              20            4              0.25     2 ##  3 P000001 S0001       TRUE              20            4              0.25     3 ##  4 P000001 S0001       TRUE              20            4              0.25     4 ##  5 P000001 S0001       TRUE              20            4              0.25     5 ##  6 P000001 S0001       TRUE              20            4              0.25     6 ##  7 P000001 S0001       TRUE              20            4              0.25     7 ##  8 P000001 S0001       TRUE              20            4              0.25     8 ##  9 P000001 S0001       TRUE              20            4              0.25     9 ## 10 P000001 S0001       TRUE              20            4              0.25    10 ## # ℹ 58,495 more rows ## # ℹ 2 more variables: n_ae <int>, study_id <chr> df_site ## # A tibble: 300 × 6 ##    study_id    site_number n_pat n_pat_with_med75 visit_med75 mean_ae_site_med75 ##    <chr>       <chr>       <int>            <dbl>       <dbl>              <dbl> ##  1 ae_per_vis… S0001          10               10          15              0.3   ##  2 ae_per_vis… S0002          10                9          15              0.667 ##  3 ae_per_vis… S0003          10                8          17              0.375 ##  4 ae_per_vis… S0004          10               10          15              0.3   ##  5 ae_per_vis… S0005          10                9          18              0.222 ##  6 ae_per_vis… S0006          10                9          16              0.556 ##  7 ae_per_vis… S0007          10                9          17              0.667 ##  8 ae_per_vis… S0008          10                9          16              0.333 ##  9 ae_per_vis… S0009          10               10          14              0.3   ## 10 ae_per_vis… S0010          10               10          17              0.2   ## # ℹ 290 more rows df_sim_sites ## # A tibble: 300 × 10 ##    study_id    site_number n_pat n_pat_with_med75 visit_med75 mean_ae_site_med75 ##    <chr>       <chr>       <int>            <dbl>       <dbl>              <dbl> ##  1 ae_per_vis… S0001          10               10          15              0.3   ##  2 ae_per_vis… S0002          10                9          15              0.667 ##  3 ae_per_vis… S0003          10                8          17              0.375 ##  4 ae_per_vis… S0004          10               10          15              0.3   ##  5 ae_per_vis… S0005          10                9          18              0.222 ##  6 ae_per_vis… S0006          10                9          16              0.556 ##  7 ae_per_vis… S0007          10                9          17              0.667 ##  8 ae_per_vis… S0008          10                9          16              0.333 ##  9 ae_per_vis… S0009          10               10          14              0.3   ## 10 ae_per_vis… S0010          10               10          17              0.2   ## # ℹ 290 more rows ## # ℹ 4 more variables: mean_ae_study_med75 <dbl>, n_pat_with_med75_study <int>, ## #   pval <dbl>, prob_low <dbl>"},{"path":"https://openpharma.github.io/simaerep/articles/check_poisson.html","id":"simulate-studies","dir":"Articles","previous_headings":"Introduction","what":"Simulate Studies","title":"Check Poisson Test Applicability","text":"sim_studies() reproduces study hundred times using bootstrap resampling maintaining number patients visit_med75 site.","code":"set.seed(1)  plan(multisession, workers = 6)  df_sim_studies <- sim_studies(df_visit, df_site,                               r = 100,                               parallel = TRUE,                               poisson_test = TRUE,                               prob_lower = TRUE,                               .progress = FALSE)  df_sim_studies ## # A tibble: 30,000 × 8 ##        r study_id     site_number visit_med75 n_pat_with_med75 n_pat_study  pval ##    <dbl> <chr>        <chr>             <dbl>            <dbl>       <dbl> <dbl> ##  1     1 ae_per_visi… S0001                15               10         905 1     ##  2     1 ae_per_visi… S0002                15                9         906 0.673 ##  3     1 ae_per_visi… S0003                17                8         760 1     ##  4     1 ae_per_visi… S0004                15               10         905 1     ##  5     1 ae_per_visi… S0005                18                9         678 0.850 ##  6     1 ae_per_visi… S0006                16                9         828 1     ##  7     1 ae_per_visi… S0007                17                9         759 1     ##  8     1 ae_per_visi… S0008                16                9         828 1     ##  9     1 ae_per_visi… S0009                14               10         942 1     ## 10     1 ae_per_visi… S0010                17               10         758 0.714 ## # ℹ 29,990 more rows ## # ℹ 1 more variable: prob_low <dbl>"},{"path":"https://openpharma.github.io/simaerep/articles/check_poisson.html","id":"check-p-value-probabilities","dir":"Articles","previous_headings":"Introduction","what":"Check p-value Probabilities","title":"Check Poisson Test Applicability","text":"get_ecd_values() uses p-value distribution dataframe returned sim_studies() train empirical cumulative distribution function study used calculate probability specific p-value lower poisson.test p-value returned sim_sites() Note: Dots edge graph cut zero value corresponding axis.  can see p-values poisson.test (x-axis) less match probability represented resampled studies (y-axis), skewness relationship.","code":"df_check_pval <- get_ecd_values(df_sim_studies, df_sim_sites, val_str = \"pval\")  df_check_pval ## # A tibble: 300 × 11 ##    study_id    site_number n_pat n_pat_with_med75 visit_med75 mean_ae_site_med75 ##    <chr>       <chr>       <int>            <dbl>       <dbl>              <dbl> ##  1 ae_per_vis… S0001          10               10          15              0.3   ##  2 ae_per_vis… S0002          10                9          15              0.667 ##  3 ae_per_vis… S0003          10                8          17              0.375 ##  4 ae_per_vis… S0004          10               10          15              0.3   ##  5 ae_per_vis… S0005          10                9          18              0.222 ##  6 ae_per_vis… S0006          10                9          16              0.556 ##  7 ae_per_vis… S0007          10                9          17              0.667 ##  8 ae_per_vis… S0008          10                9          16              0.333 ##  9 ae_per_vis… S0009          10               10          14              0.3   ## 10 ae_per_vis… S0010          10               10          17              0.2   ## # ℹ 290 more rows ## # ℹ 5 more variables: mean_ae_study_med75 <dbl>, n_pat_with_med75_study <int>, ## #   pval <dbl>, prob_low <dbl>, pval_ecd <dbl> df_check_pval %>%   ggplot(aes(log(pval, base = 10), log(pval_ecd, base = 10))) +     geom_point(alpha = 0.5, size = 2) +     facet_wrap(~ study_id) +     geom_abline(slope = 1, linetype = 2) +     coord_cartesian( xlim = c(-5,0), ylim = c(-5,0) ) +     theme(aspect.ratio = 1)"},{"path":"https://openpharma.github.io/simaerep/articles/check_poisson.html","id":"perform-same-check-on-bootstrapped-probabilities","dir":"Articles","previous_headings":"Introduction","what":"Perform Same Check on Bootstrapped Probabilities","title":"Check Poisson Test Applicability","text":"Note: Dots edge graph cut zero value corresponding axis. tie simulations using 1000 repeats smallest value greater zero get prob_low 0.001 (1e-3).  see probabilities site simulations (x-axis) perfectly match probability represented resampled studies (y-axis).","code":"df_check_prob <- get_ecd_values(df_sim_studies, df_sim_sites, val_str = \"prob_low\")  df_check_prob ## # A tibble: 300 × 11 ##    study_id    site_number n_pat n_pat_with_med75 visit_med75 mean_ae_site_med75 ##    <chr>       <chr>       <int>            <dbl>       <dbl>              <dbl> ##  1 ae_per_vis… S0001          10               10          15              0.3   ##  2 ae_per_vis… S0002          10                9          15              0.667 ##  3 ae_per_vis… S0003          10                8          17              0.375 ##  4 ae_per_vis… S0004          10               10          15              0.3   ##  5 ae_per_vis… S0005          10                9          18              0.222 ##  6 ae_per_vis… S0006          10                9          16              0.556 ##  7 ae_per_vis… S0007          10                9          17              0.667 ##  8 ae_per_vis… S0008          10                9          16              0.333 ##  9 ae_per_vis… S0009          10               10          14              0.3   ## 10 ae_per_vis… S0010          10               10          17              0.2   ## # ℹ 290 more rows ## # ℹ 5 more variables: mean_ae_study_med75 <dbl>, n_pat_with_med75_study <int>, ## #   pval <dbl>, prob_low <dbl>, prob_low_ecd <dbl> df_check_prob %>%   ggplot(aes(log(prob_low, base = 10), log(prob_low_ecd, base = 10))) +     geom_point(alpha = 0.5, size = 2) +     facet_wrap(~ study_id) +     geom_abline(slope = 1, linetype = 2) +     coord_cartesian( xlim = c(-5,0), ylim = c(-5,0) ) +     theme(aspect.ratio = 1)"},{"path":"https://openpharma.github.io/simaerep/articles/check_poisson.html","id":"conclusion","dir":"Articles","previous_headings":"Introduction","what":"Conclusion","title":"Check Poisson Test Applicability","text":"see bootstrap method gives us accurate probabilities p-values derived poisson.test even though AE generation sample data follows strict poisson process. real clinical trial data different types studies clear whether AE generation truly based pure poisson process recommend use bootstrap method. poisson.test shall used recommend checking applicability just demonstrated clinical data set.","code":"plan(sequential)"},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"load","dir":"Articles","previous_headings":"","what":"Load","title":"Comparing {simaerep} and Funnel Plot Performance","text":"","code":"suppressPackageStartupMessages(library(tidyverse)) suppressPackageStartupMessages(library(knitr)) suppressPackageStartupMessages(library(furrr)) suppressPackageStartupMessages(library(future)) suppressPackageStartupMessages(library(simaerep))  plan(multisession, workers = 6)"},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"install-gsm","dir":"Articles","previous_headings":"","what":"Install {gsm}","title":"Comparing {simaerep} and Funnel Plot Performance","text":"","code":"devtools::install_github(\"Gilead-BioStats/gsm@v1.9.2\", ref = \"main\")"},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Comparing {simaerep} and Funnel Plot Performance","text":"{gsm} R package provides standardized Risk Based Quality Monitoring (RBQM) framework clinical trials pairs flexible data pipeline robust reports. also uses Funnel Plots flag outliers provide broader tolerance limits sites low exposure narrower limits sites higher exposure. method different event rate based limits used previous heuristics measure {simaerep} performance. Funnel plots discussed greater detail Zink et al. 2018 One draw backs using funnel plots flagging assume AE rate remains constant course study.","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"load-portfolio-configurations","dir":"Articles","previous_headings":"Prepare Data","what":"Load Portfolio Configurations","title":"Comparing {simaerep} and Funnel Plot Performance","text":"prepared snapshot AE reporting configuration current portfolio. study also measured visit-specific AE rate allows us generate synthetic portfolio flexible AE rates across study.","code":"df_config <- readr::read_csv(\"ae_conf_20240220.csv\") df_ae_rates <- readr::read_csv(\"ae_rates_20240220.csv\")  df_config %>%   head(25) %>%   knitr::kable() df_ae_rates %>%   head(25) %>%   knitr::kable()"},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"simulate-portfolio","dir":"Articles","previous_headings":"Prepare Data","what":"Simulate Portfolio","title":"Comparing {simaerep} and Funnel Plot Performance","text":"generate two synthetic portfolios AE -reporting sites. One portfolio fixed AE rate visits another one flexible visit-specific AE rate.","code":"df_portf_fix <- sim_test_data_portfolio(df_config, parallel = TRUE, progress = TRUE)  df_portf_fix %>%   head(25) %>%   knitr::kable() df_portf_flex <- sim_test_data_portfolio(df_config, df_ae_rates = df_ae_rates, parallel = TRUE, progress = TRUE)"},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"compare-ae-rates","dir":"Articles","previous_headings":"Prepare Data","what":"Compare AE rates","title":"Comparing {simaerep} and Funnel Plot Performance","text":"Next confirm different AE rates two synthetic portfolios.   can confirm AE rates “flexible” portfolio constant. Moreover see AE rate profile unique study.","code":"df_rate_fix <- df_portf_fix %>%   mutate(ae_rate = coalesce(n_ae - lag(n_ae), n_ae), .by = c(\"study_id\", \"patnum\")) %>%   summarise(ae_rate = mean(ae_rate), .by = c(\"study_id\", \"visit\")) %>%   mutate(rate = \"fix\")   df_rate_flex <- df_portf_flex %>%   mutate(ae_rate = coalesce(n_ae - lag(n_ae), n_ae), .by = c(\"study_id\", \"patnum\")) %>%   summarise(ae_rate = mean(ae_rate), .by = c(\"study_id\", \"visit\")) %>%   mutate(rate = \"flex\") bind_rows(df_rate_flex, df_rate_fix) %>%   ggplot(aes(visit, ae_rate)) +     geom_line(aes(group = study_id), alpha = 0.2) +     geom_smooth() +     facet_wrap(~ rate) +     labs(title = \"Average AE rates per Study\") bind_rows(df_rate_flex, df_rate_fix) %>%   filter(dense_rank(study_id) <= 16) %>%   ggplot(aes(visit, ae_rate)) +     geom_line(aes(group = rate, color = rate)) +     facet_wrap(~ study_id, scales = \"free\") +     labs(title = \"Average AE rates for Selected Studies\")"},{"path":[]},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"example","dir":"Articles","previous_headings":"Funnel Plots {gsm}","what":"Example","title":"Comparing {simaerep} and Funnel Plot Performance","text":"demonstrate use {gsm} package simulated portfolios can get good visualisation funnel plot.","code":"get_SUBJ <- function(df_portf) {   df_portf %>%     select(study_id, siteid = site_number, subjid = patnum, timeonstudy = visit) %>%     summarise(timeonstudy = max(timeonstudy), .by = c(study_id, siteid, subjid)) %>%     group_by(study_id) %>%     nest() }   get_AE <- function(df_portf) {   df_portf %>%     select(study_id, subjid = patnum, n_ae) %>%     summarise(n_ae = max(n_ae), .by = c(study_id, subjid)) %>%     filter(n_ae > 0) %>%     mutate(n_ae = map(n_ae, ~ tibble(n = seq(1, .)), .progress = TRUE)) %>%     unnest(n_ae) %>%     select(- n) %>%     group_by(study_id) %>%     nest() }  dfSUBJ_fix <- get_SUBJ(df_portf_fix) dfAE_fix <- get_AE(df_portf_fix) dfInput <- gsm::AE_Map_Raw(list(dfSUBJ = dfSUBJ_fix$data[[1]], dfAE = dfAE_fix$data[[1]])) dfInput ## # A tibble: 113 × 5 ##    SubjectID SiteID Exposure Count  Rate ##    <chr>     <chr>     <int> <int> <dbl> ##  1 0001      4746         16     5 0.312 ##  2 0002      4746         14     3 0.214 ##  3 0003      4747         26     6 0.231 ##  4 0004      4747         26    11 0.423 ##  5 0005      4750         19     5 0.263 ##  6 0006      4750         19     5 0.263 ##  7 0007      4750         20     6 0.3   ##  8 0008      4750         18     3 0.167 ##  9 0009      4815         25     3 0.12  ## 10 0010      4815         28     8 0.286 ## # ℹ 103 more rows dfTransformed <- gsm::Transform_Rate(   dfInput,   strNumeratorCol = \"Count\",   strDenominatorCol = \"Exposure\"   ) dfTransformed ## # A tibble: 44 × 4 ##    GroupID Numerator Denominator Metric ##    <chr>       <int>       <int>  <dbl> ##  1 4746            8          30  0.267 ##  2 4747           17          52  0.327 ##  3 4750           19          76  0.25  ##  4 4815           40         153  0.261 ##  5 4816            9          27  0.333 ##  6 4817            5          31  0.161 ##  7 4818            9          30  0.3   ##  8 4891           48         151  0.318 ##  9 4893           15          40  0.375 ## 10 4932           33         137  0.241 ## # ℹ 34 more rows dfAnalyzed <- gsm::Analyze_NormalApprox(dfTransformed) dfAnalyzed ## # A tibble: 44 × 7 ##    GroupID Numerator Denominator Metric OverallMetric Factor  Score ##    <chr>       <int>       <int>  <dbl>         <dbl>  <dbl>  <dbl> ##  1 4942            6          47  0.128         0.288   1.08 -2.34  ##  2 5166           17          95  0.179         0.288   1.08 -2.27  ##  3 4817            5          31  0.161         0.288   1.08 -1.51  ##  4 5229           12          58  0.207         0.288   1.08 -1.32  ##  5 4932           33         137  0.241         0.288   1.08 -1.18  ##  6 4986           13          58  0.224         0.288   1.08 -1.04  ##  7 4985           28         114  0.246         0.288   1.08 -0.972 ##  8 5084            4          21  0.190         0.288   1.08 -0.954 ##  9 5082            9          41  0.220         0.288   1.08 -0.938 ## 10 4969           14          60  0.233         0.288   1.08 -0.907 ## # ℹ 34 more rows dfFlagged <- gsm::Flag_NormalApprox(dfAnalyzed, vThreshold = c(-3, -2, 2, 3)) dfFlagged ## # A tibble: 44 × 8 ##    GroupID Numerator Denominator Metric OverallMetric Factor  Score  Flag ##    <chr>       <int>       <int>  <dbl>         <dbl>  <dbl>  <dbl> <dbl> ##  1 5194           66         182  0.363         0.288   1.08  2.13      1 ##  2 4942            6          47  0.128         0.288   1.08 -2.34     -1 ##  3 5166           17          95  0.179         0.288   1.08 -2.27     -1 ##  4 4817            5          31  0.161         0.288   1.08 -1.51      0 ##  5 5229           12          58  0.207         0.288   1.08 -1.32      0 ##  6 4932           33         137  0.241         0.288   1.08 -1.18      0 ##  7 4986           13          58  0.224         0.288   1.08 -1.04      0 ##  8 4985           28         114  0.246         0.288   1.08 -0.972     0 ##  9 5084            4          21  0.190         0.288   1.08 -0.954     0 ## 10 5082            9          41  0.220         0.288   1.08 -0.938     0 ## # ℹ 34 more rows dfSummary <- gsm::Summarize(dfFlagged) dfSummary ## # A tibble: 44 × 6 ##    GroupID Numerator Denominator Metric Score  Flag ##    <chr>       <int>       <int>  <dbl> <dbl> <dbl> ##  1 5194           66         182  0.363  2.13     1 ##  2 5166           17          95  0.179 -2.27    -1 ##  3 4942            6          47  0.128 -2.34    -1 ##  4 4968           10          24  0.417  1.34     0 ##  5 4988           16          39  0.410  1.62     0 ##  6 5168           11          27  0.407  1.31     0 ##  7 5311            8          20  0.4    1.06     0 ##  8 5273           16          40  0.4    1.50     0 ##  9 4893           15          40  0.375  1.16     0 ## 10 5083           16          44  0.364  1.06     0 ## # ℹ 34 more rows dfBounds <- gsm::Analyze_NormalApprox_PredictBounds(dfTransformed, vThreshold = c(-3, -2, 2, 3)) dfBounds ## # A tibble: 1,254 × 5 ##    Threshold Denominator LogDenominator Numerator  Metric ##        <dbl>       <dbl>          <dbl>     <dbl>   <dbl> ##  1        -3        24.6           3.20    0.0927 0.00377 ##  2        -3        25.2           3.23    0.189  0.00750 ##  3        -3        25.9           3.25    0.287  0.0111  ##  4        -3        26.5           3.28    0.386  0.0145  ##  5        -3        27.2           3.30    0.485  0.0179  ##  6        -3        27.8           3.33    0.586  0.0211  ##  7        -3        28.5           3.35    0.688  0.0242  ##  8        -3        29.2           3.37    0.792  0.0272  ##  9        -3        29.8           3.39    0.895  0.0300  ## 10        -3        30.5           3.42    1.00   0.0328  ## # ℹ 1,244 more rows chart <- gsm::Visualize_Scatter(dfFlagged, dfBounds) chart"},{"path":[]},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"ur-funnel","dir":"Articles","previous_headings":"","what":"UR Funnel","title":"Comparing {simaerep} and Funnel Plot Performance","text":"write funnel function adapted {gsm}","code":"funnel_ur <- function(df, site, ur_rate) {   df %>%     filter(visit == max(visit), .by = patnum) %>%     summarise(       Metric = sum(.data$n_ae) / sum(.data$visit),       n_ae = sum(n_ae),       visit = sum(visit),       .by = \"site_number\"     ) %>%     mutate(       n_ae = ifelse(site_number == site, n_ae * (1 - ur_rate), n_ae),       Metric = n_ae / visit     ) %>%     mutate(           vMu = sum(.data$n_ae) / sum(.data$visit),           z_0 = ifelse(.data$vMu == 0,             0,             (.data$Metric - .data$vMu) /               sqrt(.data$vMu / .data$visit)           ),           phi = mean(.data$z_0^2),           z_i = ifelse(.data$vMu == 0 | .data$phi == 0,             0,             (.data$Metric - .data$vMu) /               sqrt(.data$phi * .data$vMu / .data$visit)           )     ) %>%     filter(site_number == site) %>%     pull(z_i) }  sim_ur_funnel <- function(df) {   df %>%     group_by(study_id) %>%     nest() %>%     ungroup() %>%     mutate(       sites = map(data, ~ distinct(., site_number))     ) %>%     unnest(sites) %>%     mutate(ur = list(tibble(ur_rate = c(0, 0.1, 0.25, 0.5, 0.75, 1)))) %>%     unnest(ur) %>%     mutate(       score = pmap_dbl(list(data, site_number, ur_rate), funnel_ur, .progress = TRUE)     ) }  df_sim_ur_funnel_flex <- sim_ur_funnel(df_portf_flex) df_sim_ur_funnel_fix <- sim_ur_funnel(df_portf_fix)"},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"ur-simaerep","dir":"Articles","previous_headings":"","what":"UR {simaerep}","title":"Comparing {simaerep} and Funnel Plot Performance","text":"simulate -reporting portfolios using {simaerep} using sim_ur_scenarios().","code":"df_sim_simaerep_fix <- sim_ur_scenarios(    df_portf_fix,    extra_ur_sites = 0,    ur_rate = c(0, 0.1, 0.25, 0.5, 0.75, 1),    parallel = TRUE,    poisson = TRUE,    prob_lower = TRUE,    progress = TRUE ) df_sim_simaerep_flex <- sim_ur_scenarios(    df_portf_flex,    extra_ur_sites = 0,    ur_rate = c(0, 0.1, 0.25, 0.5, 0.75, 1),    parallel = TRUE,    poisson = TRUE,    prob_lower = TRUE,    progress = TRUE )"},{"path":[]},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"combine-results","dir":"Articles","previous_headings":"Evaluate","what":"Combine Results","title":"Comparing {simaerep} and Funnel Plot Performance","text":"funnel plot score use multiplicity correction, also compare funnel plot score {simaerep} score w/o multiplicity correction.","code":"df_sim_simaerep_fix$ae_rate <- \"AE rate: fix\" df_sim_simaerep_flex$ae_rate <- \"AE rate: flexible\" df_sim_ur_funnel_fix$ae_rate <- \"AE rate: fix\" df_sim_ur_funnel_flex$ae_rate <- \"AE rate: flexible\"    df_sim_fun_thresh2 <- bind_rows(df_sim_ur_funnel_fix, df_sim_ur_funnel_flex) %>%   mutate(     type = \"funnel\",   ) %>%   select(type, ae_rate, study_id, site_number, ur_rate, score)   df_sim_simaerep_threshp95 <-  bind_rows(df_sim_simaerep_fix, df_sim_simaerep_flex) %>%   mutate(     type = \"{simaerep}\"   ) %>%   select(type, ae_rate, study_id, site_number, ur_rate, score = prob_low_prob_ur)  df_sim_simaerep_threshp95_no_mult <-  bind_rows(df_sim_simaerep_fix, df_sim_simaerep_flex) %>%   mutate(     type = \"{simaerep} no mult\"   ) %>%   mutate(     score = 1 - prob_low   ) %>%   select(type, ae_rate, study_id, site_number, ur_rate, score)   df_eval <- bind_rows(   df_sim_simaerep_threshp95,   df_sim_simaerep_threshp95_no_mult,   df_sim_fun_thresh2 )"},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"auc","dir":"Articles","previous_headings":"Evaluate","what":"AUC","title":"Comparing {simaerep} and Funnel Plot Performance","text":"continue comparing ROC-AUC.","code":"get_roc <- function(df_ur, df_nr) {   df <- bind_rows(df_ur, df_nr)    pROC::roc(df, response = \"is_ur\", predictor = \"score\", quiet = TRUE) }  # use 0 scenario to mix with ur scenario and calculate auc from scores df_nr <- df_eval %>%   filter(ur_rate == 0) %>%   mutate(is_ur = \"no\") %>%   select(- ur_rate) %>%   group_by(type, study_id, ae_rate) %>%   nest() %>%   ungroup() %>%   rename(data_nr = data)     df_ur <- df_eval %>%   filter(ur_rate > 0) %>%   mutate(is_ur = \"yes\") %>%   group_by(type, study_id, ur_rate, ae_rate) %>%   nest() %>%   ungroup() %>%   rename(data_ur = data)   df_auc <- df_ur %>%   left_join(     df_nr,     by = c(\"type\", \"study_id\", \"ae_rate\")   ) %>%   mutate(     roc = map2(data_ur, data_nr, get_roc, .progress = TRUE),     auc = map_dbl(roc, pROC::auc, .progress = TRUE)   ) %>%   select(type, study_id, ur_rate, ae_rate, roc, auc)"},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"table","dir":"Articles","previous_headings":"Evaluate > AUC","what":"Table","title":"Comparing {simaerep} and Funnel Plot Performance","text":"","code":"df_auc %>%   summarise(     sd_auc = sd(.data$auc),     auc = mean(.data$auc),     .by = c(type, ur_rate, ae_rate)   ) %>%   knitr::kable(digit = 3)"},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"plot","dir":"Articles","previous_headings":"Evaluate > AUC","what":"Plot","title":"Comparing {simaerep} and Funnel Plot Performance","text":"","code":"df_auc %>%   ggplot(aes(type, auc)) +     geom_boxplot(aes(fill = type)) +     facet_grid(ae_rate ~ ur_rate)  +     scale_fill_brewer(palette = \"Dark2\") +     theme(axis.text.x = element_blank())"},{"path":[]},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"thresholds","dir":"Articles","previous_headings":"Evaluate > Metrics","what":"Thresholds","title":"Comparing {simaerep} and Funnel Plot Performance","text":"set thresholds funnel simaerep w/o multiplicity correction get fpr simaerep multiplicity correction established threshold 0.95","code":"thresh_default <- 0.95  target_fpr <- df_eval %>%   filter(ur_rate == 0, type == \"{simaerep}\") %>%   summarise(fpr = sum(score >= thresh_default) / n()) %>%   pull(fpr)  thresh_no_mult <-  df_eval %>%   filter(ur_rate == 0, type == \"{simaerep} no mult\") %>%   pull(score) %>%   quantile(1 - target_fpr)  thresh_funnel <- df_eval %>%   filter(ur_rate == 0, type == \"funnel\") %>%   pull(score) %>%   quantile(target_fpr)  target_fpr ## [1] 0.0005309081 thresh_no_mult ## 99.94691%  ##     0.999 thresh_funnel ## 0.05309081%  ##   -2.979981"},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"aggregate","dir":"Articles","previous_headings":"Evaluate > Metrics","what":"Aggregate","title":"Comparing {simaerep} and Funnel Plot Performance","text":"","code":"get_prop_test_ci95 <- function(..., ix) {      stopifnot(ix %in% c(1, 2))      tryCatch(     prop.test(...)$conf.int[ix],     error = function(cnd) c(NA, NA)[ix]   ) }  aggr_results <- function(df_eval) {    df_perf <- df_eval %>%     mutate(       is_ur = case_when(         type == \"{simaerep}\" ~ score >= thresh_default,         type == \"{simaerep} no mult\" ~ score >= thresh_no_mult,         type == \"funnel\" ~ score <= thresh_funnel       )     ) %>%     summarise(       n = n(),       .by = c(type, ae_rate, ur_rate, is_ur)     ) %>%     pivot_wider(       names_from = is_ur,       values_from = n,       names_prefix = \"is_ur_\",       values_fill = 0     ) %>%     mutate(       n_sites = is_ur_TRUE + is_ur_FALSE,       ratio = is_ur_TRUE / n_sites,       ratio_type = ifelse(ur_rate == 0, \"fpr\", \"tpr\"),       ci95_low = map2_dbl(is_ur_TRUE, n_sites, ~ get_prop_test_ci95(.x, .y, ix = 1)),       ci95_high = map2_dbl(is_ur_TRUE, n_sites, ~ get_prop_test_ci95(.x, .y, ix = 2))     )   }  df_perf <- aggr_results(df_eval)"},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"table-1","dir":"Articles","previous_headings":"Evaluate > Metrics","what":"Table","title":"Comparing {simaerep} and Funnel Plot Performance","text":"","code":"df_perf %>%   knitr::kable(digits = 4)"},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"plot-1","dir":"Articles","previous_headings":"Evaluate > Metrics","what":"Plot","title":"Comparing {simaerep} and Funnel Plot Performance","text":"","code":"plot_perf <- function(df_perf) {    df_perf %>%     mutate(ur_rate = paste0(\"under-reporting rate: \",  ur_rate, \" - \", ratio_type),            ur_rate = ifelse(str_detect(ur_rate, \"fpr\"), \"fpr\", ur_rate),            ae_rate = forcats::fct_rev(factor(ae_rate))) %>%     group_by(ur_rate) %>%     ggplot(aes(type, ratio)) +       geom_errorbar(aes(ymin = ci95_low, ymax = ci95_high, color = type, linetype = ae_rate), linewidth = 1) +       facet_wrap(~ ur_rate, ncol = 1) +       coord_flip() +       theme(legend.position = \"bottom\") +       labs(         x = \"\",         y = \"CI95 Performance Ratio\",          title = \"{simaerep} vs Funnel-Plot Performance\"       ) +       scale_color_brewer(palette = \"Dark2\") }  plot_perf(df_perf)"},{"path":"https://openpharma.github.io/simaerep/articles/funnel_perf.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Comparing {simaerep} and Funnel Plot Performance","text":"Funnel plot expects constant event rates time. Performance decrease event rates flexible. {simaerep} performance uneffected flexible event rates. {simaerep} detection rates comparable false positive rates greater funnel plot detection rates event rates flexible.","code":"plan(sequential)"},{"path":"https://openpharma.github.io/simaerep/articles/inframe.html","id":"load","dir":"Articles","previous_headings":"","what":"Load","title":"Inframe Simulation Using Table Operations","text":"","code":"suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(tibble)) suppressPackageStartupMessages(library(tidyr)) suppressPackageStartupMessages(library(simaerep))"},{"path":"https://openpharma.github.io/simaerep/articles/inframe.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Inframe Simulation Using Table Operations","text":"latest 0.6.0 release added alternative version {simaerep} algorithm coded using solely dbplyr compatible table operations. expand patients site r times join patient random eligible patient study replicate calculate event per visit rate per site calculate ratio lower event per visit rate actually observed comes following advantages disadvantages: Patients individually matched patients reached visit study. need pick visit_med75 evaluation point. dbplyr compatibility means code execution can done database back-end opposed -memory. Matching patients individually costly, increases -memory computation time Limited patient sample pool patients visits patients study.","code":""},{"path":"https://openpharma.github.io/simaerep/articles/inframe.html","id":"sample-data","dir":"Articles","previous_headings":"","what":"Sample Data","title":"Inframe Simulation Using Table Operations","text":"","code":"set.seed(1)  df_visit <- sim_test_data_study(   n_pat = 1000, # number of patients in study   n_sites = 100, # number of sites in study   frac_site_with_ur = 0.05, # fraction of sites under-reporting   ur_rate = 0.4, # rate of under-reporting   ae_per_visit_mean = 0.5 # mean AE per patient visit )  df_visit$study_id <- \"A\""},{"path":"https://openpharma.github.io/simaerep/articles/inframe.html","id":"patient-level-matching","dir":"Articles","previous_headings":"","what":"Patient-Level Matching","title":"Inframe Simulation Using Table Operations","text":"use standard version algorithm.  use patient-level matching algorithm set inframe=TRUE visit_med75=FALSE. original algorithm uses fixed seeds sampling inframe method . order obtain consistent results need manually set seed. plot shows sites 10/10 patients used none excluded. also observe site average become noisy less patients used calculate averages higher visit numbers.  inframe method includes noisier data compare average event counts event per visit rates. can find events_per_visit_site events_per_visit_study df_eval. latter average event rate obtained simulation patient resampled according maximum visit. can also force inframe method use visit_med75 prefilter df_visit, adds extra step decreases performance.","code":"aerep_trad <- simaerep(df_visit) plot(aerep_trad) set.seed(1)  aerep_inframe <- simaerep(   df_visit,   inframe = TRUE,   visit_med75 = FALSE ) plot(aerep_inframe) aerep_inframe$df_eval ## # A tibble: 100 × 10 ##    study_id site_number events_per_visit_site events visits n_pat prob_low ##    <chr>    <chr>                       <dbl>  <dbl>  <dbl> <int>    <dbl> ##  1 A        S0001                       0.279     50    179    10    0     ##  2 A        S0002                       0.281     59    210    10    0     ##  3 A        S0003                       0.291     55    189    10    0     ##  4 A        S0004                       0.312     59    189    10    0     ##  5 A        S0005                       0.297     58    195    10    0     ##  6 A        S0006                       0.493    100    203    10    0.569 ##  7 A        S0007                       0.408     89    218    10    0.044 ##  8 A        S0008                       0.559     95    170    10    0.922 ##  9 A        S0009                       0.518    101    195    10    0.761 ## 10 A        S0010                       0.470     87    185    10    0.385 ## # ℹ 90 more rows ## # ℹ 3 more variables: events_per_visit_study <dbl>, prob_low_adj <dbl>, ## #   prob_low_prob_ur <dbl> set.seed(1)  aerep_inframe_visit_med75 <- simaerep(   df_visit,   inframe = TRUE,   visit_med75 = TRUE )  plot(aerep_inframe_visit_med75)"},{"path":"https://openpharma.github.io/simaerep/articles/inframe.html","id":"db","dir":"Articles","previous_headings":"","what":"DB","title":"Inframe Simulation Using Table Operations","text":"can demonstrate database-backend compatibility using connection memory duckdb database. order set number replications need create new table back-end one column many rows desired replications. lazy reference table can passed r parameter. inspecting df_eval see still lazy table object. can convert sql code. cte option makes sql code readable. can take code wrap CREATE TABLE statement Retrieve new table database. plot results {simaerep} object.  efficiently using plot_study() already written simaerep results database. avoid results recalculated just sake creating plot. However requires save df_site database well.","code":"con <- DBI::dbConnect(duckdb::duckdb(), dbdir = \":memory:\") df_r <- tibble(rep = seq(1, 1000))  dplyr::copy_to(con, df_visit, \"visit\") dplyr::copy_to(con, df_r, \"r\")  tbl_visit <- tbl(con, \"visit\") tbl_r <- tbl(con, \"r\")   aerep <- simaerep(tbl_visit, r = tbl_r, visit_med75 = FALSE) aerep$df_eval ## # Source:     SQL [?? x 10] ## # Database:   DuckDB v1.0.0 [koneswab@Darwin 23.6.0:R 4.4.1/:memory:] ## # Ordered by: study_id, site_number ##    study_id site_number events_per_visit_site events visits n_pat prob_low ##    <chr>    <chr>                       <dbl>  <dbl>  <dbl> <dbl>    <dbl> ##  1 A        S0040                       0.477     95    199    10    0.43  ##  2 A        S0082                       0.470     87    185    10    0.382 ##  3 A        S0084                       0.513    101    197    10    0.698 ##  4 A        S0030                       0.538    106    197    10    0.828 ##  5 A        S0037                       0.429     85    198    10    0.143 ##  6 A        S0034                       0.432     79    183    10    0.148 ##  7 A        S0095                       0.452     80    177    10    0.255 ##  8 A        S0089                       0.481     91    189    10    0.467 ##  9 A        S0031                       0.49      98    200    10    0.527 ## 10 A        S0069                       0.503     88    175    10    0.644 ## # ℹ more rows ## # ℹ 3 more variables: events_per_visit_study <dbl>, prob_low_adj <dbl>, ## #   prob_low_prob_ur <dbl> sql_eval <- dbplyr::sql_render(aerep$df_eval, sql_options = dbplyr::sql_options(cte = TRUE)) stringr::str_trunc(sql_eval, 500) ## <SQL> WITH q01 AS ( ##   SELECT ##     patnum, ##     site_number, ##     is_ur, ##     max_visit_mean, ##     max_visit_sd, ##     ae_per_visit_mean, ##     CAST(visit AS NUMERIC) AS visit, ##     CAST(n_ae AS NUMERIC) AS n_ae, ##     study_id ##   FROM visit ## ), ## q02 AS ( ##   SELECT DISTINCT study_id, site_number ##   FROM q01 ##   GROUP BY study_id, site_number, patnum ## ), ## q03 AS ( ##   SELECT study_id, site_number, patnum, MAX(visit) AS max_visit_per_pat ##   FROM q01 ##   GROUP BY study_id, site_number, patnum ## ), ## q04 AS ( ##   SELECT DISTINCT study... sql_create <- glue::glue(\"CREATE TABLE eval AS ({sql_eval})\") DBI::dbExecute(con, sql_create) ## [1] 100 tbl_eval <- tbl(con, \"eval\") tbl_eval ## # Source:   table<eval> [?? x 10] ## # Database: DuckDB v1.0.0 [koneswab@Darwin 23.6.0:R 4.4.1/:memory:] ##    study_id site_number events_per_visit_site events visits n_pat prob_low ##    <chr>    <chr>                       <dbl>  <dbl>  <dbl> <dbl>    <dbl> ##  1 A        S0039                       0.472     92    195    10    0.389 ##  2 A        S0010                       0.470     87    185    10    0.385 ##  3 A        S0024                       0.495     91    184    10    0.579 ##  4 A        S0014                       0.505    103    204    10    0.629 ##  5 A        S0043                       0.503     91    181    10    0.629 ##  6 A        S0036                       0.506     89    176    10    0.666 ##  7 A        S0067                       0.428     83    194    10    0.127 ##  8 A        S0019                       0.448     74    165    10    0.256 ##  9 A        S0042                       0.470     85    181    10    0.379 ## 10 A        S0094                       0.469     99    211    10    0.379 ## # ℹ more rows ## # ℹ 3 more variables: events_per_visit_study <dbl>, prob_low_adj <dbl>, ## #   prob_low_prob_ur <dbl> plot(aerep) sql_site <- dbplyr::sql_render(aerep$df_site) DBI::dbExecute(con, glue::glue(\"CREATE TABLE site AS ({sql_site})\")) ## [1] 100 tbl_site <- tbl(con, \"site\")  plot_study(tbl_visit, tbl_site, tbl_eval, study = \"A\") DBI::dbDisconnect(con)"},{"path":"https://openpharma.github.io/simaerep/articles/inframe.html","id":"in-memory-calculation-times","dir":"Articles","previous_headings":"","what":"In Memory Calculation Times","title":"Inframe Simulation Using Table Operations","text":"perform examplary tests illustrate increase -memory calculation time inframe calculation method. calculation time default settings inframe calculation time higher","code":"system.time({simaerep(df_visit, inframe = FALSE, visit_med75 = TRUE, under_only = TRUE, progress = FALSE)}) ##    user  system elapsed  ##   0.793   0.010   0.802 system.time({simaerep(df_visit, inframe = TRUE, visit_med75 = FALSE, under_only = TRUE)}) ##    user  system elapsed  ##   1.968   0.044   2.013"},{"path":"https://openpharma.github.io/simaerep/articles/intro.html","id":"load","dir":"Articles","previous_headings":"","what":"Load","title":"Introduction","text":"","code":"suppressPackageStartupMessages(library(tidyverse)) suppressPackageStartupMessages(library(knitr)) suppressPackageStartupMessages(library(simaerep))"},{"path":"https://openpharma.github.io/simaerep/articles/intro.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction","text":"Simulate adverse event reporting clinical trials goal detecting -reporting sites. Monitoring Adverse Event (AE) reporting clinical trials important patient safety. use bootstrap-based simulation assign AE -reporting probability site clinical trial. method inspired ‘infer’ R package Allen Downey’s blog article: “one test!”.","code":""},{"path":"https://openpharma.github.io/simaerep/articles/intro.html","id":"adverse-events","dir":"Articles","previous_headings":"Introduction","what":"Adverse Events","title":"Introduction","text":"adverse event (AE) untoward medical occurrence patient clinical investigation subject administered pharmaceutical product necessarily causal relationship treatment. important patient safety AEs reported back sponsor. important part quality monitoring detect clinical trial sites propagating AEs reported patients sponsor. clinical trial patients follow strict visiting schedule times treatments given exams performed. Typically AEs get reported patient -site visit clinic. total number AEs reported site depends number patients enrolled site total number visits.","code":""},{"path":"https://openpharma.github.io/simaerep/articles/intro.html","id":"algorithm","dir":"Articles","previous_headings":"Introduction","what":"Algorithm","title":"Introduction","text":"nutshell perform following steps. Record visit_med75, number patients reached visit_med75, mean cumulative AE count visit_med75 clinical trial site. Create patient pool patients study reached visit_med75 determined 1) cumulative AE count visit_med75. Draw replacement many patients 2) determined 1) calculate mean cumulative AE count draw (figure 1b). Repeat 3) 1000 times. Calculate probability obtaining mean cumulative AE count lower obtained 1) based results 4). Repeat 1-5) sites trial. Adjust probabilities using Benjamin Hochberg Procedure order correct alpha error.","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/articles/intro.html","id":"patient","dir":"Articles","previous_headings":"Introduction > Sample Data","what":"Patient","title":"Introduction","text":"Patient level AE data characterized number consecutive visits number AEs reported time. maximum consecutive visit sample normal distribution AEs reported visit sample poisson distribution. simulate AEs generated 3 patients","code":"set.seed(1)  replicate(    3,    sim_test_data_patient(     .f_sample_max_visit = function() rnorm(1, mean = 20, sd = 4),     .f_sample_ae_per_visit = function(max_visit) rpois(max_visit, 0.5)   ) ) ## [[1]] ##  [1]  0  1  1  2  4  5  6  6  6  6  7  7  8  8  9 12 12 ##  ## [[2]] ##  [1] 0 1 1 1 1 1 1 2 2 2 2 2 2 3 4 5 5 6 6 7 8 9 9 ##  ## [[3]] ##  [1] 0 0 1 2 2 3 3 3 3 3 3 3 4 4 6 6 6 6 7 7"},{"path":"https://openpharma.github.io/simaerep/articles/intro.html","id":"study","dir":"Articles","previous_headings":"Introduction > Sample Data","what":"Study","title":"Introduction","text":"order simulate patient data entire study assume make simplification sites number patients. specify fraction sites -reporting AEs. sample data 2 sites (S0001 S0002) -reporting AEs","code":"df_visit <- sim_test_data_study(   n_pat = 120,   n_sites = 6,   frac_site_with_ur = 0.4,   ur_rate = 0.6,   max_visit_mean = 20,   max_visit_sd = 4,   ae_per_visit_mean = 0.5 )  df_visit$study_id <- \"A\"  df_visit %>%   head(10) %>%   knitr::kable() df_visit %>%   select(site_number, is_ur) %>%   distinct() %>%   knitr::kable()"},{"path":[]},{"path":"https://openpharma.github.io/simaerep/articles/intro.html","id":"s3-interface","dir":"Articles","previous_headings":"Introduction > Algorithm Execution","what":"S3 interface","title":"Introduction","text":"describe internal details algorithm next. However, recommended use S3 interface, manages execution internal functions stores intermediate results.","code":"aerep <- simaerep(df_visit) aerep ## simaerep object: ## Check aerep$df_eval prob_low_prob_ur column for under-reporting probabililty. ## Plot results using plot() generic."},{"path":"https://openpharma.github.io/simaerep/articles/intro.html","id":"specifying-the-evaluation-point-visit_med75","dir":"Articles","previous_headings":"Introduction > Algorithm Execution","what":"Specifying the Evaluation Point visit_med75","title":"Introduction","text":"ongoing trial patients different number consecutive visits. find cut-visit normalize data specify single evaluation point given site based number visits patient population. determining visit number going evaluate AE reporting take maximum visit patient site take median. multiply 0.75 give us cut-point determining patient evaluated. patients evaluate take minimum maximum visits hence ensuring take highest visit number possible without excluding patients analysis. order ensure sampling pool visit large enough ensure least 20% patients study available sampling. limit visit_med75 80% quantile patient maximum visits entire study. use site_aggr aggregate simulated visit level data site level. Adjusting min_pat_pool change minimum ratio patients available sampling determines maximum values visit_med75.  Using adjusted visit_med75 drop patients (dashed lines) definition least include 50% patients favoring patients higher number visits. looking mean ae development (purple line) can already easily spot two -reporting sites. goes looking mean_ae_site_med75 column df_site. Next use bootstrap simulations determine probability obtaining mean AE value lower visit_med75 chance.","code":"df_site <- site_aggr(df_visit, method = \"med75_adj\", min_pat_pool = 0.2)  df_site %>%   kable() plot_visit_med75(df_visit, df_site, study_id_str = \"A\", n_site = 6) ## purple line:          mean site ae of patients with visit_med75 ## grey line:            patient included ## black dashed line:    patient excluded ## dotted vertical line: visit_med75, 0.75 x median of maximum patient visits of site  ## solid vertical line:  visit_med75 adjusted, increased to minimum maximum patient visit of included patients ## dashed vertical line: maximum value for visit_med75 adjusted, 80% quantile of maximum patient visits of study"},{"path":[]},{"path":"https://openpharma.github.io/simaerep/articles/intro.html","id":"advantage-over-classic-statistical-tests","dir":"Articles","previous_headings":"Introduction > Algorithm Execution > Bootstrap Simulations","what":"Advantage Over Classic Statistical Tests","title":"Introduction","text":"use classical parametric test calculate probability can reject NULL hypothesis AE counts observe visit_med75. sample AEs poisson distribution R implementation poisson.test appropriate. four major problems often encounter try describe real life count data poisson distribution described single parameter: underdispersion skewness (long right tail) inflated zeros variance mean relationship might fixed (see Distribution Modelling Location Scale Shape 5.1.2) true distribution AE counts vary study study degree influence 4 problems unknown unless thoroughly investigated. non-parametric approach propose need worry statistical assumptions. Since distribution AE count simulated patient pool draw close unknown true distribution underlying AE generating process.","code":""},{"path":"https://openpharma.github.io/simaerep/articles/intro.html","id":"disadvantages-over-classic-statistical-tests","dir":"Articles","previous_headings":"Introduction > Algorithm Execution > Bootstrap Simulations","what":"Disadvantages Over Classic Statistical Tests","title":"Introduction","text":"Upper Limit Uncompliant Sites. simulate underlying compliant patient population using data given. fraction uncompliant examples becomes high, detection rates decrease. find detection rates start decreasing 30-50% -reporting sites usable anymore majority > 50% sites -reporting see article usability limits. Lower Probability Limit number repeats determines smallest probability greater zero, example r=1000 smallest value greater zero 0.001 Computationally Expensive","code":""},{"path":"https://openpharma.github.io/simaerep/articles/intro.html","id":"methodology","dir":"Articles","previous_headings":"Introduction > Algorithm Execution > Bootstrap Simulations","what":"Methodology","title":"Introduction","text":"likely get mean AE value equal lower observe site C number patients? illustration purposes start simulate 10 hypothetical patient groups site C drawing (replacement) patients study marking obtained equal lower mean AE value initially observed (middle). Instead 10 times simulate 1000 times count many times observed equal lower mean AE value initially observed convert percentage (right). illustrate effect -reporting repeat process removed 2 AEs per patient site C. see probability obtaining equal lower mean AE value initially observed decreases (bottom).","code":"plot_sim_examples(size_dot = 4, size_raster_label = 10)"},{"path":"https://openpharma.github.io/simaerep/articles/intro.html","id":"application","dir":"Articles","previous_headings":"Introduction > Algorithm Execution > Bootstrap Simulations","what":"Application","title":"Introduction","text":"can run described simulation benchmark also perform poisson test. find probability getting mean ae visit_med75 sites S0001 S0002 0 near zero.","code":"df_sim_sites <- sim_sites(df_site, df_visit, r = 1000, poisson_test = TRUE)  df_sim_sites %>%   kable()"},{"path":"https://openpharma.github.io/simaerep/articles/intro.html","id":"alpha-error-correction","dir":"Articles","previous_headings":"Introduction","what":"Alpha Error Correction","title":"Introduction","text":"simulated test data set consists just 6 sites. However, uncommon 100 sites participate clinical trial. mean need perform 100 statistical tests, applying 5% significance threshold lead average 5 False Positives (FP). therefore need adjust calculated p-values bootstrapped probabilities using stats::p.adjust(p, method = \"BH\"), applies Benjamin Hochberg Procedure. eval_sites() uses inverted adjusted values calculates final bootstrapped AE -reporting probability (prob_low_prob_ur) includes poisson test derived -reporting probability reference (pval_prob_ur).","code":"df_eval <- eval_sites(df_sim_sites, method = \"BH\")  df_eval %>%   kable()"},{"path":"https://openpharma.github.io/simaerep/articles/intro.html","id":"plot-results","dir":"Articles","previous_headings":"Introduction","what":"Plot Results","title":"Introduction","text":"plot_study plot mean ae development sites visit level data flagged site AE -reporting threshold 95%.","code":"plot_study(df_visit, df_site, df_eval, study = \"A\")"},{"path":"https://openpharma.github.io/simaerep/articles/intro.html","id":"applying-simaerep","dir":"Articles","previous_headings":"","what":"Applying {simaerep}","title":"Introduction","text":"Instead executing previous steps manually can also use S3 interface manages intermediate results provides convenient plotting using plot() generic function.  modifying default parameters please check simaerep() documentation.","code":"aerep <- simaerep(df_visit) aerep ## simaerep object: ## Check aerep$df_eval prob_low_prob_ur column for under-reporting probabililty. ## Plot results using plot() generic. str(aerep) ## List of 11 ##  $ visit           :List of 3 ##   ..$ dim       : int [1:2] 2336 9 ##   ..$ df_summary: tibble [1 × 5] (S3: tbl_df/tbl/data.frame) ##   .. ..$ n_studies : int 1 ##   .. ..$ n_sites   : int 6 ##   .. ..$ n_patients: int 120 ##   .. ..$ n_visits  : int 2336 ##   .. ..$ n_aes     : int 942 ##   ..$ str_call  : chr \"df_visit\" ##   ..- attr(*, \"class\")= chr \"orivisit\" ##  $ df_site         : tibble [6 × 6] (S3: tbl_df/tbl/data.frame) ##   ..$ study_id          : chr [1:6] \"A\" \"A\" \"A\" \"A\" ... ##   ..$ site_number       : chr [1:6] \"S0001\" \"S0002\" \"S0003\" \"S0004\" ... ##   ..$ n_pat             : int [1:6] 20 20 20 20 20 20 ##   ..$ n_pat_with_med75  : num [1:6] 17 17 16 17 18 20 ##   ..$ visit_med75       : Named num [1:6] 15 14 17 16 16 15 ##   .. ..- attr(*, \"names\")= chr [1:6] \"80%\" \"80%\" \"80%\" \"80%\" ... ##   ..$ mean_ae_site_med75: num [1:6] 3 3.35 8.5 8.06 7.56 ... ##  $ df_sim_sites    : tibble [6 × 9] (S3: tbl_df/tbl/data.frame) ##   ..$ study_id              : chr [1:6] \"A\" \"A\" \"A\" \"A\" ... ##   ..$ site_number           : chr [1:6] \"S0001\" \"S0002\" \"S0003\" \"S0004\" ... ##   ..$ n_pat                 : int [1:6] 20 20 20 20 20 20 ##   ..$ n_pat_with_med75      : num [1:6] 17 17 16 17 18 20 ##   ..$ visit_med75           : Named num [1:6] 15 14 17 16 16 15 ##   .. ..- attr(*, \"names\")= chr [1:6] \"80%\" \"80%\" \"80%\" \"80%\" ... ##   ..$ mean_ae_site_med75    : num [1:6] 3 3.35 8.5 8.06 7.56 ... ##   ..$ mean_ae_study_med75   : num [1:6] 6.71 6.02 6.51 6.26 6.35 ... ##   ..$ n_pat_with_med75_study: int [1:6] 87 92 74 84 83 84 ##   ..$ prob_low              : num [1:6] 0 0 1 1 1 1 ##  $ df_eval         : tibble [6 × 11] (S3: tbl_df/tbl/data.frame) ##   ..$ study_id              : chr [1:6] \"A\" \"A\" \"A\" \"A\" ... ##   ..$ site_number           : chr [1:6] \"S0001\" \"S0002\" \"S0003\" \"S0004\" ... ##   ..$ n_pat                 : int [1:6] 20 20 20 20 20 20 ##   ..$ n_pat_with_med75      : num [1:6] 17 17 16 17 18 20 ##   ..$ visit_med75           : Named num [1:6] 15 14 17 16 16 15 ##   .. ..- attr(*, \"names\")= chr [1:6] \"80%\" \"80%\" \"80%\" \"80%\" ... ##   ..$ mean_ae_site_med75    : num [1:6] 3 3.35 8.5 8.06 7.56 ... ##   ..$ mean_ae_study_med75   : num [1:6] 6.71 6.02 6.51 6.26 6.35 ... ##   ..$ n_pat_with_med75_study: int [1:6] 87 92 74 84 83 84 ##   ..$ prob_low              : num [1:6] 0 0 1 1 1 1 ##   ..$ prob_low_adj          : num [1:6] 0 0 1 1 1 1 ##   ..$ prob_low_prob_ur      : num [1:6] 1 1 0 0 0 0 ##  $ r               : num 1000 ##  $ visit_med75     : logi TRUE ##  $ inframe         : logi FALSE ##  $ under_only      : logi TRUE ##  $ param_site_aggr :List of 2 ##   ..$ method      : chr \"med75_adj\" ##   ..$ min_pat_pool: num 0.2 ##  $ param_sim_sites :List of 4 ##   ..$ r           : num 1000 ##   ..$ poisson_test: logi FALSE ##   ..$ prob_lower  : logi TRUE ##   ..$ under_only  : logi TRUE ##  $ param_eval_sites:List of 2 ##   ..$ method    : chr \"BH\" ##   ..$ under_only: logi TRUE ##  - attr(*, \"class\")= chr \"simaerep\" plot(aerep) ## study = NULL, defaulting to study:A"},{"path":"https://openpharma.github.io/simaerep/articles/over.html","id":"load","dir":"Articles","previous_headings":"","what":"Load","title":"Over-Reporting Probability","text":"","code":"suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(tidyr)) suppressPackageStartupMessages(library(simaerep)) suppressPackageStartupMessages(library(ggExtra))"},{"path":"https://openpharma.github.io/simaerep/articles/over.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Over-Reporting Probability","text":"{siamerep} originally created detect -reporting AEs therefore -reporting probability calculated. Nevertheless {simaerep} can theoretically used simulate kinds subject-based clinical events, issues -reporting can represent quality issue. recent release 0.5.0 added option calculate -reporting probability score.","code":""},{"path":"https://openpharma.github.io/simaerep/articles/over.html","id":"data-set","dir":"Articles","previous_headings":"","what":"Data Set","title":"Over-Reporting Probability","text":"simulate standard data set high number sites, patients, visits events ensure dimensions normally distributed. add - -reporting sites point.","code":"set.seed(1)  df_visit <- sim_test_data_study(  n_pat = 10000,  n_sites = 1000,  frac_site_with_ur = 0,  max_visit_mean = 100,  max_visit_sd = 1,  ae_per_visit_mean = 5 )  df_visit$study_id <- \"A\""},{"path":"https://openpharma.github.io/simaerep/articles/over.html","id":"run-simaerep","dir":"Articles","previous_headings":"","what":"Run {simaerep}","title":"Over-Reporting Probability","text":"order add -reporting probability score need set parameter under_only = FALSE. original setting skips simulation sites AEs study average. new parameter calculates probability site getting lower equal average AE count site visit_med75 every site, regardless initial value compares study average. calculation takes seconds longer default setting. evaluation data frame three columns available now.","code":"system.time(   aerep_def <- simaerep(df_visit, under_only = TRUE) ) ##    user  system elapsed  ##  19.149   1.116  20.268 system.time(   aerep_ovr <- simaerep(df_visit, under_only = FALSE) ) ##    user  system elapsed  ##  23.329   1.100  24.481 setdiff(colnames(aerep_ovr$df_eval), colnames(aerep_def$df_eval)) ## [1] \"prob_high\"         \"prob_high_adj\"     \"prob_high_prob_or\""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/articles/over.html","id":"probability-getting-a-lower-ae-count","dir":"Articles","previous_headings":"Analyze","what":"Probability getting a lower AE count","title":"Over-Reporting Probability","text":"can see gap default setting generated probabilities. values filling gap can interpreted probability higher site average originally observed.","code":"cols <- c(\"study_id\", \"site_number\", \"mean_ae_site_med75\", \"mean_ae_study_med75\", \"prob_low\")  p <- bind_rows(   select(       aerep_ovr$df_eval,       all_of(cols)     ) %>%     mutate(type = \"with over-reporting\"),     select(       aerep_def$df_eval,       all_of(cols)     ) %>%     mutate(type = \"default\")   ) %>%   ggplot(aes(x = mean_ae_site_med75 - mean_ae_study_med75, y = prob_low, color = type)) +     geom_point(alpha = 0.5) +     theme(legend.position = \"bottom\") +     scale_color_manual(values = c(\"gold\", \"blue\")) +     labs(y = \"Probability of getting a lower or equal mean site AE in a 1000x simulation\")  ggExtra::ggMarginal(p, groupColour = TRUE, type = \"density\")"},{"path":"https://openpharma.github.io/simaerep/articles/over.html","id":"over-reporting","dir":"Articles","previous_headings":"Analyze","what":"Over-Reporting","title":"Over-Reporting Probability","text":"can add -reporting probability (1- -reporting probability), cases mean_ae_site_med75 equal mean_ae_study_med75 -reporting probability always zero.","code":"cols <- c(\"study_id\", \"site_number\", \"mean_ae_site_med75\", \"mean_ae_study_med75\")   p <- bind_rows(   select(       aerep_ovr$df_eval,       all_of(cols),       value = \"prob_low\"     ) %>%     mutate(type = \"new under-reporting\"),   select(       aerep_ovr$df_eval,       all_of(cols),       value = \"prob_high\"     ) %>%     mutate(type = \"new over-reporting\"),     select(       aerep_def$df_eval,       all_of(cols),       value = \"prob_low\"     ) %>%     mutate(type = \"default under-reporting\")   ) %>%   ggplot(aes(x = mean_ae_site_med75 - mean_ae_study_med75, y = value, color = type)) +     geom_point(alpha = 0.25) +     theme(legend.position = \"bottom\") +     scale_color_manual(values = c(\"gold\", \"purple\", \"blue\")) +     labs(y = \"Probability of getting a lower or equal mean site AE in a 1000x simulation\")  ggExtra::ggMarginal(p, groupColour = TRUE, type = \"density\")"},{"path":"https://openpharma.github.io/simaerep/articles/over.html","id":"multiplicity-correction","dir":"Articles","previous_headings":"Analyze","what":"Multiplicity Correction","title":"Over-Reporting Probability","text":"multiplicity correction dampens signal, avoiding false positives result chance.","code":"cols <- c(\"study_id\", \"site_number\", \"mean_ae_site_med75\", \"mean_ae_study_med75\")   p <- bind_rows(   select(       aerep_ovr$df_eval,       all_of(cols),       value = \"prob_low_prob_ur\"     ) %>%     mutate(type = \"new under-reporting\"),   select(       aerep_ovr$df_eval,       all_of(cols),       value = \"prob_high_prob_or\"     ) %>%     mutate(type = \"new over-reporting\"),     select(       aerep_def$df_eval,       all_of(cols),       value = \"prob_low_prob_ur\"     ) %>%     mutate(type = \"default under-reporting\")   ) %>%   ggplot(aes(x = mean_ae_site_med75 - mean_ae_study_med75, y = value, color = type)) +     geom_point(alpha = 0.25) +     theme(legend.position = \"bottom\") +     scale_color_manual(values = c(\"gold\", \"purple\", \"blue\")) +     labs(y = \"Probability of getting a lower or equal mean site AE in a 1000x simulation\")  ggExtra::ggMarginal(p, groupColour = TRUE, type = \"density\")"},{"path":"https://openpharma.github.io/simaerep/articles/over.html","id":"simulating-over-reporting","dir":"Articles","previous_headings":"","what":"Simulating Over-Reporting","title":"Over-Reporting Probability","text":"can simulate -reporting supplying negative ratio ur_rate can plot -reporting changing setting prob_col = \"prob_high_prob_or\".","code":"set.seed(1)  df_visit <- sim_test_data_study(  frac_site_with_ur = 0.05,  ur_rate = - 0.5, )  df_visit$study_id <- \"A\"   distinct(df_visit, site_number, is_ur, ae_per_visit_mean) ## # A tibble: 20 × 3 ##    site_number is_ur ae_per_visit_mean ##    <chr>       <lgl>             <dbl> ##  1 S0001       TRUE               0.75 ##  2 S0002       FALSE              0.5  ##  3 S0003       FALSE              0.5  ##  4 S0004       FALSE              0.5  ##  5 S0005       FALSE              0.5  ##  6 S0006       FALSE              0.5  ##  7 S0007       FALSE              0.5  ##  8 S0008       FALSE              0.5  ##  9 S0009       FALSE              0.5  ## 10 S0010       FALSE              0.5  ## 11 S0011       FALSE              0.5  ## 12 S0012       FALSE              0.5  ## 13 S0013       FALSE              0.5  ## 14 S0014       FALSE              0.5  ## 15 S0015       FALSE              0.5  ## 16 S0016       FALSE              0.5  ## 17 S0017       FALSE              0.5  ## 18 S0018       FALSE              0.5  ## 19 S0019       FALSE              0.5  ## 20 S0020       FALSE              0.5 aerep <- simaerep(df_visit, under_only = FALSE) aerep$df_eval %>%   select(site_number, mean_ae_site_med75, mean_ae_study_med75, prob_low_prob_ur, prob_high_prob_or) ## # A tibble: 20 × 5 ##    site_number mean_ae_site_med75 mean_ae_study_med75 prob_low_prob_ur ##    <chr>                    <dbl>               <dbl>            <dbl> ##  1 S0001                    11.7                 7.48            0     ##  2 S0002                     7.72                8.27            0.58  ##  3 S0003                     6.93                7.72            0.687 ##  4 S0004                     7.40                7.69            0.364 ##  5 S0005                     7.98                7.66            0.118 ##  6 S0006                     8.67                8.22            0.118 ##  7 S0007                     7.58                7.68            0.276 ##  8 S0008                     6.85                7.72            0.687 ##  9 S0009                     7.78                7.67            0.118 ## 10 S0010                     7.59                7.68            0.248 ## 11 S0011                     7.17                7.71            0.587 ## 12 S0012                     7.9                 7.67            0.118 ## 13 S0013                     7.6                 7.19            0.118 ## 14 S0014                     7.05                7.71            0.644 ## 15 S0015                     7.98                7.66            0.118 ## 16 S0016                     6.96                7.72            0.687 ## 17 S0017                     7.36                7.69            0.445 ## 18 S0018                     7.91                7.67            0.118 ## 19 S0019                     7.46                7.69            0.364 ## 20 S0020                     7.09                7.71            0.644 ## # ℹ 1 more variable: prob_high_prob_or <dbl> plot(aerep, prob_col = \"prob_high_prob_or\") ## study = NULL, defaulting to study:A plot(aerep, prob_col = \"prob_low_prob_ur\") # Default ## study = NULL, defaulting to study:A"},{"path":"https://openpharma.github.io/simaerep/articles/performance.html","id":"load","dir":"Articles","previous_headings":"","what":"Load","title":"Statistical Performance","text":"","code":"suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(tibble)) suppressPackageStartupMessages(library(tidyr)) suppressPackageStartupMessages(library(simaerep)) suppressPackageStartupMessages(library(purrr)) suppressPackageStartupMessages(library(stringr))"},{"path":[]},{"path":"https://openpharma.github.io/simaerep/articles/performance.html","id":"performance-statistical","dir":"Articles","previous_headings":"","what":"Performance (Statistical)","title":"Statistical Performance","text":"","code":"suppressPackageStartupMessages(library(furrr)) suppressPackageStartupMessages(library(future))  plan(multisession, workers = 6)"},{"path":"https://openpharma.github.io/simaerep/articles/performance.html","id":"load-portfolio","dir":"Articles","previous_headings":"Performance (Statistical)","what":"Load Portfolio","title":"Statistical Performance","text":"","code":"df_config <- readr::read_csv(\"ae_conf_20240220.csv\") df_ae_rates <- readr::read_csv(\"ae_rates_20240220.csv\")  df_portf_flex <- sim_test_data_portfolio(df_config, df_ae_rates = df_ae_rates, parallel = TRUE, progress = TRUE)  df_portf_flex %>%   readr::write_csv(\"portf.csv\") df_portf_flex <- readr::read_csv(\"portf.csv\")"},{"path":"https://openpharma.github.io/simaerep/articles/performance.html","id":"simulating-under-reporting","dir":"Articles","previous_headings":"Performance (Statistical)","what":"Simulating Under Reporting","title":"Statistical Performance","text":"reanalyze performance {simaerep} integrating learnings previous versions. apply following. generate portfolio using flexible AE rates remove AEs directly data set aggregated metric using sim_ur() set threshold confusion matrix methods similar fpr default algorithm default algorithm active -reporting scoring inframe algorithm visit_med75 inframe algorithm box-plot funnel-plot","code":""},{"path":"https://openpharma.github.io/simaerep/articles/performance.html","id":"functions","dir":"Articles","previous_headings":"Performance (Statistical)","what":"Functions","title":"Statistical Performance","text":"","code":"funnel <- function(df) {   df %>%   filter(visit == max(visit), .by = patnum) %>%   summarise(     Metric = sum(.data$n_ae) / sum(.data$visit),     n_ae = sum(n_ae),     visit = sum(visit),     .by = \"site_number\"   ) %>%   mutate(         vMu = sum(.data$n_ae) / sum(.data$visit),         z_0 = ifelse(.data$vMu == 0,           0,           (.data$Metric - .data$vMu) /             sqrt(.data$vMu / .data$visit)         ),         phi = mean(.data$z_0^2),         z_i = ifelse(.data$vMu == 0 | .data$phi == 0,           0,           (.data$Metric - .data$vMu) /             sqrt(.data$phi * .data$vMu / .data$visit)         )   ) }  box <- function(df) {   df <- df %>%     filter(visit == max(visit), .by = patnum) %>%     summarise(       event_per_visit = sum(.data$n_ae) / sum(.data$visit),       .by = \"site_number\"     )      bx <- boxplot.stats(df$event_per_visit)      df <- df %>%     mutate(       box_out = event_per_visit < bx$stats[1]     )    }   perf <- function(df_visit, study_id, site_number, ur_rate) {   df_vs_study <- df_visit %>%     sim_ur(study_id, site_number, ur_rate)      df_visit_med75 <- df_vs_study %>%     simaerep(under_only = TRUE, progress = FALSE, check = FALSE) %>%     .$df_eval %>%     filter(.data$site_number == .env$site_number)      df_visit_med75_over <- df_vs_study %>%     simaerep(under_only = FALSE, progress = FALSE, check = FALSE) %>%     .$df_eval %>%     filter(.data$site_number == .env$site_number)    df_inframe <- df_vs_study %>%     simaerep(inframe = TRUE, under_only = TRUE, check = FALSE, visit_med75 = FALSE) %>%     .$df_eval %>%     filter(.data$site_number == .env$site_number)      df_inframe_visit_med75 <- df_vs_study %>%     simaerep(inframe = TRUE, under_only = TRUE, check = FALSE, visit_med75 = TRUE) %>%     .$df_eval %>%     filter(.data$site_number == .env$site_number)      funnel_zi <- funnel(df_vs_study) %>%     filter(.data$site_number == .env$site_number) %>%     pull(z_i)      box_out <- box(df_vs_study) %>%     filter(.data$site_number == .env$site_number) %>%     pull(box_out)    tibble(     score_visit_med75 = df_visit_med75$prob_low_prob_ur,     score_visit_med75_no_mult = 1 - df_visit_med75$prob_low,     score_visit_med75_over = df_visit_med75_over$prob_low_prob_ur,     score_visit_med75_over_no_mult = 1 - df_visit_med75_over$prob_low,     score_inframe = df_inframe$prob_low_prob_ur,     score_inframe_no_mult = 1 - df_inframe$prob_low,     score_inframe_visit_med75 = df_inframe_visit_med75$prob_low_prob_ur,     score_inframe_visit_med75_no_mult = 1 - df_inframe_visit_med75$prob_low,     score_funnel_zi = funnel_zi,     score_box_out = as.integer(box_out),     stat_visit_med75_visit_med75 = df_visit_med75$visit_med75,     stat_visit_med75_n_pat_with_med75 = df_visit_med75$n_pat_with_med75,     stat_visit_med75_mean_ae_site_med75 = df_visit_med75$mean_ae_site_med75,     stat_visit_med75_mean_ae_study_med75 = df_visit_med75$mean_ae_study_med75,     stat_inframe_visit_med75 = df_inframe_visit_med75$visit_med75,     stat_inframe_visit_med75_n_pat_with_med75 = df_inframe_visit_med75$n_pat_with_med75,     stat_inframe_visit_med75_events_per_visit_site = df_inframe_visit_med75$events_per_visit_site,     stat_inframe_visit_med75_events_per_visit_study = df_inframe_visit_med75$events_per_visit_study,     stat_inframe_n_pat = df_inframe$n_pat,     stat_inframe_events_per_visit_site = df_inframe$events_per_visit_site,     stat_inframe_events_per_visit_study = df_inframe$events_per_visit_study,   ) }  # perf(df_portf_flex, study_id = \"0010\", site_number = \"15153\", ur_rate = 0) %>% unlist() # perf(df_portf_flex, study_id = \"0010\", site_number = \"15153\", ur_rate = 0.5) %>% unlist() # perf(df_portf_flex, study_id = \"0010\", site_number = \"15153\", ur_rate = 0.75) %>% unlist() # perf(df_portf_flex, study_id = \"0010\", site_number = \"15153\", ur_rate = 1) %>% unlist()"},{"path":"https://openpharma.github.io/simaerep/articles/performance.html","id":"grid","dir":"Articles","previous_headings":"Performance (Statistical)","what":"Grid","title":"Statistical Performance","text":"","code":"df_grid <- df_portf_flex %>%   distinct(study_id, site_number) %>%   # to reduce calculation time we only take every xth study   filter(dense_rank(study_id)%%5 == 0) %>%   mutate(ur_rate = list(c(0, 0.1, 0.25, 0.5, 0.75, 1))) %>%   unnest(ur_rate)  df_grid ## # A tibble: 27,120 × 3 ##    study_id site_number ur_rate ##    <chr>    <chr>         <dbl> ##  1 0005     4480           0    ##  2 0005     4480           0.1  ##  3 0005     4480           0.25 ##  4 0005     4480           0.5  ##  5 0005     4480           0.75 ##  6 0005     4480           1    ##  7 0005     4481           0    ##  8 0005     4481           0.1  ##  9 0005     4481           0.25 ## 10 0005     4481           0.5  ## # ℹ 27,110 more rows"},{"path":"https://openpharma.github.io/simaerep/articles/performance.html","id":"apply","dir":"Articles","previous_headings":"Performance (Statistical)","what":"Apply","title":"Statistical Performance","text":"","code":"with_progress_cnd(   df_perf <- df_grid %>%     mutate(       perf = purrr_bar(         list(study_id, site_number, ur_rate),         .purrr = furrr::future_pmap,         .f = function(x, y, z) perf(df_portf_flex, x, y, z),         .purrr_args = list(.options = furrr_options(seed = TRUE)),         .steps = nrow(.)       )     ) )  df_perf %>%   unnest(perf) %>%   readr::write_csv(\"perf.csv\") df_perf <- readr::read_csv(\"perf.csv\", show_col_types = FALSE) df_perf_long <- df_perf %>%   pivot_longer(cols = - c(study_id, site_number, ur_rate), names_to = \"type\", values_to = \"score\") %>%   filter(startsWith(type, \"score_\")) %>%   mutate(type = stringr::str_replace(type, \"score_\", \"\"))"},{"path":[]},{"path":"https://openpharma.github.io/simaerep/articles/performance.html","id":"thresholds","dir":"Articles","previous_headings":"Evaluation","what":"Thresholds","title":"Statistical Performance","text":"set thresholds get fpr 0.01. Note results probability thresholds ~ 0.99 scores w/o multiplicity correction recommended funne plot score threshold -2.","code":"target_fpr <- 0.01  df_thresh <- df_perf_long %>%   group_by(type) %>%   nest() %>%   ungroup() %>%   mutate(     data = map(data, ~ filter(., ur_rate == 0)),     thresh1 = map_dbl(data, ~ quantile(pull(., score), 1 - target_fpr)),     thresh2 = map_dbl(data, ~ quantile(pull(., score), target_fpr)),     thresh = ifelse(type == \"funnel_zi\", thresh2, thresh1)   ) %>%   select(type, thresh)    df_thresh ## # A tibble: 10 × 2 ##    type                        thresh ##    <chr>                        <dbl> ##  1 visit_med75                  0.455 ##  2 visit_med75_no_mult          0.989 ##  3 visit_med75_over             0.455 ##  4 visit_med75_over_no_mult     0.989 ##  5 inframe                      0.384 ##  6 inframe_no_mult              0.982 ##  7 inframe_visit_med75          0.412 ##  8 inframe_visit_med75_no_mult  0.987 ##  9 funnel_zi                   -2.03  ## 10 box_out                      1"},{"path":"https://openpharma.github.io/simaerep/articles/performance.html","id":"aggregate","dir":"Articles","previous_headings":"Evaluation","what":"Aggregate","title":"Statistical Performance","text":"","code":"get_prop_test_ci95 <- function(..., ix) {      stopifnot(ix %in% c(1, 2))      tryCatch(     prop.test(...)$conf.int[ix],     error = function(cnd) c(NA, NA)[ix]   ) }  df_aggr <- df_perf_long %>%   left_join(df_thresh, by = \"type\") %>%   mutate(     is_ur = ifelse(type == \"funnel_zi\", score <= thresh, score >= thresh),     is_ur = ifelse(type == \"box_out\", score == 1, is_ur)   ) %>%   summarise(     n = n(),     .by = c(type, ur_rate, is_ur)   ) %>%   pivot_wider(     names_from = is_ur,     values_from = n,     names_prefix = \"is_ur_\",     values_fill = 0   ) %>%   mutate(     n_sites = is_ur_TRUE + is_ur_FALSE,     ratio = is_ur_TRUE / n_sites,     ratio_type = ifelse(ur_rate == 0, \"fpr\", \"tpr\"),     ci95_low = map2_dbl(is_ur_TRUE, n_sites, ~ get_prop_test_ci95(.x, .y, ix = 1)),     ci95_high = map2_dbl(is_ur_TRUE, n_sites, ~ get_prop_test_ci95(.x, .y, ix = 2)),     type_strip = str_replace(type, \"_no_mult\", \"\"),     has_mult = ! str_detect(type, \"no_mult\") & ! type %in% c(\"funnel_zi\", \"box_out\")   )"},{"path":"https://openpharma.github.io/simaerep/articles/performance.html","id":"table","dir":"Articles","previous_headings":"Evaluation","what":"Table","title":"Statistical Performance","text":"Methods: visit_med75: default algorithm visit_med75_over: default algorithm including -reporting score inframe: new algorithm using table operations visit_med75 inframe visit_med75: new aldorithm using table operations visit_med75 funnel_zi: funnel plot derived outlier detection box_out: box plot derived outlier detection FN: false negatives TP: true positives","code":"df_aggr %>%   select(method = type_strip, has_mult, ur_rate, FN = is_ur_FALSE, TP = is_ur_TRUE, n_sites, ratio_type, ratio, ci95_low, ci95_high) %>%   knitr::kable(digits = 4)"},{"path":"https://openpharma.github.io/simaerep/articles/performance.html","id":"plot","dir":"Articles","previous_headings":"Evaluation","what":"Plot","title":"Statistical Performance","text":"","code":"df_aggr %>%   mutate(ur_rate = paste0(\"under-reporting rate: \",  ur_rate, \" - \", ratio_type)   ) %>%   group_by(ur_rate) %>%   ggplot(aes(type, ratio)) +     geom_errorbar(aes(ymin = ci95_low, ymax = ci95_high, color = type_strip, alpha = has_mult), linewidth = 1) +     facet_wrap(~ ur_rate, ncol = 1) +     coord_flip() +     theme(       legend.position = \"right\",       axis.text.y = element_blank(),       axis.ticks.y = element_blank()     ) +     labs(       x = \"\",       y = \"Ratio (CI95)\",        title = \"{simaerep} Performance\",       color = \"Method\",       alpha = \"Multiplicity Correction\"     ) +     scale_color_manual(values = rev(RColorBrewer::brewer.pal(n = 6, name = \"Dark2\"))) +     scale_alpha_manual(values = c(1, 0.5))"},{"path":"https://openpharma.github.io/simaerep/articles/performance.html","id":"summary","dir":"Articles","previous_headings":"Evaluation","what":"Summary","title":"Statistical Performance","text":"new inframe method slightly better performance original algorithm new inframe methods compares event per visit rates without dropping patients AEs analysis. likely explain performance increase. observed similar increase optimized visit_med75 past experiments. multiplicity correction imposes penalty true positive rate observation already made Boeringer Ingelheim Team evaluation {simaerep}. can now reporducibly confirm . unaltered probability score returned bootstrap algorithm already provides realistic -reporting probabilities. {simaerep} outperforms simpler methods funnel plot box plot outlier detection. controly confirm previous observations made {simaerep} validation.","code":""},{"path":"https://openpharma.github.io/simaerep/articles/portfolio_perf.html","id":"load","dir":"Articles","previous_headings":"","what":"Load","title":"(superseeded) simaerep Portfolio Performance","text":"","code":"suppressPackageStartupMessages(library(tidyverse)) suppressPackageStartupMessages(library(knitr)) suppressPackageStartupMessages(library(furrr)) suppressPackageStartupMessages(library(future)) suppressPackageStartupMessages(library(simaerep))  # RAM ~26 GB # plan 4GB per core plan(multisession, workers = 6)"},{"path":"https://openpharma.github.io/simaerep/articles/portfolio_perf.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"(superseeded) simaerep Portfolio Performance","text":"want define minimal requirements simulating test data reflects realistic portfolio data want use benchmark overall {simaerep} performance.","code":""},{"path":"https://openpharma.github.io/simaerep/articles/portfolio_perf.html","id":"performance","dir":"Articles","previous_headings":"","what":"Performance","title":"(superseeded) simaerep Portfolio Performance","text":"simulations take time run require multiple cores appropriate memory. Rendering articles {pkgdown} can bit unstable recommend render first using pure {rmarkdown} generate intermediate csv files.","code":"rmarkdown::render(\"vignettes/_portfolio_perf.Rmd\", knit_root_dir = paste0(getwd(), \"/vignettes\"))"},{"path":"https://openpharma.github.io/simaerep/articles/portfolio_perf.html","id":"portfolio-configuration","dir":"Articles","previous_headings":"","what":"Portfolio Configuration","title":"(superseeded) simaerep Portfolio Performance","text":"portfolio configuration used generate compliant test data similar realistic portfolio studies sites compliant. subsequently remove percentage AEs study site calculate AE -reporting statistics calculate overall detection thresholds. portfolio configuration give minimal description portfolio without violating data privacy laws competitive intellectual property. propose include following metrics portfolio configuration: site parameters: mean maximum patient visits sd maximum patient visits total number patients study parameters: mean AE per visit information contained portfolio configuration scarce thus can shared easily within industry. can use parameters simulate test data assessing {simaerep} performance given portfolio. can start maximum aggregation visit n_ae patient level starting df_visit use simaerep::site_aggr(). can use simaerep::get_config generate valid portfolio configuration, automatically apply filters: remove patients 0 visits minimum number patients per study minimum number sites per study anonymize study site IDs","code":"df_visit1 <- sim_test_data_study(n_pat = 100, n_sites = 10,    frac_site_with_ur = 0.4, ur_rate = 0.6)  df_visit1$study_id <- \"A\"  df_visit2 <- sim_test_data_study(n_pat = 100, n_sites = 10,                                       frac_site_with_ur = 0.2, ur_rate = 0.1)  df_visit2$study_id <- \"B\"  df_visit <- bind_rows(df_visit1, df_visit2)  df_site_max <- df_visit %>%   group_by(study_id, site_number, patnum) %>%   summarise(max_visit = max(visit),             max_ae = max(n_ae),             .groups = \"drop\")  df_config <- simaerep::get_config(   df_site_max, anonymize = TRUE,   min_pat_per_study = 100,   min_sites_per_study = 10 )  df_config %>%   head(25) %>%   knitr::kable()"},{"path":"https://openpharma.github.io/simaerep/articles/portfolio_perf.html","id":"simulate-portfolio-from-configuration","dir":"Articles","previous_headings":"Portfolio Configuration","what":"Simulate Portfolio from Configuration","title":"(superseeded) simaerep Portfolio Performance","text":"can now apply sim_test_data_portfolio uses sim_test_data_study() generate artificial data visit level.","code":"df_portf <- sim_test_data_portfolio(df_config)  df_portf %>%   head(25) %>%   knitr::kable()"},{"path":"https://openpharma.github.io/simaerep/articles/portfolio_perf.html","id":"load-realistic-configuration","dir":"Articles","previous_headings":"Portfolio Configuration","what":"Load Realistic Configuration","title":"(superseeded) simaerep Portfolio Performance","text":"load realistic portfolio configuration.","code":"df_config <- readr::read_csv(\"ae_profile.csv\")  df_config %>%   head(25) %>%   knitr::kable()"},{"path":"https://openpharma.github.io/simaerep/articles/portfolio_perf.html","id":"simulate-portfolio","dir":"Articles","previous_headings":"","what":"Simulate Portfolio","title":"(superseeded) simaerep Portfolio Performance","text":"simulate artificial visit level data. Using parallel processing. stage simulated compliant test data realistic study portfolio.","code":"df_portf <- sim_test_data_portfolio(df_config, parallel = TRUE, progress = TRUE)  df_portf %>%   head(25) %>%   knitr::kable()"},{"path":"https://openpharma.github.io/simaerep/articles/portfolio_perf.html","id":"confirm-that-portfolio-simulation-results-in-similar-configuration","dir":"Articles","previous_headings":"Simulate Portfolio","what":"Confirm that Portfolio Simulation results in Similar Configuration","title":"(superseeded) simaerep Portfolio Performance","text":"now use simulated portfolio data extract configuration. expect configuration extracting similar configuration started first place.   portfolio simulation sample patient maximum visit values normal distribution. returns values smaller 1 replace one. larger SD values compared mean values likely sample patient maximum visit smaller one. Every time correction lowering patient maximum visit SD simulation, can see graph .","code":"df_site_max_portf <- df_portf %>%   group_by(study_id, site_number, patnum) %>%   summarise(max_visit = max(visit),             max_ae = max(n_ae),             .groups = \"drop\")  df_config_portf <- simaerep::get_config(df_site_max_portf, anonymize = TRUE, min_pat_per_study = 100, min_sites_per_study = 10)  df_comp <- df_config %>%   left_join(     df_config_portf,     by = c(\"study_id\", \"site_number\"),     suffix = c(\".ori\", \".sim\")   ) %>%   select(     study_id,     starts_with(\"ae\"),     site_number,     contains(\"max_visit_sd\"),     contains(\"max_visit_mean\"),     contains(\"n_pat\")   )  df_comp %>%   select(study_id, starts_with(\"ae\")) %>%   distinct() %>%   ggplot(aes(ae_per_visit_mean.ori, ae_per_visit_mean.sim)) +     geom_point() +     geom_smooth() +     labs(title = \"simulated vs original AE per visit study mean\") +     theme(aspect.ratio = 1) df_comp %>%   ggplot(aes(max_visit_sd.ori, max_visit_sd.sim)) +     geom_point() +     geom_smooth() +     geom_abline(slope = 1, color = \"red\") +     labs(title = \"simulated vs original max visit sd site\") +     theme(aspect.ratio = 1) df_comp %>%   ggplot(aes(max_visit_mean.ori, max_visit_mean.sim)) +     geom_point() +     geom_smooth() +     geom_abline(slope = 1, color = \"red\") +     labs(title = \"simulated vs original max visit mean site\") +     theme(aspect.ratio = 1) df_comp %>%   ggplot(aes(n_pat.ori, n_pat.sim)) +     geom_point() +     geom_smooth() +     labs(title = \"simulated vs original n_pat site\") +     theme(aspect.ratio = 1)"},{"path":"https://openpharma.github.io/simaerep/articles/portfolio_perf.html","id":"get-under-reporting-probability-for-different-under-reporting-scenarios","dir":"Articles","previous_headings":"","what":"Get Under-Reporting Probability for Different Under Reporting Scenarios","title":"(superseeded) simaerep Portfolio Performance","text":"performance detecting AE -reporting dependent three things: higher mean AE per visit study level better higher number patients -reporting site better higher maximum visit number per patient better higher number -reporting sites study worse initial usability assessment fixed parameters. going leave portfolio. vanilla version artificial portfolio data contain -reporting sites yet. However simaerep::sim_ur_scenarios() apply -reporting scenarios site. Reducing number AEs given -reporting rate (ur_rate) patients site add corresponding -reporting statistics.","code":"df_scen <- sim_ur_scenarios(    df_portf,    extra_ur_sites = 0,    ur_rate = c(0.1, 0.25, 0.5, 0.75, 1),    parallel = TRUE,    poisson = TRUE,    prob_lower = TRUE,    progress = TRUE )   readr::write_csv(df_scen, file = \"scen.csv\") df_scen <- readr::read_csv(\"scen.csv\")   df_scen %>%   head(25) %>%   knitr::kable()"},{"path":"https://openpharma.github.io/simaerep/articles/portfolio_perf.html","id":"portfolio-performance","dir":"Articles","previous_headings":"","what":"Portfolio Performance","title":"(superseeded) simaerep Portfolio Performance","text":"every site portfolio now generated AE -reporting probability following -reporting rates 0, 0.25, 0.5, 0.75 1: usually recommend 0.95 threshold flag sites -reporting. can use threshold calculate ratio flagged sites per -reporting rate. zero -reporting scenario defines expected false positive rates (fpr fp/N), scenarios give us expected true positive rate (tpr tp/P) sites -reporting level. condition tpr fpr rates simulated portfolio site -reporting site respective study.","code":"df_scen %>%   select(study_id, site_number, ur_rate, prob_low_prob_ur) %>%   head(25) %>%   knitr::kable() df_perf_portf <- df_scen %>%   mutate(is_ur = prob_low_prob_ur >= 0.95) %>%   group_by(ur_rate, is_ur) %>%   count() %>%   pivot_wider(     names_from = is_ur,     values_from = n,     names_prefix = \"is_ur_\"   ) %>%   mutate(     n_sites = is_ur_TRUE + is_ur_FALSE,     ratio = is_ur_TRUE / n_sites,     ratio_type = ifelse(ur_rate == 0, \"fpr\", \"tpr\"),     ci95_low = prop.test(is_ur_TRUE, n_sites)$conf.int[1],     ci95_high = prop.test(is_ur_TRUE, n_sites)$conf.int[2]   )   df_perf_portf %>%   knitr::kable(digits = 3)"},{"path":[]},{"path":"https://openpharma.github.io/simaerep/articles/portfolio_perf.html","id":"performance-under-optimal-conditions","dir":"Articles","previous_headings":"Benchmark {simaerep} Using Portfolio Performance","what":"Performance Under Optimal Conditions","title":"(superseeded) simaerep Portfolio Performance","text":"True positive rates sites -reporting rate 1 surprisingly small. expect true positive ratios close 100%. reason within portfolio sites just starting reported AEs yet. also studies overall low AE rates example studies healthy participants. Altogether allows uncompliant sites hide among compliant sites makes difficult detect . Therefore also like demonstrate {simaerep} performance can expected ideal conditions. generate studies following parameters: 200 patients 20 sites one -reporting site 0.5 AEs per visit average 20 visits per patient SD 2 simulate 500 studies -reporting scenario. Next apply {simaerep} calculate confusion matrices. calculate tpr fpr. ideal conditions sites 0.5 -reporting rate almost get flagged ratio 0.97 minimal ratio false positive flags < 0.003.","code":"standard_sim <- function(ur_rate, seed) {   set.seed(seed)   df <- sim_test_data_study(     n_pat = 200,     n_sites = 20,     frac_site_with_ur = 0.05,     ur_rate = ur_rate,     ae_per_visit_mean = 0.5,     max_visit_mean = 20,     max_visit_sd = 2   )      if(ur_rate == 0) {     df$is_ur <- FALSE   }      return(df) }  df_data_grid <- tibble(     ur_rate = c(0, 0.1, 0.25, 0.5, 0.75, 1),     seed = list(seq(1, 500))   ) %>%  unnest(seed) %>%  mutate(    data = map2(ur_rate, seed, standard_sim)  )   df_data_grid ## # A tibble: 3,000 × 3 ##    ur_rate  seed data                 ##      <dbl> <int> <list>               ##  1       0     1 <tibble [3,891 × 8]> ##  2       0     2 <tibble [3,892 × 8]> ##  3       0     3 <tibble [3,891 × 8]> ##  4       0     4 <tibble [3,866 × 8]> ##  5       0     5 <tibble [3,899 × 8]> ##  6       0     6 <tibble [3,887 × 8]> ##  7       0     7 <tibble [3,927 × 8]> ##  8       0     8 <tibble [3,869 × 8]> ##  9       0     9 <tibble [3,884 × 8]> ## 10       0    10 <tibble [3,884 × 8]> ## # ℹ 2,990 more rows df_visit <- df_data_grid %>%   mutate(     study_id = paste0(       \"study-\",        str_pad(ur_rate, width= 3, side = \"left\", pad = \"0\"),       \"-\",       seed       )   ) %>%   unnest(data)  df_visit %>%   head(25) %>%   knitr::kable() df_site <- site_aggr(df_visit)  df_sim_sites <- sim_sites(df_site, df_visit)  df_eval <- eval_sites(df_sim_sites) df_perf <- df_visit %>%   select(ur_rate, study_id, site_number, is_ur) %>%   distinct() %>%   left_join(df_eval, by = c(\"study_id\", \"site_number\")) %>%   mutate(is_ur_detected = prob_low_prob_ur >= 0.95) %>%   group_by(ur_rate, is_ur, is_ur_detected) %>%   count()  readr::write_csv(df_perf, file = \"scen_st.csv\") remove(df_visit) # free up RAM df_perf <- readr::read_csv(file = \"scen_st.csv\")  df_perf %>%   knitr::kable() get_prop_test_ci95 <- function(..., ix) {      stopifnot(ix %in% c(1, 2))      tryCatch(     prop.test(...)$conf.int[ix],     error = function(cnd) c(NA, NA)[ix]   ) }  df_perf_st <- df_perf %>%   group_by(ur_rate) %>%   summarize(     N = sum(ifelse(! is_ur, n, 0)),     P = sum(ifelse(is_ur, n, 0)),     TP = sum(ifelse(is_ur & is_ur_detected, n, 0)),     FP = sum(ifelse(! is_ur & is_ur_detected, n, 0)),     TN = sum(ifelse(! is_ur & ! is_ur_detected, n, 0)),     FN = sum(ifelse(is_ur & ! is_ur_detected, n, 0))   ) %>%   mutate(     tpr = TP / P,     tpr_ci95_low = map2_dbl(TP, P, get_prop_test_ci95, ix = 1),     tpr_ci95_high = map2_dbl(TP, P, get_prop_test_ci95, ix = 2),     fpr = FP / N,     fpr_ci95_low = map2_dbl(FP, N, get_prop_test_ci95, ix = 1),     fpr_ci95_high = map2_dbl(FP, N, get_prop_test_ci95, ix = 2)   )  df_perf_st %>%   knitr::kable(digit = 4)"},{"path":"https://openpharma.github.io/simaerep/articles/portfolio_perf.html","id":"effect-of-adjusting-visit_med75","dir":"Articles","previous_headings":"Benchmark {simaerep} Using Portfolio Performance","what":"Effect of Adjusting visit_med75","title":"(superseeded) simaerep Portfolio Performance","text":"One latest update simaerep improvement visit_med75 calculation. can check affected portfolio performance. find likely slightly increased performance.","code":"df_scen_old_visit_med75 <- sim_ur_scenarios(    df_portf,    extra_ur_sites = 5,    ur_rate = c(0.1, 0.25, 0.5, 0.75, 1),    parallel = TRUE,    poisson = TRUE,    prob_lower = TRUE,    progress = TRUE,    site_aggr_args = list(method = \"med75\") # default is \"med75_adj\" )   readr::write_csv(df_scen_old_visit_med75, file = \"scen_old.csv\") df_scen_old_visit_med75 <- readr::read_csv(\"scen_old.csv\")  df_scen_old_visit_med75 %>%   head(25) %>%   knitr::kable() df_perf_portf_old_visit_med75 <- df_scen_old_visit_med75 %>%   mutate(is_ur = prob_low_prob_ur >= 0.95) %>%   group_by(ur_rate, is_ur) %>%   count() %>%   pivot_wider(     names_from = is_ur,     values_from = n,     names_prefix = \"is_ur_\"   ) %>%   mutate(     n_sites = is_ur_TRUE + is_ur_FALSE,     ratio = is_ur_TRUE / n_sites,     ratio_type = ifelse(ur_rate == 0, \"fpr\", \"tpr\"),     ci95_low = prop.test(is_ur_TRUE, n_sites)$conf.int[1],     ci95_high = prop.test(is_ur_TRUE, n_sites)$conf.int[2]   )   df_perf_portf_old_visit_med75 %>%   knitr::kable(digits = 3)"},{"path":"https://openpharma.github.io/simaerep/articles/portfolio_perf.html","id":"days-vs--visits","dir":"Articles","previous_headings":"Benchmark {simaerep} Using Portfolio Performance","what":"Days vs. Visits","title":"(superseeded) simaerep Portfolio Performance","text":"Instead normalising AEs per patient visit alternative normalise number days passed since patients enrollment. {simaerep} can used types normalisation demonstrated . normalising days bit complex creates data points. maximum number days per patient can several years, > 1000 days. simaerep exposes implicitly missing entries can lead single patients 1000 entries , one entry day study. order avoid generate huge portfolio data frame preserve memory wrapping sim_test_data_portfolio() sim_ur_scenarios() single call apply per study.","code":"wr <- function(df) {   df_portf <- sim_test_data_portfolio(df, parallel = FALSE, progress = FALSE)   df_scen <- sim_ur_scenarios(df_portf,                                extra_ur_sites = 5,                                ur_rate = c(0.1, 0.25, 0.5, 0.75, 1),                                parallel = FALSE,                                poisson = TRUE,                                prob_lower = TRUE,                                progress = FALSE)   return(df_scen) }  df_prep <- df_config %>%   select(- max_visit_sd, - max_visit_mean, - ae_per_visit_mean) %>%   rename(max_visit_sd = max_days_sd,          max_visit_mean = max_days_mean,          ae_per_visit_mean = ae_per_day_mean) %>%   group_by(study_id_gr = study_id) %>%   nest() %>%   ungroup()   progressr::with_progress(   df_scen_days <- df_prep %>%     mutate(data = purrr_bar(       .data$data,       .purrr = furrr::future_map,       .f = wr,       .progress = TRUE,       .steps = nrow(.),       .purrr_args = list(.options = furrr_options(seed = TRUE))       )    ) )  df_scen_days <- df_scen_days %>%   unnest(data) %>%   select(- study_id_gr)  readr::write_csv(df_scen_days, file = \"scen_days.csv\") df_scen_days <- readr::read_csv(\"scen_days.csv\")  df_scen_days %>%   head(25) %>%   knitr::kable() df_perf_portf_days <- df_scen_days %>%   mutate(is_ur = prob_low_prob_ur >= 0.95) %>%   group_by(ur_rate, is_ur) %>%   count() %>%   pivot_wider(     names_from = is_ur,     values_from = n,     names_prefix = \"is_ur_\"   ) %>%   mutate(     n_sites = is_ur_TRUE + is_ur_FALSE,     ratio = is_ur_TRUE / n_sites,     ratio_type = ifelse(ur_rate == 0, \"fpr\", \"tpr\"),     ci95_low = prop.test(is_ur_TRUE, n_sites)$conf.int[1],     ci95_high = prop.test(is_ur_TRUE, n_sites)$conf.int[2]   )   df_perf_portf_days %>%   knitr::kable(digits = 3)"},{"path":"https://openpharma.github.io/simaerep/articles/portfolio_perf.html","id":"heuristic-rank","dir":"Articles","previous_headings":"Benchmark {simaerep} Using Portfolio Performance","what":"Heuristic Rank","title":"(superseeded) simaerep Portfolio Performance","text":"Instead using {simaerep} can also use heuristic method based AE per visit apply simulated portfolio different scenarios -reporting Flag 5% (always round ) sites study lowest AE per visit rate. Always flag sites AEs. write function : - determines many sites flagged study - pools ae_per_visit rates ranks sites (using dense_rank()) - site gets flagged specific rank site within number sites get flagged Next wrap function another function simulates -reporting apply. see method generously flagging sites resulting good tpr cost high fpr. default least one site per study gets flagged.","code":"df_ae_per_vs <-df_portf %>%   group_by(study_id, site_number, patnum) %>%   filter(visit == max(visit)) %>%   group_by(study_id, site_number) %>%   summarise(visit = sum(visit),             n_ae = sum(n_ae),             .groups = \"drop\") %>%   mutate(ae_per_visit = n_ae / visit) %>%   group_by(study_id) %>%   mutate(     ls_study_ae_per_visit = list(ae_per_visit),     rwn = row_number(),     # we take out site ae_per_visit from study pool     ls_study_ae_per_visit = map2(         ls_study_ae_per_visit, rwn,         function(ls, rwn) ls[- rwn]       )   ) %>%   select(- rwn) %>%   ungroup()  df_ae_per_vs ## # A tibble: 15,674 × 6 ##    study_id site_number visit  n_ae ae_per_visit ls_study_ae_per_visit ##    <chr>    <chr>       <int> <int>        <dbl> <list>                ##  1 0001     0001           44    13        0.295 <dbl [43]>            ##  2 0001     0002           53    15        0.283 <dbl [43]>            ##  3 0001     0003           74    19        0.257 <dbl [43]>            ##  4 0001     0004          215    57        0.265 <dbl [43]>            ##  5 0001     0005           30     9        0.3   <dbl [43]>            ##  6 0001     0006           35    11        0.314 <dbl [43]>            ##  7 0001     0007           36    14        0.389 <dbl [43]>            ##  8 0001     0008          172    37        0.215 <dbl [43]>            ##  9 0001     0009           40    19        0.475 <dbl [43]>            ## 10 0001     0010          137    32        0.234 <dbl [43]>            ## # ℹ 15,664 more rows flag_heuristics_rnk <- function(ae_per_visit, ls_study_ae_per_visit) {      n_flags <- ceiling(length(ls_study_ae_per_visit + 1) * 0.05)    rnk <- tibble(ae_per_visit = ae_per_visit, site = \"site\") %>%     bind_rows(       tibble(ae_per_visit = ls_study_ae_per_visit, site = \"other\")     ) %>%     # using dense_rank will assign rank 1 to all sites with lowest rate     # this is important as there can be many sites with a zero ratio     # occasionally this will flag more sites than anticipated     arrange(ae_per_visit, site) %>%     mutate(rnk = dense_rank(ae_per_visit)) %>%     filter(site == \"site\") %>%     pull(rnk)      return(rnk <= n_flags) }  flag_heuristics_rnk(   df_ae_per_vs$ae_per_visit[[1]],   df_ae_per_vs$ls_study_ae_per_visit[[1]] ) ## [1] FALSE sim_heuristic_ur <- function(ae_per_visit,                              ls_study_ae_per_visit,                              ur_rates,                              .f = flag_heuristics_rnk) {   tibble(     ur_rate = ur_rates,     ae_per_visit = ae_per_visit   ) %>%   mutate(     ae_per_visit = ae_per_visit * (1 - ur_rate),     is_ur = map_lgl(ae_per_visit, .f, ls_study_ae_per_visit)   ) }  sim_heuristic_ur(   df_ae_per_vs$ae_per_visit[[1]],   df_ae_per_vs$ls_study_ae_per_visit[[1]],   ur_rates = c(0, 0.1, 0.25, 0.5, 0.75, 1) ) ## # A tibble: 6 × 3 ##   ur_rate ae_per_visit is_ur ##     <dbl>        <dbl> <lgl> ## 1    0          0.295  FALSE ## 2    0.1        0.266  FALSE ## 3    0.25       0.222  FALSE ## 4    0.5        0.148  TRUE  ## 5    0.75       0.0739 TRUE  ## 6    1          0      TRUE progressr::with_progress(   df_perf_heuristic_rnk <- df_ae_per_vs %>%     mutate(       sim = simaerep::purrr_bar(         ae_per_visit, ls_study_ae_per_visit,         .purrr = furrr::future_map2,         .f = sim_heuristic_ur,         .f_args = list(ur_rates = c(0, 0.1, 0.25, 0.5, 0.75, 1)),         .steps = nrow(.)       )     ) )  df_perf_heuristic_rnk <- df_perf_heuristic_rnk %>%   select(sim) %>%   unnest(sim) %>%   group_by(ur_rate) %>%   summarise(     is_ur = sum(is_ur),     n_sites = n(),     .groups = \"drop\"   ) %>%   mutate(     ratio = is_ur / n_sites,     ratio_type = ifelse(ur_rate == 0, \"fpr\", \"tpr\"),     ci95_low = map2_dbl(is_ur, n_sites, get_prop_test_ci95, ix = 1),     ci95_high = map2_dbl(is_ur, n_sites, get_prop_test_ci95, ix = 2),   )  readr::write_csv(df_perf_heuristic_rnk, file = \"heuristic_rnk.csv\") df_perf_heuristic_rnk <- readr::read_csv(file = \"heuristic_rnk.csv\")  df_perf_heuristic_rnk %>%   knitr::kable(digits = 3)"},{"path":"https://openpharma.github.io/simaerep/articles/portfolio_perf.html","id":"heuristic-box-plot-outlier","dir":"Articles","previous_headings":"Benchmark {simaerep} Using Portfolio Performance","what":"Heuristic Box Plot Outlier","title":"(superseeded) simaerep Portfolio Performance","text":"can also imagine heuristic tries detect lower boundary outliers basis ae per visit rate. flagging conservatively without flagging sites default. simple non-parametric method outlier detection calculate box plot statistic flag points lower whisker boundary. apply.","code":"flag_heuristics_box <- function(ae_per_visit, ls_study_ae_per_visit) {      min_whisker <- min(boxplot.stats(c(ae_per_visit, ls_study_ae_per_visit))$stats)   return(ae_per_visit < min_whisker)    }  flag_heuristics_box(   df_ae_per_vs$ae_per_visit[[1]],   df_ae_per_vs$ls_study_ae_per_visit[[1]] ) ## [1] FALSE flag_heuristics_box(   0,   df_ae_per_vs$ls_study_ae_per_visit[[1]] ) ## [1] TRUE progressr::with_progress(   df_perf_heuristic_box <- df_ae_per_vs %>%     mutate(       sim = simaerep::purrr_bar(         ae_per_visit, ls_study_ae_per_visit,         .purrr = furrr::future_map2,         .f = sim_heuristic_ur,         .f_args = list(           ur_rates = c(0, 0.1, 0.25, 0.5, 0.75, 1),           .f = flag_heuristics_box           ),         .steps = nrow(.)       )     ) )  df_perf_heuristic_box <- df_perf_heuristic_box %>%   select(sim) %>%   unnest(sim) %>%   group_by(ur_rate) %>%   summarise(     is_ur = sum(is_ur),     n_sites = n(),     .groups = \"drop\"   ) %>%   mutate(     ratio = is_ur / n_sites,     ratio_type = ifelse(ur_rate == 0, \"fpr\", \"tpr\"),     ci95_low = map2_dbl(is_ur, n_sites, get_prop_test_ci95, ix = 1),     ci95_high = map2_dbl(is_ur, n_sites, get_prop_test_ci95, ix = 2),   )  readr::write_csv(df_perf_heuristic_box, file = \"heuristic_box.csv\") df_perf_heuristic_box <- readr::read_csv(file = \"heuristic_box.csv\")  df_perf_heuristic_box %>%   knitr::kable(digits = 3)"},{"path":"https://openpharma.github.io/simaerep/articles/portfolio_perf.html","id":"plot-performance-metrics","dir":"Articles","previous_headings":"","what":"Plot Performance Metrics","title":"(superseeded) simaerep Portfolio Performance","text":"{simaerep} reduces false positive rate compared heuristics. Rank-based heuristics higher true positive rates cost higher false positive rates. Similar effects achieved lowering {simaerep} flagging threshold Using AE per visits AE per patient days better performance. Adjusting visit_med75 also improved performance {simaerep} results closest boxplot outlier heuristic better overall performance optimal conditions {simaerep} catches almost -reporting sites -reporting rate greater 0.5","code":"prep_for_plot <- function(df, type) {   df %>%     mutate(ur_rate = paste0(\"under-reporting rate: \",  ur_rate, \" - \", ratio_type),            ur_rate = ifelse(str_detect(ur_rate, \"fpr\"), \"fpr\", ur_rate)) %>%     select(ur_rate, ratio_type, ratio, ci95_low, ci95_high) %>%     mutate(type = type) }  df_perf <- df_perf_st %>%   filter(ur_rate == 0) %>%   mutate(ratio_type = \"fpr\") %>%   select(ur_rate, ratio_type, ratio = fpr, ci95_low = fpr_ci95_low, ci95_high = fpr_ci95_high) %>%   bind_rows(     df_perf_st %>%       filter(ur_rate > 0) %>%       mutate(ratio_type = \"tpr\") %>%       select(ur_rate, ratio_type, ratio = tpr, ci95_low = tpr_ci95_low, ci95_high = tpr_ci95_high)   ) %>%   prep_for_plot(type = \"{simaerep} optimal study conditions\") %>%   bind_rows(     prep_for_plot(df_perf_portf, type = \"{simaerep} default\"),     prep_for_plot(df_perf_portf_days, type = \"{simaerep} AE per days on study\"),     prep_for_plot(df_perf_portf_old_visit_med75, type = \"{simaerep} unadjusted visit-med75\"),     prep_for_plot(df_perf_heuristic_rnk, type = \"heuristic - rank\"),     prep_for_plot(df_perf_heuristic_box, type = \"heuristic - boxplot outlier\"),   ) %>%   mutate(     type = fct_relevel(type, c(       \"heuristic - boxplot outlier\",       \"heuristic - rank\",       \"{simaerep} default\",       \"{simaerep} optimal study conditions\"       )     )   )   df_perf %>%   mutate(color = ifelse(type == \"{simaerep} default\", \"violetred2\", \"darkgrey\"),          ref = ifelse(type == \"{simaerep} default\", ratio, 0)) %>%   group_by(ur_rate) %>%   mutate(ref = max(ref)) %>%   ggplot(aes(type, ratio)) +     geom_hline(aes(yintercept = ref),                linetype = 2,                color = \"violetred2\") +     geom_errorbar(aes(ymin = ci95_low, ymax = ci95_high, color = color)) +     facet_wrap(~ ur_rate, ncol = 1) +     scale_colour_identity() +     coord_flip() +     labs(       x = \"\",       y = \"CI95 Performance Ratio\",        title = \"{simaerep} Performance\",       subtitle = \"Only one under-reporting site per study.\\nCut-Off Under-Reporting Probability: 0.95\"     ) df_perf %>%   arrange(ur_rate, desc(type)) %>%   select(ur_rate, type, ratio, ci95_low, ci95_high) %>%   knitr::kable(digits = 3) plan(sequential)"},{"path":"https://openpharma.github.io/simaerep/articles/sas_files.html","id":"load","dir":"Articles","previous_headings":"","what":"Load","title":"SAS Files as a Data Source","text":"","code":"suppressPackageStartupMessages(library(tidyverse)) suppressPackageStartupMessages(library(knitr)) suppressPackageStartupMessages(library(simaerep)) suppressPackageStartupMessages(library(haven))"},{"path":"https://openpharma.github.io/simaerep/articles/sas_files.html","id":"sas-files","dir":"Articles","previous_headings":"","what":"SAS files","title":"SAS Files as a Data Source","text":"Typically clinical data stored several SAS files standardized format. need files visits AEs recorded. demo selected anonymized data set contains patients enrolled control arm. data sets AE onset dates visit dates replaced number days passed since specific cut-date. can proceed similar way order assign AE visit union event tables sort date. patient example AE first visit AEs NA date aggregate visit number. patient example . control check whether numbers visits AEs processed data still matches number AEs original data.","code":"df_ae <- haven::read_sas('adae.sas7bdat') %>%   select(STUDYID, SUBJID, SITEID, AESTDY)   df_ae ## # A tibble: 4,702 × 4 ##    STUDYID    SUBJID   SITEID AESTDY ##    <chr>      <chr>    <chr>   <dbl> ##  1 CO-101-001 01001001 001       -14 ##  2 CO-101-001 01001001 001       -13 ##  3 CO-101-001 01001001 001        50 ##  4 CO-101-001 01001001 001        67 ##  5 CO-101-001 01001001 001        77 ##  6 CO-101-001 01001001 001        84 ##  7 CO-101-001 01001001 001        99 ##  8 CO-101-001 01001001 001        99 ##  9 CO-101-001 01001001 001       127 ## 10 CO-101-001 01001001 001       127 ## # ℹ 4,692 more rows df_vs <- haven::read_sas('advs.sas7bdat') %>%   select(STUDYID, SUBJID, SITEID, ADY)   df_vs ## # A tibble: 45,176 × 4 ##    STUDYID    SUBJID   SITEID   ADY ##    <chr>      <chr>    <chr>  <dbl> ##  1 CO-101-001 01001001 001       -7 ##  2 CO-101-001 01001001 001        1 ##  3 CO-101-001 01001001 001        1 ##  4 CO-101-001 01001001 001        8 ##  5 CO-101-001 01001001 001        8 ##  6 CO-101-001 01001001 001       15 ##  7 CO-101-001 01001001 001       15 ##  8 CO-101-001 01001001 001       29 ##  9 CO-101-001 01001001 001       29 ## 10 CO-101-001 01001001 001       38 ## # ℹ 45,166 more rows df_ae <- df_ae %>%   rename(DY = AESTDY) %>%   mutate(EVENT = \"AE\")  df_vs <- df_vs %>%   rename(DY = ADY) %>%   mutate(EVENT = \"VS\") %>%   # we ignore visits that have no date   filter(! is.na(DY)) %>%   # we are not interested in same day visits   distinct()  df_aevs <- bind_rows(df_ae, df_vs) %>%   # NA's get sorted towards the end thus AEs with no date get sorted towards last visit   arrange(STUDYID, SITEID, SUBJID, DY) %>%   group_by(STUDYID, SITEID, SUBJID) %>%   mutate(AE_NO = cumsum(ifelse(EVENT == \"AE\", 1, 0)),          VS_NO = cumsum(ifelse(EVENT == \"VS\", 1, 0))) %>%   # we remove patients with 0 visits   filter(max(VS_NO) > 0) %>%   # AE's before fist visit should register to visit 1 not zero   mutate(VS_NO = ifelse(VS_NO == 0, 1, VS_NO)) df_aevs %>%   filter(SUBJID == \"01007004\") %>%   knitr::kable() df_aevs_aggr <- df_aevs %>%   group_by(STUDYID, SITEID, SUBJID, VS_NO) %>%   summarise(MIN_AE_NO = min(AE_NO),             MAX_AE_NO = max(AE_NO),             .groups = \"drop\") %>%   group_by(STUDYID, SITEID, SUBJID) %>%   mutate(MAX_VS_PAT = max(VS_NO)) %>%   ungroup() %>%   # assign AEs that occur after last visit to last AE   mutate(     CUM_AE = ifelse(       VS_NO == MAX_VS_PAT,       MAX_AE_NO,       MIN_AE_NO)     ) df_aevs_aggr  %>%   filter(SUBJID == \"01007004\") %>%   knitr::kable() stopifnot(nrow(df_aevs_aggr) == nrow(df_vs))  n_aes <- df_aevs_aggr %>%   group_by(SUBJID) %>%   summarize(n_aes = max(CUM_AE)) %>%   pull(n_aes) %>%   sum()  n_aes_original <- df_ae %>%   # all AEs for patients with more than 1 visit   filter(SUBJID %in% df_aevs$SUBJID) %>%   nrow()  stopifnot(n_aes == n_aes_original)"},{"path":"https://openpharma.github.io/simaerep/articles/sas_files.html","id":"simaerep","dir":"Articles","previous_headings":"","what":"{simaerep}","title":"SAS Files as a Data Source","text":"renaming columns can pass aggregated data SAS files simaerep  Left panel shows mean AE reporting per site (lightblue darkblue lines) mean AE reporting entire study (golden line). Single sites plotted descending order AE -reporting probability right panel grey lines denote cumulative AE count single patients. Grey dots left panel plot indicate sites picked single plotting. AE -reporting probability dark blue lines crossed threshold 95%. Numbers upper left corner indicate ratio patients used analysis total number patients. Patients study long enough reach evaluation point (visit_med75, see introduction) ignored.","code":"df_visit <- df_aevs_aggr %>%   rename(     study_id = \"STUDYID\",     site_number = \"SITEID\",     patnum = \"SUBJID\",     n_ae = \"CUM_AE\",     visit = \"VS_NO\"   )  %>%   select(study_id, site_number, patnum, n_ae, visit)  df_visit ## # A tibble: 5,432 × 5 ##    study_id   site_number patnum    n_ae visit ##    <chr>      <chr>       <chr>    <dbl> <dbl> ##  1 CO-101-001 001         01001001     1     1 ##  2 CO-101-001 001         01001001     2     2 ##  3 CO-101-001 001         01001001     2     3 ##  4 CO-101-001 001         01001001     2     4 ##  5 CO-101-001 001         01001001     2     5 ##  6 CO-101-001 001         01001001     2     6 ##  7 CO-101-001 001         01001001     2     7 ##  8 CO-101-001 001         01001001     3     8 ##  9 CO-101-001 001         01001001     3     9 ## 10 CO-101-001 001         01001001     6    10 ## # ℹ 5,422 more rows aerep <- simaerep(df_visit)  plot(aerep)"},{"path":"https://openpharma.github.io/simaerep/articles/usability_limits.html","id":"load","dir":"Articles","previous_headings":"","what":"Load","title":"Address Usability Limits of Bootstrap Method","text":"","code":"suppressPackageStartupMessages(library(tidyverse)) suppressPackageStartupMessages(library(knitr)) suppressPackageStartupMessages(library(furrr)) suppressPackageStartupMessages(library(future)) suppressPackageStartupMessages(library(simaerep))"},{"path":"https://openpharma.github.io/simaerep/articles/usability_limits.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Address Usability Limits of Bootstrap Method","text":"already mentioned introduction bootstrap resampling comes price. need good proportion sites compliant -reporting AEs. Otherwise patient pool draw tainted. Also, general count data, negative deviations overall small integer values (3 less) hard detect. assess usability limits bootstrap resampling method applying different simulated scenarios.","code":""},{"path":"https://openpharma.github.io/simaerep/articles/usability_limits.html","id":"parameter-grid","dir":"Articles","previous_headings":"","what":"Parameter Grid","title":"Address Usability Limits of Bootstrap Method","text":"start defining parameter grid. Fixed Parameters: - n_pat: 1000 - n_sites: 100 - max_visit_mean: 20 - max_visit_sd: 4 Variable Parameters: - ae_visit: 0.05 - 2 - frac_sites_wit_ur: 0.05 - 0.75 - ur_rate: 0.05 - 1","code":"set.seed(1)  df_grid <- tibble( ae_per_visit_mean = seq(0.05, 2, length.out = 10)) %>%   mutate(frac_site_with_ur = list(seq(0.05, 0.75, length.out = 10))) %>%   unnest(frac_site_with_ur) %>%   mutate(ur_rate = list(seq(0.05, 1, length.out = 10)) ) %>%   unnest(ur_rate)   df_grid ## # A tibble: 1,000 × 3 ##    ae_per_visit_mean frac_site_with_ur ur_rate ##                <dbl>             <dbl>   <dbl> ##  1              0.05              0.05   0.05  ##  2              0.05              0.05   0.156 ##  3              0.05              0.05   0.261 ##  4              0.05              0.05   0.367 ##  5              0.05              0.05   0.472 ##  6              0.05              0.05   0.578 ##  7              0.05              0.05   0.683 ##  8              0.05              0.05   0.789 ##  9              0.05              0.05   0.894 ## 10              0.05              0.05   1     ## # … with 990 more rows"},{"path":"https://openpharma.github.io/simaerep/articles/usability_limits.html","id":"apply","dir":"Articles","previous_headings":"","what":"Apply","title":"Address Usability Limits of Bootstrap Method","text":"use furrr future package multiprocessing. proceed applying functions already introduced.","code":"suppressWarnings(future::plan(multiprocess))"},{"path":"https://openpharma.github.io/simaerep/articles/usability_limits.html","id":"simulate-test-data","dir":"Articles","previous_headings":"Apply","what":"Simulate Test Data","title":"Address Usability Limits of Bootstrap Method","text":"iteratively apply sim_test_data_study() different parameter combination grid","code":"df_grid <- df_grid %>%   mutate(      df_visit = furrr::future_pmap(       list(am = ae_per_visit_mean,            fr = frac_site_with_ur,            ur = ur_rate),       function(am, fr, ur) sim_test_data_study(n_pat = 1000,                                                n_sites = 100,                                                max_visit_mean = 20,                                                max_visit_sd = 4,                                                ae_per_visit_mean = am,                                                frac_site_with_ur = fr,                                                ur_rate = ur),       .progress = FALSE,       .options = furrr_options(seed = TRUE)     )   )  df_grid ## # A tibble: 1,000 × 4 ##    ae_per_visit_mean frac_site_with_ur ur_rate df_visit              ##                <dbl>             <dbl>   <dbl> <list>                ##  1              0.05              0.05   0.05  <tibble [19,459 × 8]> ##  2              0.05              0.05   0.156 <tibble [19,631 × 8]> ##  3              0.05              0.05   0.261 <tibble [19,234 × 8]> ##  4              0.05              0.05   0.367 <tibble [19,523 × 8]> ##  5              0.05              0.05   0.472 <tibble [19,518 × 8]> ##  6              0.05              0.05   0.578 <tibble [19,545 × 8]> ##  7              0.05              0.05   0.683 <tibble [19,503 × 8]> ##  8              0.05              0.05   0.789 <tibble [19,351 × 8]> ##  9              0.05              0.05   0.894 <tibble [19,473 × 8]> ## 10              0.05              0.05   1     <tibble [19,489 × 8]> ## # … with 990 more rows"},{"path":"https://openpharma.github.io/simaerep/articles/usability_limits.html","id":"aggregate-test-data","dir":"Articles","previous_headings":"Apply","what":"Aggregate Test Data","title":"Address Usability Limits of Bootstrap Method","text":"apply site_aggr() different simulated data sets.","code":"df_grid <- df_grid %>%   mutate(      df_visit = map2(df_visit, row_number(),                     function(x,y) mutate(x, study_id = paste(\"S\", y))),     df_site = furrr::future_map(df_visit,                                 site_aggr,                                 .progress = FALSE,                                 .options = furrr_options(seed = TRUE)                                 )   )  df_grid ## # A tibble: 1,000 × 5 ##    ae_per_visit_mean frac_site_with_ur ur_rate df_visit              df_site  ##                <dbl>             <dbl>   <dbl> <list>                <list>   ##  1              0.05              0.05   0.05  <tibble [19,459 × 9]> <tibble> ##  2              0.05              0.05   0.156 <tibble [19,631 × 9]> <tibble> ##  3              0.05              0.05   0.261 <tibble [19,234 × 9]> <tibble> ##  4              0.05              0.05   0.367 <tibble [19,523 × 9]> <tibble> ##  5              0.05              0.05   0.472 <tibble [19,518 × 9]> <tibble> ##  6              0.05              0.05   0.578 <tibble [19,545 × 9]> <tibble> ##  7              0.05              0.05   0.683 <tibble [19,503 × 9]> <tibble> ##  8              0.05              0.05   0.789 <tibble [19,351 × 9]> <tibble> ##  9              0.05              0.05   0.894 <tibble [19,473 × 9]> <tibble> ## 10              0.05              0.05   1     <tibble [19,489 × 9]> <tibble> ## # … with 990 more rows"},{"path":"https://openpharma.github.io/simaerep/articles/usability_limits.html","id":"simulate-sites","dir":"Articles","previous_headings":"Apply","what":"Simulate Sites","title":"Address Usability Limits of Bootstrap Method","text":"apply sim_sites() calculate AE -reporting probability.","code":"df_grid <- df_grid %>%   mutate( df_sim_sites = furrr::future_map2(df_site, df_visit,                                             sim_sites,                                             r = 1000,                                             poisson_test = TRUE,                                             prob_lower = TRUE,                                             .progress = FALSE,                                             .options = furrr_options(seed = TRUE)                                             )   )  df_grid ## # A tibble: 1,000 × 6 ##    ae_per_visit_mean frac_site_with_ur ur_rate df_visit df_site  df_sim_sites ##                <dbl>             <dbl>   <dbl> <list>   <list>   <list>       ##  1              0.05              0.05   0.05  <tibble> <tibble> <tibble>     ##  2              0.05              0.05   0.156 <tibble> <tibble> <tibble>     ##  3              0.05              0.05   0.261 <tibble> <tibble> <tibble>     ##  4              0.05              0.05   0.367 <tibble> <tibble> <tibble>     ##  5              0.05              0.05   0.472 <tibble> <tibble> <tibble>     ##  6              0.05              0.05   0.578 <tibble> <tibble> <tibble>     ##  7              0.05              0.05   0.683 <tibble> <tibble> <tibble>     ##  8              0.05              0.05   0.789 <tibble> <tibble> <tibble>     ##  9              0.05              0.05   0.894 <tibble> <tibble> <tibble>     ## 10              0.05              0.05   1     <tibble> <tibble> <tibble>     ## # … with 990 more rows"},{"path":"https://openpharma.github.io/simaerep/articles/usability_limits.html","id":"evaluate-sites","dir":"Articles","previous_headings":"Apply","what":"Evaluate Sites","title":"Address Usability Limits of Bootstrap Method","text":"apply eval_sites() balance bootstrapped probabilities expected number false positives.","code":"df_grid <- df_grid %>%   mutate( df_eval = furrr::future_map(df_sim_sites,                                       eval_sites,                                       .progress = FALSE,                                       .options = furrr_options(seed = TRUE)                                       )   )  df_grid ## # A tibble: 1,000 × 7 ##    ae_per_visit_mean frac_site_with_ur ur_rate df_visit df_site  df_sim_sites ##                <dbl>             <dbl>   <dbl> <list>   <list>   <list>       ##  1              0.05              0.05   0.05  <tibble> <tibble> <tibble>     ##  2              0.05              0.05   0.156 <tibble> <tibble> <tibble>     ##  3              0.05              0.05   0.261 <tibble> <tibble> <tibble>     ##  4              0.05              0.05   0.367 <tibble> <tibble> <tibble>     ##  5              0.05              0.05   0.472 <tibble> <tibble> <tibble>     ##  6              0.05              0.05   0.578 <tibble> <tibble> <tibble>     ##  7              0.05              0.05   0.683 <tibble> <tibble> <tibble>     ##  8              0.05              0.05   0.789 <tibble> <tibble> <tibble>     ##  9              0.05              0.05   0.894 <tibble> <tibble> <tibble>     ## 10              0.05              0.05   1     <tibble> <tibble> <tibble>     ## # … with 990 more rows, and 1 more variable: df_eval <list>"},{"path":"https://openpharma.github.io/simaerep/articles/usability_limits.html","id":"get-metrics","dir":"Articles","previous_headings":"Apply","what":"Get Metrics","title":"Address Usability Limits of Bootstrap Method","text":"Apart calculating true false positives rate final -reporting probability also calculate metrics couple benchmark probabilities. p-values returned poisson.test() probabilities p-values adjusting expected false positives cases use 95% probability threshold.","code":"get_metrics <- function(df_visit, df_eval, method) {      if (method == \"ptest\") {     prob_ur_adj = \"pval_prob_ur\"     prob_ur_unadj = \"pval\"   } else {     prob_ur_adj = \"prob_low_prob_ur\"     prob_ur_unadj = \"prob_low\"   }      df_ur <- df_visit %>%     select(site_number, is_ur) %>%     distinct()    df_metric_prep <- df_eval %>%     left_join(df_ur, \"site_number\") %>%     rename( prob_ur_adj = !! as.name(prob_ur_adj),             prob_ur_unadj = !! as.name(prob_ur_unadj) )      df_metric_adjusted <- df_metric_prep %>%     select(study_id, site_number, is_ur, prob_ur_adj) %>%     mutate( tp = ifelse(is_ur & prob_ur_adj >= 0.95, 1, 0),             fn = ifelse(is_ur & prob_ur_adj < 0.95, 1, 0),             tn = ifelse((! is_ur) & prob_ur_adj < 0.95, 1, 0),             fp = ifelse((! is_ur) & prob_ur_adj >= 0.95, 1, 0),             p = ifelse(prob_ur_adj >= 0.95, 1, 0),             n = ifelse(prob_ur_adj < 0.95, 1, 0),             P = ifelse(is_ur, 1, 0),             N = ifelse(! is_ur, 1, 0)     ) %>%     group_by(study_id) %>%     select(-site_number, - is_ur, - prob_ur_adj) %>%     summarize_all(sum) %>%     mutate(prob_type = \"adjusted\")      df_metric_unadjusted <- df_metric_prep %>%     select(study_id, site_number, is_ur, prob_ur_unadj) %>%     mutate( tp = ifelse(is_ur & prob_ur_unadj <= 0.05, 1, 0),             fn = ifelse(is_ur & prob_ur_unadj > 0.05, 1, 0),             tn = ifelse((! is_ur) & prob_ur_unadj > 0.05, 1, 0),             fp = ifelse((! is_ur) & prob_ur_unadj <= 0.05, 1, 0),             p = ifelse(prob_ur_unadj <= 0.05, 1, 0),             n = ifelse(prob_ur_unadj > 0.05, 1, 0),             P = ifelse(is_ur, 1, 0),             N = ifelse(! is_ur, 1, 0)     ) %>%     group_by(study_id) %>%     select(-site_number, - is_ur, - prob_ur_unadj) %>%     summarize_all(sum) %>%     mutate(prob_type = \"unadjusted\")      df_metric <- bind_rows(df_metric_adjusted, df_metric_unadjusted) %>%     mutate(method = method) }  df_grid <- df_grid %>%   mutate(df_metric_pval = furrr::future_map2(df_visit, df_eval,                                               get_metrics,                                               method = \"ptest\"),          df_metric_prob_low = furrr::future_map2(df_visit, df_eval,                                                 get_metrics,                                                 method = \"bootstrap\"),          df_metric = map2(df_metric_pval, df_metric_prob_low, bind_rows)          )  df_grid ## # A tibble: 1,000 × 10 ##    ae_per_visit_mean frac_site_with_ur ur_rate df_visit df_site  df_sim_sites ##                <dbl>             <dbl>   <dbl> <list>   <list>   <list>       ##  1              0.05              0.05   0.05  <tibble> <tibble> <tibble>     ##  2              0.05              0.05   0.156 <tibble> <tibble> <tibble>     ##  3              0.05              0.05   0.261 <tibble> <tibble> <tibble>     ##  4              0.05              0.05   0.367 <tibble> <tibble> <tibble>     ##  5              0.05              0.05   0.472 <tibble> <tibble> <tibble>     ##  6              0.05              0.05   0.578 <tibble> <tibble> <tibble>     ##  7              0.05              0.05   0.683 <tibble> <tibble> <tibble>     ##  8              0.05              0.05   0.789 <tibble> <tibble> <tibble>     ##  9              0.05              0.05   0.894 <tibble> <tibble> <tibble>     ## 10              0.05              0.05   1     <tibble> <tibble> <tibble>     ## # … with 990 more rows, and 4 more variables: df_eval <list>, ## #   df_metric_pval <list>, df_metric_prob_low <list>, df_metric <list>"},{"path":"https://openpharma.github.io/simaerep/articles/usability_limits.html","id":"plot","dir":"Articles","previous_headings":"","what":"Plot","title":"Address Usability Limits of Bootstrap Method","text":"","code":"df_plot <- df_grid %>%   select(ae_per_visit_mean, frac_site_with_ur, ur_rate, df_metric) %>%   unnest(df_metric)  df_plot ## # A tibble: 4,000 × 14 ##    ae_per_visit_mean frac_site_with_ur ur_rate study_id    tp    fn    tn    fp ##                <dbl>             <dbl>   <dbl> <chr>    <dbl> <dbl> <dbl> <dbl> ##  1              0.05              0.05   0.05  S 1          0     5    95     0 ##  2              0.05              0.05   0.05  S 1          0     5    94     1 ##  3              0.05              0.05   0.05  S 1          0     5    95     0 ##  4              0.05              0.05   0.05  S 1          0     5    94     1 ##  5              0.05              0.05   0.156 S 2          0     5    95     0 ##  6              0.05              0.05   0.156 S 2          0     5    95     0 ##  7              0.05              0.05   0.156 S 2          0     5    95     0 ##  8              0.05              0.05   0.156 S 2          0     5    92     3 ##  9              0.05              0.05   0.261 S 3          0     5    95     0 ## 10              0.05              0.05   0.261 S 3          0     5    95     0 ## # … with 3,990 more rows, and 6 more variables: p <dbl>, n <dbl>, P <dbl>, ## #   N <dbl>, prob_type <chr>, method <chr>"},{"path":"https://openpharma.github.io/simaerep/articles/usability_limits.html","id":"true-positive-rate---p---tpp","dir":"Articles","previous_headings":"","what":"True positive rate - P - TP/P","title":"Address Usability Limits of Bootstrap Method","text":"comparing bootstrap method poisson.test benchmark test, find perform mostly similar 0.05 - 0.3 ratio -reporting sites. performance still acceptable 0.3 - 0.5 ratio becomes pretty useless. expected detection -reporting sites close impossible ae/visit ratio low (0.05) detection rates close zero tested scenarios.","code":"p <- df_plot %>%   mutate( tp_P_ratio = tp/P) %>%   select(ae_per_visit_mean, frac_site_with_ur, ur_rate, tp_P_ratio, method, prob_type) %>%   mutate_if(is.numeric, round, 3) %>%   mutate(metric = case_when(method == \"ptest\" & prob_type == \"unadjusted\" ~ \"ptest unadjusted\",                            method == \"ptest\" & prob_type == \"adjusted\" ~ \"ptest adjusted\",                            method == \"bootstrap\" & prob_type == \"unadjusted\" ~ \"bootstrap unadjusted\",                            method == \"bootstrap\" & prob_type == \"adjusted\" ~ \"bootstrap adjusted\"),          metric = fct_relevel(metric, c(\"ptest unadjusted\", \"ptest adjusted\",                                         \"bootstrap unadjusted\", \"bootstrap adjusted\"))) %>%   ggplot(aes(ae_per_visit_mean, tp_P_ratio, color = metric)) +     geom_line(aes(linetype = prob_type), size = 0.5, alpha = 0.5) +     facet_grid( frac_site_with_ur ~ ur_rate) +     scale_color_manual(values = c(\"dodgerblue3\", \"skyblue1\", \"sienna4\", \"peru\")) +     theme(panel.grid = element_blank(), legend.position = \"bottom\",           axis.text.x = element_text(angle = 90, vjust = 0.5)) +      labs(title = \"AE Under Reporting Rate ~ Rate of AE Under-Reporting Sites\",          y = \"True positive rate - tp/P\",          x = \"AEs per Visit\") p"},{"path":"https://openpharma.github.io/simaerep/articles/usability_limits.html","id":"false-positive-rate-fpn","dir":"Articles","previous_headings":"","what":"False positive rate FP/N","title":"Address Usability Limits of Bootstrap Method","text":"can show adjusting AE -reporting probability expected number false positives quite effective.false positive rate almost zero tested scenarios. However, also comes cost lowering true positive rate well.","code":"p <- df_plot %>%   mutate( fpr = fp/N) %>%   select(ae_per_visit_mean, frac_site_with_ur, ur_rate, fpr, method, prob_type) %>%   mutate_if(is.numeric, round, 3) %>%   mutate(metric = case_when(method == \"ptest\" & prob_type == \"unadjusted\" ~ \"ptest unadjusted\",                            method == \"ptest\" & prob_type == \"adjusted\" ~ \"ptest adjusted\",                            method == \"bootstrap\" & prob_type == \"unadjusted\" ~ \"bootstrap unadjusted\",                            method == \"bootstrap\" & prob_type == \"adjusted\" ~ \"bootstrap adjusted\"),          metric = fct_relevel(metric, c(\"ptest unadjusted\", \"ptest adjusted\",                                         \"bootstrap unadjusted\", \"bootstrap adjusted\"))) %>%   ggplot(aes(ae_per_visit_mean, fpr, color = metric, linetype = prob_type)) +     geom_line(size = 0.5, alpha = 0.5) +     facet_grid( frac_site_with_ur ~ ur_rate) +     scale_color_manual(values = c(\"dodgerblue3\", \"skyblue1\", \"sienna4\", \"peru\")) +     theme(panel.grid = element_blank(), legend.position = \"bottom\",           axis.text.x = element_text(angle = 90, vjust = 0.5)) +      labs(title = \"AE Under Reporting Rate by Rate of AE Under-Reporting Sites\",          y = \"False positive rate - fp/N\",          x = \"AEs per Visit\") p"},{"path":"https://openpharma.github.io/simaerep/articles/usability_limits.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Address Usability Limits of Bootstrap Method","text":"already outlined introduction true AE generating process unlikely standard poisson process. Therefore using non-parametric test remains recommended option unless reason believe 50% sites -reporting AEs. also show important adjust expected false positive rate calculating final probabilities. general can say recommend method detecting AE -reporting involves comparing AE counts ae per visit rate 0.05 lower.","code":""},{"path":"https://openpharma.github.io/simaerep/articles/visit_med75.html","id":"load","dir":"Articles","previous_headings":"","what":"Load","title":"Adjusted Evaluation Point visit_med75","text":"","code":"suppressPackageStartupMessages(library(tidyverse)) suppressPackageStartupMessages(library(knitr)) suppressPackageStartupMessages(library(simaerep))"},{"path":"https://openpharma.github.io/simaerep/articles/visit_med75.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Adjusted Evaluation Point visit_med75","text":"Previously used unadjusted visit_med75. Simply taking median maximum patient visits site multiplying 0.75. number patients site reasonably large smallest maximum visit patients making cut-close equal cut-point.","code":"set.seed(1)  df_visit <- sim_test_data_study(   n_pat = 120,   n_sites = 6,   frac_site_with_ur = 0.4,   ur_rate = 0.6)  df_visit$study_id <- \"A\" df_site <- site_aggr(df_visit, method = \"med75_adj\")  plot_visit_med75(df_visit, df_site, study_id_str = \"A\", n_site = 6) ## purple line:          mean site ae of patients with visit_med75 ## grey line:            patient included ## black dashed line:    patient excluded ## dotted vertical line: visit_med75, 0.75 x median of maximum patient visits of site  ## solid vertical line:  visit_med75 adjusted, increased to minimum maximum patient visit of included patients ## dashed vertical line: maximum value for visit_med75 adjusted, 80% quantile of maximum patient visits of study"},{"path":"https://openpharma.github.io/simaerep/articles/visit_med75.html","id":"only-few-patients-per-site","dir":"Articles","previous_headings":"","what":"Only few Patients per Site","title":"Adjusted Evaluation Point visit_med75","text":"patients per site chances greater smallest maximum visit patients make cut-much greater cut-point thus include visits analysis. cases adjust evaluation point smallest maximum visit patients make initial cut.","code":"set.seed(1)  df_visit <- sim_test_data_study(   n_pat = 24,   n_sites = 6,   frac_site_with_ur = 0.4,   ur_rate = 0.6)  df_visit$study_id <- \"A\" df_site <- site_aggr(df_visit, method = \"med75_adj\")  plot_visit_med75(df_visit, df_site, study_id_str = \"A\", n_site = 6) ## purple line:          mean site ae of patients with visit_med75 ## grey line:            patient included ## black dashed line:    patient excluded ## dotted vertical line: visit_med75, 0.75 x median of maximum patient visits of site  ## solid vertical line:  visit_med75 adjusted, increased to minimum maximum patient visit of included patients ## dashed vertical line: maximum value for visit_med75 adjusted, 80% quantile of maximum patient visits of study"},{"path":"https://openpharma.github.io/simaerep/articles/visit_med75.html","id":"early-starters","dir":"Articles","previous_headings":"","what":"Early Starters","title":"Adjusted Evaluation Point visit_med75","text":"can happen site early starting patients. avoid evaluation point limited patient pool set maximum limit evaluation point includes least 20% patients study, taking 80% quantile maximum patient visits study.","code":"set.seed(1)  # early starting site df_visit1 <- sim_test_data_study(   n_pat = 3,   n_sites = 1,   max_visit_sd = 2,   max_visit_mean = 40 )  # late starting sites df_visit2 <- sim_test_data_study(   n_pat = 25,   n_sites = 5,   max_visit_sd = 2,   max_visit_mean = 10 )  df_visit1$site_number <- paste0(\"A\", df_visit1$site_number) df_visit2$site_number <- paste0(\"B\", df_visit2$site_number) df_visit1$patnum <- paste0(\"A\", df_visit1$patnum) df_visit2$patnum <- paste0(\"B\", df_visit2$patnum)   df_visit <- bind_rows(df_visit1, df_visit2)  df_visit$study_id <- \"A\"  df_site <- site_aggr(df_visit)  plot_visit_med75(df_visit, df_site, study_id_str = \"A\", n_site = 6) ## purple line:          mean site ae of patients with visit_med75 ## grey line:            patient included ## black dashed line:    patient excluded ## dotted vertical line: visit_med75, 0.75 x median of maximum patient visits of site  ## solid vertical line:  visit_med75 adjusted, increased to minimum maximum patient visit of included patients ## dashed vertical line: maximum value for visit_med75 adjusted, 80% quantile of maximum patient visits of study"},{"path":"https://openpharma.github.io/simaerep/articles/visits_or_days.html","id":"load","dir":"Articles","previous_headings":"","what":"Load","title":"Aggregate AEs by Days or Visit?","text":"","code":"suppressPackageStartupMessages(library(tidyverse)) suppressPackageStartupMessages(library(knitr)) suppressPackageStartupMessages(library(simaerep))"},{"path":"https://openpharma.github.io/simaerep/articles/visits_or_days.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Aggregate AEs by Days or Visit?","text":"generally aggregate AEs visit. patient follows visit schedule specified number days passes consecutive visit. visits scheduled contact point patient physicians day visit usually also day AEs get reported. Alternatively can also choose use simaerep ","code":""},{"path":"https://openpharma.github.io/simaerep/articles/visits_or_days.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load Data","title":"Aggregate AEs by Days or Visit?","text":"load public clinical trial data set contains data control arm see SAS files Data Source Article","code":"df_ae <- haven::read_sas('adae.sas7bdat') %>%   select(STUDYID, SUBJID, SITEID, AESTDY)   df_vs <- haven::read_sas('advs.sas7bdat') %>%   select(STUDYID, SUBJID, SITEID, ADY)   df_ae <- df_ae %>%   rename(DY = AESTDY) %>%   mutate(EVENT = \"AE\")  df_vs <- df_vs %>%   rename(DY = ADY) %>%   mutate(EVENT = \"VS\") %>%   # we ignore visits that have no date   filter(! is.na(DY)) %>%   # we are not interested in same day visits   distinct()  df_aevs <- bind_rows(df_ae, df_vs) %>%   # NA's get sorted towards the end thus AEs with no date get sorted towards last visit   arrange(STUDYID, SITEID, SUBJID, DY) %>%   group_by(STUDYID, SITEID, SUBJID) %>%   mutate(AE_NO = cumsum(ifelse(EVENT == \"AE\", 1, 0)),          VS_NO = cumsum(ifelse(EVENT == \"VS\", 1, 0))) %>%   # we remove patients with 0 visits   filter(max(VS_NO) > 0) %>%   # AE's before fist visit should register to visit 1 not zero   mutate(VS_NO = ifelse(VS_NO == 0, 1, VS_NO))   df_aevs_aggr <- df_aevs %>%   group_by(STUDYID, SITEID, SUBJID, VS_NO) %>%   summarise(MIN_AE_NO = min(AE_NO),             MAX_AE_NO = max(AE_NO),             .groups = \"drop\") %>%   group_by(STUDYID, SITEID, SUBJID) %>%   mutate(MAX_VS_PAT = max(VS_NO)) %>%   ungroup() %>%   # assign AEs that occur after last visit to last AE   mutate(     CUM_AE = ifelse(       VS_NO == MAX_VS_PAT,       MAX_AE_NO,       MIN_AE_NO)     )  df_visit <- df_aevs_aggr %>%   rename(     study_id = \"STUDYID\",     site_number = \"SITEID\",     patnum = \"SUBJID\",     n_ae = \"CUM_AE\",     visit = \"VS_NO\"   )  %>%   select(study_id, site_number, patnum, n_ae, visit)"},{"path":"https://openpharma.github.io/simaerep/articles/visits_or_days.html","id":"aggregate-on-days","dir":"Articles","previous_headings":"","what":"Aggregate on Days","title":"Aggregate AEs by Days or Visit?","text":"aggregating days need align reference timelines single patients. day first visit different patient start negative values. First correct values positive normalize AE date values date value first visit patient check get transformation visit aggregations gaps days leading implicitly missing values. simaerep correct automatically throw warning. silence warning can use check df_visit() also called internally functions accepting df_visit argument. proceed usual.","code":"df_vs_min_max <- df_vs %>%   group_by(STUDYID, SUBJID, SITEID) %>%   summarise(min_DY = min(DY, na.rm = TRUE),             max_DY = max(DY, na.rm = TRUE),             .groups = \"drop\")  df_vs_min_max$min_DY[1:25] ##  [1]  -7 -14 -14  -7  -3 -10 -19 -12  -6  -9  -9 -12  -8  -7  -6  -8  -3 -14  -7 ## [20] -14 -19 -12  -9 -21 -28 df_vs_min_max$max_DY[1:25] ##  [1] 309 134  43   1 224 265 100 163  51 103  40  38 125 168  85  92 100 708 119 ## [20]  64  43  51  70   1 225 corr_factor <- abs(min(df_vs_min_max$min_DY))  df_days <- df_ae %>%   # include patients with vs but no AE   right_join(df_vs_min_max, by = c(\"STUDYID\", \"SUBJID\", \"SITEID\")) %>%   # replace DY NULL with max patient DY    group_by(STUDYID, SUBJID, SITEID) %>%   mutate(DY = ifelse(is.na(DY) & ! is.na(EVENT), max(DY, na.rm = TRUE), DY)) %>%   # replace DY for patients with 0 AE with day of maximum visit   mutate(DY = ifelse(is.na(DY) & is.na(EVENT), max_DY, DY)) %>%   # correct timelines   mutate(DY = DY + corr_factor,          min_DY = min_DY + corr_factor,          DY_corr = DY + min_DY) %>%   group_by(STUDYID, SITEID, SUBJID) %>%   arrange(STUDYID, SITEID, SUBJID, DY_corr) %>%   mutate(n_ae = row_number()) %>%   ungroup() %>%   # set AE count to 0 for patients with no AEs   mutate(n_ae = ifelse(is.na(EVENT), 0 , n_ae)) %>%   rename(     study_id = STUDYID,     site_number = SITEID,     patnum = SUBJID,     visit = DY_corr   ) %>%   group_by(study_id, site_number, patnum, visit) %>%   summarise(n_ae = max(n_ae), .groups = \"drop\") stopifnot(n_distinct(df_days$site_number) == n_distinct(df_visit$site_number)) stopifnot(n_distinct(df_days$patnum) == n_distinct(df_visit$patnum))  pat0_days <- df_days %>%   group_by(study_id, site_number, patnum) %>%   filter(max(n_ae) == 0) %>%   pull(patnum) %>%   unique() %>%   sort()  pat0_vs <- df_visit %>%   group_by(study_id, site_number, patnum) %>%   filter(max(n_ae) == 0) %>%   pull(patnum) %>%   unique() %>%   sort()  stopifnot(all(pat0_days == pat0_vs)) df_days ## # A tibble: 3,220 × 5 ##    study_id   site_number patnum   visit  n_ae ##    <chr>      <chr>       <chr>    <dbl> <dbl> ##  1 CO-101-001 001         01001001    43     1 ##  2 CO-101-001 001         01001001    44     2 ##  3 CO-101-001 001         01001001   107     3 ##  4 CO-101-001 001         01001001   124     4 ##  5 CO-101-001 001         01001001   134     5 ##  6 CO-101-001 001         01001001   141     6 ##  7 CO-101-001 001         01001001   156     8 ##  8 CO-101-001 001         01001001   184    10 ##  9 CO-101-001 001         01001001   240    13 ## 10 CO-101-001 001         01001001   241    14 ## # ℹ 3,210 more rows df_site <- site_aggr(df_visit = df_days) ## Warning in exp_implicit_missing_visits(df_visit): implicitly missing visit ## numbers detected and corrected df_days <- simaerep:::check_df_visit(df_days) ## Warning in exp_implicit_missing_visits(df_visit): implicitly missing visit ## numbers detected and corrected df_days ## # A tibble: 57,873 × 5 ##    study_id   site_number patnum   visit  n_ae ##    <chr>      <chr>       <chr>    <dbl> <dbl> ##  1 CO-101-001 001         01001001     5     0 ##  2 CO-101-001 001         01001001     6     0 ##  3 CO-101-001 001         01001001     7     0 ##  4 CO-101-001 001         01001001     8     0 ##  5 CO-101-001 001         01001001     9     0 ##  6 CO-101-001 001         01001001    10     0 ##  7 CO-101-001 001         01001001    11     0 ##  8 CO-101-001 001         01001001    12     0 ##  9 CO-101-001 001         01001001    13     0 ## 10 CO-101-001 001         01001001    14     0 ## # ℹ 57,863 more rows df_sim_sites <- sim_sites(df_site, df_visit = df_days)  df_eval_days <- eval_sites(df_sim_sites)  simaerep::plot_study(df_visit = df_days, df_site = df_site, df_eval = df_eval_days, study = unique(df_days$study_id))"},{"path":"https://openpharma.github.io/simaerep/articles/visits_or_days.html","id":"aggregate-on-visits","dir":"Articles","previous_headings":"","what":"Aggregate on Visits","title":"Aggregate AEs by Days or Visit?","text":"results compare aggregating visits?","code":"df_site <- site_aggr(df_visit)   df_sim_sites <- sim_sites(df_site, df_visit)  df_eval_vs <- eval_sites(df_sim_sites)  simaerep::plot_study(df_visit, df_site, df_eval_vs, study = unique(df_visit$study_id))"},{"path":"https://openpharma.github.io/simaerep/articles/visits_or_days.html","id":"compare","dir":"Articles","previous_headings":"","what":"Compare","title":"Aggregate AEs by Days or Visit?","text":"observe difference results. largely attributable difference cut-visit_med75 points influences set patients included. case observe high rank correlation low p-value results greater 0. inclusion/exclusion patients analysis site ongoing trial can shift results, recommend aggregate actually occurred visits included patients equal amount opportunities report AEs.","code":"df_comp <- df_eval_days %>%   select(     site_number,     prob_low_prob_ur_days = prob_low_prob_ur,     n_pat_with_med75_days = n_pat_with_med75   )  %>%   left_join(     select(       df_eval_vs,       site_number,       prob_low_prob_ur_vs = prob_low_prob_ur,       n_pat_with_med75_vs = n_pat_with_med75       ),     by = \"site_number\"   ) %>%   filter(prob_low_prob_ur_days > 0 | prob_low_prob_ur_vs > 0) %>%   select(site_number, starts_with(\"prob\"), starts_with(\"n_pat\")) %>%   arrange(desc(prob_low_prob_ur_vs))  df_comp %>%   knitr::kable() cor.test(   df_comp$prob_low_prob_ur_vs,   df_comp$prob_low_prob_ur_days,   method = \"spearman\" ) ## Warning in cor.test.default(df_comp$prob_low_prob_ur_vs, ## df_comp$prob_low_prob_ur_days, : Cannot compute exact p-value with ties ##  ##  Spearman's rank correlation rho ##  ## data:  df_comp$prob_low_prob_ur_vs and df_comp$prob_low_prob_ur_days ## S = 114.71, p-value = 0.009797 ## alternative hypothesis: true rho is not equal to 0 ## sample estimates: ##       rho  ## 0.6848696"},{"path":"https://openpharma.github.io/simaerep/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bjoern Koneswarakantha. Author, maintainer, copyright holder. F. Hoffmann-La Roche Ltd. Copyright holder.","code":""},{"path":"https://openpharma.github.io/simaerep/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Koneswarakantha B (2024). simaerep: Find Clinical Trial Sites -Reporting Adverse Events. R package version 0.5.0.900, https://github.com/openpharma/simaerep, https://openpharma.github.io/simaerep/.","code":"@Manual{,   title = {simaerep: Find Clinical Trial Sites Under-Reporting Adverse Events},   author = {Bjoern Koneswarakantha},   year = {2024},   note = {R package version 0.5.0.900, https://github.com/openpharma/simaerep},   url = {https://openpharma.github.io/simaerep/}, }"},{"path":"https://openpharma.github.io/simaerep/index.html","id":"simaerep-","dir":"","previous_headings":"","what":"Find Clinical Trial Sites Under-Reporting Adverse Events","title":"Find Clinical Trial Sites Under-Reporting Adverse Events","text":"Simulate adverse event reporting clinical trials goal detecting -reporting sites. Monitoring Adverse Event (AE) reporting clinical trials important patient safety. use bootstrap-based simulation assign AE -reporting probability site clinical trial. method inspired ‘infer’ R package Allen Downey’s blog article: “one test!”.","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/index.html","id":"cran","dir":"","previous_headings":"Installation","what":"CRAN","title":"Find Clinical Trial Sites Under-Reporting Adverse Events","text":"","code":"install.packages(\"simaerep\")"},{"path":"https://openpharma.github.io/simaerep/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development Version","title":"Find Clinical Trial Sites Under-Reporting Adverse Events","text":"can install development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"openpharma/simaerep\")"},{"path":"https://openpharma.github.io/simaerep/index.html","id":"impala","dir":"","previous_headings":"","what":"IMPALA","title":"Find Clinical Trial Sites Under-Reporting Adverse Events","text":"simaerep published workproduct Inter-Company Quality Analytics (IMPALA) consortium. IMPALA aims engage Health Authorities inspectors defining guiding principles use advanced analytics complement, enhance accelerate current QA practices. simaerep initially developed Roche currently evaluated companies across industry complement quality assurance activities (see testimonials).","code":""},{"path":"https://openpharma.github.io/simaerep/index.html","id":"publication","dir":"","previous_headings":"","what":"Publication","title":"Find Clinical Trial Sites Under-Reporting Adverse Events","text":"Koneswarakantha, B., Barmaz, Y., Ménard, T. et al. Follow-Use Advanced Analytics Clinical Quality Assurance: Bootstrap Resampling Enhance Detection Adverse Event -Reporting. Drug Saf (2020). https://doi.org/10.1007/s40264-020-01011-5","code":""},{"path":"https://openpharma.github.io/simaerep/index.html","id":"vignettes-articles-tutorials","dir":"","previous_headings":"","what":"Vignettes/ Articles/ Tutorials","title":"Find Clinical Trial Sites Under-Reporting Adverse Events","text":"video presentation 15 min Introduction Usability Limits Check Poisson Test Applicability SAS Files Adjusted Evaluation Point visit_med75 Aggregate AEs Days Visit? Portfolio Performance","code":""},{"path":"https://openpharma.github.io/simaerep/index.html","id":"validation-report","dir":"","previous_headings":"","what":"Validation Report","title":"Find Clinical Trial Sites Under-Reporting Adverse Events","text":"Download pdf release section generated using thevalidatoR.","code":""},{"path":"https://openpharma.github.io/simaerep/index.html","id":"application","dir":"","previous_headings":"","what":"Application","title":"Find Clinical Trial Sites Under-Reporting Adverse Events","text":"Left panel shows mean AE reporting per site (lightblue darkblue lines) mean AE reporting entire study (golden line). Single sites plotted descending order AE -reporting probability right panel grey lines denote cumulative AE count single patients. Grey dots left panel plot indicate sites picked single plotting. AE -reporting probability dark blue lines crossed threshold 95%. Numbers upper left corner indicate ratio patients used analysis total number patients. Patients study long enough reach evaluation point (visit_med75, see introduction) ignored.","code":"suppressPackageStartupMessages(library(simaerep)) suppressPackageStartupMessages(library(tidyverse)) suppressPackageStartupMessages(library(knitr))  set.seed(1)  df_visit <- sim_test_data_study(   n_pat = 1000, # number of patients in study   n_sites = 100, # number of sites in study   frac_site_with_ur = 0.05, # fraction of sites under-reporting   ur_rate = 0.4, # rate of under-reporting   ae_per_visit_mean = 0.5 # mean AE per patient visit )  df_visit$study_id <- \"A\"  df_visit %>%   select(study_id, site_number, patnum, visit, n_ae) %>%   head(25) %>%   knitr::kable() aerep <- simaerep(df_visit)  plot(aerep, study = \"A\")"},{"path":"https://openpharma.github.io/simaerep/reference/aggr_duplicated_visits.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate duplicated visits. — aggr_duplicated_visits","title":"Aggregate duplicated visits. — aggr_duplicated_visits","text":"Internal function called check_df_visit().","code":""},{"path":"https://openpharma.github.io/simaerep/reference/aggr_duplicated_visits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate duplicated visits. — aggr_duplicated_visits","text":"","code":"aggr_duplicated_visits(df_visit)"},{"path":"https://openpharma.github.io/simaerep/reference/aggr_duplicated_visits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate duplicated visits. — aggr_duplicated_visits","text":"df_visit dataframe columns: study_id, site_number, patnum, visit, n_ae","code":""},{"path":"https://openpharma.github.io/simaerep/reference/aggr_duplicated_visits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate duplicated visits. — aggr_duplicated_visits","text":"df_visit corrected","code":""},{"path":"https://openpharma.github.io/simaerep/reference/check_df_visit.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrity check for df_visit. — check_df_visit","title":"Integrity check for df_visit. — check_df_visit","text":"Internal function used functions accept df_visit parameter. Checks NA columns, numeric visits AEs, implicitly missing duplicated visits.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/check_df_visit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrity check for df_visit. — check_df_visit","text":"","code":"check_df_visit(df_visit)"},{"path":"https://openpharma.github.io/simaerep/reference/check_df_visit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integrity check for df_visit. — check_df_visit","text":"df_visit dataframe columns: study_id, site_number, patnum, visit, n_ae","code":""},{"path":"https://openpharma.github.io/simaerep/reference/check_df_visit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integrity check for df_visit. — check_df_visit","text":"corrected df_visit","code":""},{"path":"https://openpharma.github.io/simaerep/reference/check_df_visit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integrity check for df_visit. — check_df_visit","text":"","code":"df_visit <- sim_test_data_study(   n_pat = 100,   n_sites = 5,   frac_site_with_ur = 0.4,   ur_rate = 0.6 )  df_visit$study_id <- \"A\"  df_visit_filt <- df_visit %>%   dplyr::filter(visit != 3)  df_visit_corr <- check_df_visit(df_visit_filt) #> Warning: implicitly missing visit numbers detected and corrected 3 %in% df_visit_corr$visit #> [1] TRUE nrow(df_visit_corr) == nrow(df_visit) #> [1] TRUE  df_visit_corr <- check_df_visit(dplyr::bind_rows(df_visit, df_visit)) #> Warning: Duplicated visit entries for some patients detected and corrected. nrow(df_visit_corr) == nrow(df_visit) #> [1] TRUE"},{"path":"https://openpharma.github.io/simaerep/reference/eval_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate sites. — eval_sites","title":"Evaluate sites. — eval_sites","text":"Correct -reporting probabilities using  p.adjust.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/eval_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate sites. — eval_sites","text":"","code":"eval_sites(df_sim_sites, method = \"BH\", under_only = TRUE, ...)"},{"path":"https://openpharma.github.io/simaerep/reference/eval_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate sites. — eval_sites","text":"df_sim_sites dataframe generated sim_sites method character, passed stats::p.adjust(), NULL eval_sites_deprecated() used instead, Default = \"BH\" under_only compute -reporting probabilities , default = TRUE check_df_visit(), computationally expensive large data sets. Default: TRUE ... use pass r_sim_sites parameter eval_sites_deprecated()","code":""},{"path":"https://openpharma.github.io/simaerep/reference/eval_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate sites. — eval_sites","text":"dataframe following columns: study_id study identification site_number site identification visit_med75 median(max(visit)) * 0.75 mean_ae_site_med75 mean AE visit_med75 site level mean_ae_study_med75 mean AE visit_med75 study level pval p-value returned poisson.test prob_low bootstrapped probability mean_ae_site_med75 lower pval_adj adjusted p-values prob_low_adj adjusted bootstrapped probability mean_ae_site_med75 lower pval_prob_ur probability -reporting 1 - pval_adj, poisson.test (use benchmark) prob_low_prob_ur probability -reporting 1 - prob_low_adj, bootstrapped (use)","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/reference/eval_sites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate sites. — eval_sites","text":"","code":"df_visit <- sim_test_data_study(n_pat = 100, n_sites = 5,     frac_site_with_ur = 0.4, ur_rate = 0.6)  df_visit$study_id <- \"A\" df_site <- site_aggr(df_visit)  df_sim_sites <- sim_sites(df_site, df_visit, r = 100)  df_eval <- eval_sites(df_sim_sites) df_eval #> # A tibble: 5 × 14 #>   study_id site_number n_pat n_pat_with_med75 visit_med75 mean_ae_site_med75 #>   <chr>    <chr>       <int>            <dbl>       <dbl>              <dbl> #> 1 A        S0001          20               16          15               2.62 #> 2 A        S0002          20               16          16               2.75 #> 3 A        S0003          20               19          15               6.37 #> 4 A        S0004          20               16          16               7.81 #> 5 A        S0005          20               17          16               8.59 #> # ℹ 8 more variables: mean_ae_study_med75 <dbl>, n_pat_with_med75_study <int>, #> #   pval <dbl>, prob_low <dbl>, pval_adj <dbl>, pval_prob_ur <dbl>, #> #   prob_low_adj <dbl>, prob_low_prob_ur <dbl>  # use deprecated method  ------- df_eval <- eval_sites(df_sim_sites, method = NULL, r_sim_sites = 100) #> Warning: using deprecated method for probability adjustment df_eval #> # A tibble: 5 × 19 #>   study_id site_number n_pat n_pat_with_med75 visit_med75 mean_ae_site_med75 #>   <chr>    <chr>       <int>            <dbl>       <dbl>              <dbl> #> 1 A        S0002          20               16          16               2.75 #> 2 A        S0001          20               16          15               2.62 #> 3 A        S0003          20               19          15               6.37 #> 4 A        S0004          20               16          16               7.81 #> 5 A        S0005          20               17          16               8.59 #> # ℹ 13 more variables: mean_ae_study_med75 <dbl>, n_pat_with_med75_study <int>, #> #   pval <dbl>, prob_low <dbl>, n_site <int>, pval_n_detected <int>, #> #   pval_fp <dbl>, pval_p_vs_fp_ratio <dbl>, pval_prob_ur <dbl>, #> #   prob_low_n_detected <int>, prob_low_fp <dbl>, prob_low_p_vs_fp_ratio <dbl>, #> #   prob_low_prob_ur <dbl>"},{"path":"https://openpharma.github.io/simaerep/reference/eval_sites_deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate sites. — eval_sites_deprecated","title":"Evaluate sites. — eval_sites_deprecated","text":"Correct -reporting probabilities expected number false positives (fp). deprecated favor conventional methods available via p.adjust.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/eval_sites_deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate sites. — eval_sites_deprecated","text":"","code":"eval_sites_deprecated(df_sim_sites, r_sim_sites)"},{"path":"https://openpharma.github.io/simaerep/reference/eval_sites_deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate sites. — eval_sites_deprecated","text":"df_sim_sites dataframe generated sim_sites() r_sim_sites integer, number repeats bootstrap resampling site simulation, needed zero probability correction fp calculation, Default: 1000","code":""},{"path":"https://openpharma.github.io/simaerep/reference/eval_sites_deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate sites. — eval_sites_deprecated","text":"dataframe following columns: study_id study identification site_number site identification visit_med75 median(max(visit)) * 0.75 mean_ae_site_med75 mean AE visit_med75 site level mean_ae_study_med75 mean AE visit_med75 study level pval p-value returned poisson.test prob_low bootstrapped probability mean_ae_site_med75 lower n_site number study sites pval_n_detected sites p-value lower pval_fp expected number fp, pval * n_site pval_p_vs_fp_ratio odds -reporting p/fp, poisson.test (use benchmark) pval_prob_ur probability -reporting 1 - fp/p, poisson.test (use benchmark) prob_low_n_detected sites bootstrapped probability lower prob_low_fp expected number fp, prob_lower * n_site prob_low_p_vs_fp_ratio odds -reporting p/fp, bootstrapped (use) prob_low_prob_ur probability -reporting 1 - fp/p, bootstrapped (use)","code":""},{"path":"https://openpharma.github.io/simaerep/reference/eval_sites_deprecated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate sites. — eval_sites_deprecated","text":"chance expected number false positives (fp) greater total number positives (p) set p_vs_fp_ratio = 1 prob_ur = 0.","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/reference/eval_sites_deprecated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate sites. — eval_sites_deprecated","text":"","code":"df_visit <- sim_test_data_study(n_pat = 100, n_sites = 5,     frac_site_with_ur = 0.4, ur_rate = 0.6)  df_visit$study_id <- \"A\" df_site <- site_aggr(df_visit)  df_sim_sites <- sim_sites(df_site, df_visit, r = 100)  df_eval <- eval_sites_deprecated(df_sim_sites, r_sim_sites = 100) df_eval #> # A tibble: 5 × 19 #>   study_id site_number n_pat n_pat_with_med75 visit_med75 mean_ae_site_med75 #>   <chr>    <chr>       <int>            <dbl>       <dbl>              <dbl> #> 1 A        S0002          20               17          18               3.94 #> 2 A        S0001          20               18          16               3.39 #> 3 A        S0003          20               18          17              10.2  #> 4 A        S0004          20               18          14               7.28 #> 5 A        S0005          20               17          15               7.29 #> # ℹ 13 more variables: mean_ae_study_med75 <dbl>, n_pat_with_med75_study <int>, #> #   pval <dbl>, prob_low <dbl>, n_site <int>, pval_n_detected <int>, #> #   pval_fp <dbl>, pval_p_vs_fp_ratio <dbl>, pval_prob_ur <dbl>, #> #   prob_low_n_detected <int>, prob_low_fp <dbl>, prob_low_p_vs_fp_ratio <dbl>, #> #   prob_low_prob_ur <dbl>"},{"path":"https://openpharma.github.io/simaerep/reference/exp_implicit_missing_visits.html","id":null,"dir":"Reference","previous_headings":"","what":"Expose implicitly missing visits. — exp_implicit_missing_visits","title":"Expose implicitly missing visits. — exp_implicit_missing_visits","text":"Internal function called check_df_visit().","code":""},{"path":"https://openpharma.github.io/simaerep/reference/exp_implicit_missing_visits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expose implicitly missing visits. — exp_implicit_missing_visits","text":"","code":"exp_implicit_missing_visits(df_visit)"},{"path":"https://openpharma.github.io/simaerep/reference/exp_implicit_missing_visits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expose implicitly missing visits. — exp_implicit_missing_visits","text":"df_visit dataframe columns: study_id, site_number, patnum, visit, n_ae","code":""},{"path":"https://openpharma.github.io/simaerep/reference/exp_implicit_missing_visits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expose implicitly missing visits. — exp_implicit_missing_visits","text":"df_visit corrected","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Portfolio Configuration — get_config","title":"Get Portfolio Configuration — get_config","text":"Get Portfolio configuration dataframe aggregated patient level max_ae max_visit. filter studies sites patients anonymize IDs. Portfolio configuration can used sim_test_data_portfolio generate data artificial portfolio.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Portfolio Configuration — get_config","text":"","code":"get_config(   df_site,   min_pat_per_study = 100,   min_sites_per_study = 10,   anonymize = TRUE,   pad_width = 4 )"},{"path":"https://openpharma.github.io/simaerep/reference/get_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Portfolio Configuration — get_config","text":"df_site dataframe aggregated patient level max_ae max_visit min_pat_per_study minimum number patients per study, Default: 100 min_sites_per_study minimum number sites per study, Default: 10 anonymize logical, Default: TRUE pad_width padding width newly created IDs, Default: 4","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Portfolio Configuration — get_config","text":"dataframe following columns: study_id study identification ae_per_visit_mean mean AE per visit per study site_number site max_visit_sd standard deviation maximum patient visits per site max_visit_mean mean maximum patient visits per site n_pat number patients","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/reference/get_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Portfolio Configuration — get_config","text":"","code":"# \\donttest{ df_visit1 <- sim_test_data_study(n_pat = 100, n_sites = 10,                                  frac_site_with_ur = 0.4, ur_rate = 0.6)  df_visit1$study_id <- \"A\"  df_visit2 <- sim_test_data_study(n_pat = 100, n_sites = 10,                                  frac_site_with_ur = 0.2, ur_rate = 0.1)  df_visit2$study_id <- \"B\"  df_visit <- dplyr::bind_rows(df_visit1, df_visit2)  df_site_max <- df_visit %>%   dplyr::group_by(study_id, site_number, patnum) %>%   dplyr::summarise(max_visit = max(visit),             max_ae = max(n_ae),             .groups = \"drop\")  df_config <- get_config(df_site_max)  df_config #> # A tibble: 20 × 6 #>    study_id ae_per_visit_mean site_number max_visit_sd max_visit_mean n_pat #>    <chr>                <dbl> <chr>              <dbl>          <dbl> <int> #>  1 0001                 0.400 0001                4.61           18.8    10 #>  2 0001                 0.400 0002                3.78           19.4    10 #>  3 0001                 0.400 0003                3.28           20.1    10 #>  4 0001                 0.400 0004                4.84           19.4    10 #>  5 0001                 0.400 0005                4.30           21.6    10 #>  6 0001                 0.400 0006                4.18           19.1    10 #>  7 0001                 0.400 0007                4.06           17.5    10 #>  8 0001                 0.400 0008                4.10           20.8    10 #>  9 0001                 0.400 0009                4.74           18.5    10 #> 10 0001                 0.400 0010                4.30           18.6    10 #> 11 0002                 0.487 0001                3.10           20.6    10 #> 12 0002                 0.487 0002                2.75           20      10 #> 13 0002                 0.487 0003                3.71           19.2    10 #> 14 0002                 0.487 0004                5.34           20.4    10 #> 15 0002                 0.487 0005                3.84           18.5    10 #> 16 0002                 0.487 0006                4.35           19.4    10 #> 17 0002                 0.487 0007                5.48           19.4    10 #> 18 0002                 0.487 0008                3.62           22      10 #> 19 0002                 0.487 0009                4.00           17.7    10 #> 20 0002                 0.487 0010                2.60           19.1    10  df_portf <- sim_test_data_portfolio(df_config)  df_portf #> # A tibble: 3,792 × 8 #>    study_id ae_per_visit_mean site_number max_visit_sd max_visit_mean patnum #>    <chr>                <dbl> <chr>              <dbl>          <dbl> <chr>  #>  1 0001                 0.400 0001                4.61           18.8 0001   #>  2 0001                 0.400 0001                4.61           18.8 0001   #>  3 0001                 0.400 0001                4.61           18.8 0001   #>  4 0001                 0.400 0001                4.61           18.8 0001   #>  5 0001                 0.400 0001                4.61           18.8 0001   #>  6 0001                 0.400 0001                4.61           18.8 0001   #>  7 0001                 0.400 0001                4.61           18.8 0001   #>  8 0001                 0.400 0001                4.61           18.8 0001   #>  9 0001                 0.400 0001                4.61           18.8 0001   #> 10 0001                 0.400 0001                4.61           18.8 0001   #> # ℹ 3,782 more rows #> # ℹ 2 more variables: visit <int>, n_ae <int>  df_scen <- sim_ur_scenarios(df_portf,                             extra_ur_sites = 2,                             ur_rate = c(0.5, 1)) #> aggregating site level #> prepping for simulation #> generating scenarios #> getting under-reporting stats #> evaluating stats   df_scen #> # A tibble: 140 × 14 #>    study_id site_number extra_ur_sites frac_pat_with_ur ur_rate n_pat #>    <chr>    <chr>                <dbl>            <dbl>   <dbl> <int> #>  1 0001     0001                     0           0          0      10 #>  2 0001     0001                     0           0.0989     0.5    10 #>  3 0001     0001                     0           0.0989     1      10 #>  4 0001     0001                     1           0.199      0.5    10 #>  5 0001     0001                     1           0.199      1      10 #>  6 0001     0001                     2           0.299      0.5    10 #>  7 0001     0001                     2           0.299      1      10 #>  8 0001     0002                     0           0          0      10 #>  9 0001     0002                     0           0.107      0.5    10 #> 10 0001     0002                     0           0.107      1      10 #> # ℹ 130 more rows #> # ℹ 8 more variables: n_pat_with_med75 <dbl>, visit_med75 <dbl>, #> #   mean_ae_site_med75 <dbl>, mean_ae_study_med75 <dbl>, #> #   n_pat_with_med75_study <int>, prob_low <dbl>, prob_low_adj <dbl>, #> #   prob_low_prob_ur <dbl>  df_perf <- get_portf_perf(df_scen)  df_perf #> # A tibble: 27 × 5 #>      fpr thresh extra_ur_sites ur_rate   tpr #>    <dbl>  <dbl>          <dbl>   <dbl> <dbl> #>  1 0.001   0.53              0     0     0.2 #>  2 0.001   0.53              1     0     0.2 #>  3 0.001   0.53              2     0     0.2 #>  4 0.001   0.53              0     0.5   1   #>  5 0.001   0.53              1     0.5   1   #>  6 0.001   0.53              2     0.5   1   #>  7 0.001   0.53              0     1     1   #>  8 0.001   0.53              1     1     1   #>  9 0.001   0.53              2     1     1   #> 10 0.01    0.53              0     0     0.2 #> # ℹ 17 more rows # }"},{"path":"https://openpharma.github.io/simaerep/reference/get_ecd_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get empirical cumulative distribution values of pval or prob_lower — get_ecd_values","title":"Get empirical cumulative distribution values of pval or prob_lower — get_ecd_values","text":"Test function, test applicability poisson test, calculating bootstrapped probability obtaining specific p-value lower, use combination sim_studies().","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_ecd_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get empirical cumulative distribution values of pval or prob_lower — get_ecd_values","text":"","code":"get_ecd_values(df_sim_studies, df_sim_sites, val_str)"},{"path":"https://openpharma.github.io/simaerep/reference/get_ecd_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get empirical cumulative distribution values of pval or prob_lower — get_ecd_values","text":"df_sim_studies dataframe, generated sim_studies() df_sim_sites dataframe, generated sim_sites() val_str c(\"prob_low\",\"pval\")","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_ecd_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get empirical cumulative distribution values of pval or prob_lower — get_ecd_values","text":"dataframe following columns: study_id study identification site_number site identification visit_med75 median(max(visit)) * 0.75 mean_ae_site_med75 mean AE visit_med75 site level mean_ae_study_med75 mean AE visit_med75 study level pval/prob_low p-value returned poisson.test pval/prob_low_ecd p-value returned poisson.test","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_ecd_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get empirical cumulative distribution values of pval or prob_lower — get_ecd_values","text":"trains ecdf function studies based results sim_studies()","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_ecd_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get empirical cumulative distribution values of pval or prob_lower — get_ecd_values","text":"","code":"df_visit <- sim_test_data_study(n_pat = 100, n_sites = 5,     frac_site_with_ur = 0.4, ur_rate = 0.3)  df_visit$study_id <- \"A\" df_site <- site_aggr(df_visit)  df_sim_sites <- sim_sites(df_site, df_visit, r = 100)  df_sim_studies <- sim_studies(   df_site = df_site,   df_visit = df_visit,   r = 3,   parallel = FALSE,   poisson_test = TRUE,   prob_lower = TRUE )  get_ecd_values(df_sim_studies, df_sim_sites, \"prob_low\") #> # A tibble: 5 × 11 #>   study_id site_number n_pat n_pat_with_med75 visit_med75 mean_ae_site_med75 #>   <chr>    <chr>       <int>            <dbl>       <dbl>              <dbl> #> 1 A        S0001          20               18          17               5.89 #> 2 A        S0002          20               18          15               5.5  #> 3 A        S0003          20               17          16               8.53 #> 4 A        S0004          20               20          15               6.4  #> 5 A        S0005          20               16          16               8.38 #> # ℹ 5 more variables: mean_ae_study_med75 <dbl>, n_pat_with_med75_study <int>, #> #   pval <dbl>, prob_low <dbl>, prob_low_ecd <dbl> get_ecd_values(df_sim_studies, df_sim_sites, \"pval\") #> # A tibble: 5 × 11 #>   study_id site_number n_pat n_pat_with_med75 visit_med75 mean_ae_site_med75 #>   <chr>    <chr>       <int>            <dbl>       <dbl>              <dbl> #> 1 A        S0001          20               18          17               5.89 #> 2 A        S0002          20               18          15               5.5  #> 3 A        S0003          20               17          16               8.53 #> 4 A        S0004          20               20          15               6.4  #> 5 A        S0005          20               16          16               8.38 #> # ℹ 5 more variables: mean_ae_study_med75 <dbl>, n_pat_with_med75_study <int>, #> #   pval <dbl>, prob_low <dbl>, pval_ecd <dbl>"},{"path":"https://openpharma.github.io/simaerep/reference/get_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"replace cowplot::get_legend, to silence warning Multiple components found; returning the first one. To return all, use `return_all = TRUE — get_legend","title":"replace cowplot::get_legend, to silence warning Multiple components found; returning the first one. To return all, use `return_all = TRUE — get_legend","text":"replace cowplot::get_legend, silence warning Multiple components found; returning first one. return , use `return_all = TRUE","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"replace cowplot::get_legend, to silence warning Multiple components found; returning the first one. To return all, use `return_all = TRUE — get_legend","text":"","code":"get_legend(p)"},{"path":"https://openpharma.github.io/simaerep/reference/get_pat_pool_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure study patient pool by site parameters. — get_pat_pool_config","title":"Configure study patient pool by site parameters. — get_pat_pool_config","text":"Internal Function used sim_sites()","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_pat_pool_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure study patient pool by site parameters. — get_pat_pool_config","text":"","code":"get_pat_pool_config(df_visit, df_site, min_n_pat_with_med75 = 1)"},{"path":"https://openpharma.github.io/simaerep/reference/get_pat_pool_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure study patient pool by site parameters. — get_pat_pool_config","text":"df_visit dataframe df_site dataframe created site_aggr() min_n_pat_with_med75 minimum number patients visit_med_75 simulation, Default: 1","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_pat_pool_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure study patient pool by site parameters. — get_pat_pool_config","text":"dataframe","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_pat_pool_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Configure study patient pool by site parameters. — get_pat_pool_config","text":"simulating study need configure study patient pool match configuration sites","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_pat_pool_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure study patient pool by site parameters. — get_pat_pool_config","text":"","code":"df_visit1 <- sim_test_data_study(n_pat = 100, n_sites = 5,                                       frac_site_with_ur = 0.4, ur_rate = 0.6)  df_visit1$study_id <- \"A\"  df_visit2 <- sim_test_data_study(n_pat = 1000, n_sites = 3,                                       frac_site_with_ur = 0.2, ur_rate = 0.1)  df_visit2$study_id <- \"B\"  df_visit <- dplyr::bind_rows(df_visit1, df_visit2)  df_site <- site_aggr(df_visit)  df_config <- get_pat_pool_config(df_visit, df_site)  df_config #> # A tibble: 8 × 6 #>   study_id site_number visit_med75 n_pat_with_med75 n_pat_study pat_pool #>   <chr>    <chr>             <dbl>            <dbl>       <dbl> <list>   #> 1 A        S0001                15               19          71 <tibble> #> 2 A        S0002                15               18          72 <tibble> #> 3 A        S0003                16               17          66 <tibble> #> 4 A        S0004                15               20          70 <tibble> #> 5 A        S0005                16               16          67 <tibble> #> 6 B        S0001                15              302         602 <tibble> #> 7 B        S0002                15              301         603 <tibble> #> 8 B        S0003                15              301         603 <tibble>"},{"path":"https://openpharma.github.io/simaerep/reference/get_portf_perf.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Portfolio Performance — get_portf_perf","title":"Get Portfolio Performance — get_portf_perf","text":"Performance true positive rate (tpr tp/P) basis desired false positive rates (fpr fp/P).","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_portf_perf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Portfolio Performance — get_portf_perf","text":"","code":"get_portf_perf(df_scen, stat = \"prob_low_prob_ur\", fpr = c(0.001, 0.01, 0.05))"},{"path":"https://openpharma.github.io/simaerep/reference/get_portf_perf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Portfolio Performance — get_portf_perf","text":"df_scen dataframe returned sim_ur_scenarios stat character denoting column name -reporting statistic, Default: 'prob_low_prob_ur' fpr numeric vector specifying false positive rates, Default: c(0.001, 0.01, 0.05)","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_portf_perf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Portfolio Performance — get_portf_perf","text":"dataframe","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_portf_perf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Portfolio Performance — get_portf_perf","text":"DETAILS","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/reference/get_portf_perf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Portfolio Performance — get_portf_perf","text":"","code":"# \\donttest{ df_visit1 <- sim_test_data_study(n_pat = 100, n_sites = 10,                                  frac_site_with_ur = 0.4, ur_rate = 0.6)  df_visit1$study_id <- \"A\"  df_visit2 <- sim_test_data_study(n_pat = 100, n_sites = 10,                                  frac_site_with_ur = 0.2, ur_rate = 0.1)  df_visit2$study_id <- \"B\"  df_visit <- dplyr::bind_rows(df_visit1, df_visit2)  df_site_max <- df_visit %>%   dplyr::group_by(study_id, site_number, patnum) %>%   dplyr::summarise(max_visit = max(visit),                    max_ae = max(n_ae),                    .groups = \"drop\")  df_config <- get_config(df_site_max)  df_config #> # A tibble: 20 × 6 #>    study_id ae_per_visit_mean site_number max_visit_sd max_visit_mean n_pat #>    <chr>                <dbl> <chr>              <dbl>          <dbl> <int> #>  1 0001                 0.373 0001                3.79           19.2    10 #>  2 0001                 0.373 0002                3.07           19.9    10 #>  3 0001                 0.373 0003                1.91           17.9    10 #>  4 0001                 0.373 0004                4.88           20      10 #>  5 0001                 0.373 0005                3.43           19      10 #>  6 0001                 0.373 0006                3.77           21.3    10 #>  7 0001                 0.373 0007                3.45           18.9    10 #>  8 0001                 0.373 0008                2.81           17.1    10 #>  9 0001                 0.373 0009                5.27           17.4    10 #> 10 0001                 0.373 0010                3.77           19.3    10 #> 11 0002                 0.507 0001                3.57           18.5    10 #> 12 0002                 0.507 0002                5.10           19.6    10 #> 13 0002                 0.507 0003                4.44           19.8    10 #> 14 0002                 0.507 0004                3.38           19.1    10 #> 15 0002                 0.507 0005                2.72           21.4    10 #> 16 0002                 0.507 0006                2.46           19.4    10 #> 17 0002                 0.507 0007                5.29           19.3    10 #> 18 0002                 0.507 0008                4.17           19.5    10 #> 19 0002                 0.507 0009                3.68           18.2    10 #> 20 0002                 0.507 0010                2.12           20.5    10  df_portf <- sim_test_data_portfolio(df_config)  df_portf #> # A tibble: 3,896 × 8 #>    study_id ae_per_visit_mean site_number max_visit_sd max_visit_mean patnum #>    <chr>                <dbl> <chr>              <dbl>          <dbl> <chr>  #>  1 0001                 0.373 0001                3.79           19.2 0001   #>  2 0001                 0.373 0001                3.79           19.2 0001   #>  3 0001                 0.373 0001                3.79           19.2 0001   #>  4 0001                 0.373 0001                3.79           19.2 0001   #>  5 0001                 0.373 0001                3.79           19.2 0001   #>  6 0001                 0.373 0001                3.79           19.2 0001   #>  7 0001                 0.373 0001                3.79           19.2 0001   #>  8 0001                 0.373 0001                3.79           19.2 0001   #>  9 0001                 0.373 0001                3.79           19.2 0001   #> 10 0001                 0.373 0001                3.79           19.2 0001   #> # ℹ 3,886 more rows #> # ℹ 2 more variables: visit <int>, n_ae <int>  df_scen <- sim_ur_scenarios(df_portf,                             extra_ur_sites = 2,                             ur_rate = c(0.5, 1)) #> aggregating site level #> prepping for simulation #> generating scenarios #> getting under-reporting stats #> evaluating stats   df_scen #> # A tibble: 140 × 14 #>    study_id site_number extra_ur_sites frac_pat_with_ur ur_rate n_pat #>    <chr>    <chr>                <dbl>            <dbl>   <dbl> <int> #>  1 0001     0001                     0            0         0      10 #>  2 0001     0001                     0            0.111     0.5    10 #>  3 0001     0001                     0            0.111     1      10 #>  4 0001     0001                     1            0.211     0.5    10 #>  5 0001     0001                     1            0.211     1      10 #>  6 0001     0001                     2            0.311     0.5    10 #>  7 0001     0001                     2            0.311     1      10 #>  8 0001     0002                     0            0         0      10 #>  9 0001     0002                     0            0.120     0.5    10 #> 10 0001     0002                     0            0.120     1      10 #> # ℹ 130 more rows #> # ℹ 8 more variables: n_pat_with_med75 <dbl>, visit_med75 <dbl>, #> #   mean_ae_site_med75 <dbl>, mean_ae_study_med75 <dbl>, #> #   n_pat_with_med75_study <int>, prob_low <dbl>, prob_low_adj <dbl>, #> #   prob_low_prob_ur <dbl>  df_perf <- get_portf_perf(df_scen)  df_perf #> # A tibble: 27 × 5 #>      fpr thresh extra_ur_sites ur_rate   tpr #>    <dbl>  <dbl>          <dbl>   <dbl> <dbl> #>  1 0.001  0.872              0     0    0.05 #>  2 0.001  0.872              1     0    0.05 #>  3 0.001  0.872              2     0    0.05 #>  4 0.001  0.872              0     0.5  1    #>  5 0.001  0.872              1     0.5  0.95 #>  6 0.001  0.872              2     0.5  0.95 #>  7 0.001  0.872              0     1    1    #>  8 0.001  0.872              1     1    1    #>  9 0.001  0.872              2     1    1    #> 10 0.01   0.799              0     0    0.05 #> # ℹ 17 more rows # }"},{"path":"https://openpharma.github.io/simaerep/reference/get_site_mean_ae_dev.html","id":null,"dir":"Reference","previous_headings":"","what":"Get site mean ae development. — get_site_mean_ae_dev","title":"Get site mean ae development. — get_site_mean_ae_dev","text":"Internal function used site_aggr(), plot_visit_med75(), returns mean AE development visit 0 visit_med75.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_site_mean_ae_dev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get site mean ae development. — get_site_mean_ae_dev","text":"","code":"get_site_mean_ae_dev(df_visit, df_pat, df_site)"},{"path":"https://openpharma.github.io/simaerep/reference/get_site_mean_ae_dev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get site mean ae development. — get_site_mean_ae_dev","text":"df_visit dataframe df_pat dataframe returned pat_aggr() df_site dataframe returned site_aggr()","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_site_mean_ae_dev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get site mean ae development. — get_site_mean_ae_dev","text":"dataframe","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_visit_med75.html","id":null,"dir":"Reference","previous_headings":"","what":"Get visit_med75. — get_visit_med75","title":"Get visit_med75. — get_visit_med75","text":"Internal function used site_aggr().","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_visit_med75.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get visit_med75. — get_visit_med75","text":"","code":"get_visit_med75(df_pat, method = \"med75_adj\", min_pat_pool = 0.2)"},{"path":"https://openpharma.github.io/simaerep/reference/get_visit_med75.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get visit_med75. — get_visit_med75","text":"df_pat dataframe returned pat_aggr() method character, one c(\"med75\", \"med75_adj\") defining method defining evaluation point visit_med75 (see details), Default: \"med75_adj\" min_pat_pool double, minimum ratio available patients available sampling. Determines maximum visit_med75 value see Details. Default: 0.2","code":""},{"path":"https://openpharma.github.io/simaerep/reference/get_visit_med75.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get visit_med75. — get_visit_med75","text":"dataframe","code":""},{"path":"https://openpharma.github.io/simaerep/reference/is_orivisit.html","id":null,"dir":"Reference","previous_headings":"","what":"is orivisit class — is_orivisit","title":"is orivisit class — is_orivisit","text":"internal function","code":""},{"path":"https://openpharma.github.io/simaerep/reference/is_orivisit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is orivisit class — is_orivisit","text":"","code":"is_orivisit(x)"},{"path":"https://openpharma.github.io/simaerep/reference/is_orivisit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is orivisit class — is_orivisit","text":"x object","code":""},{"path":"https://openpharma.github.io/simaerep/reference/is_orivisit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"is orivisit class — is_orivisit","text":"logical","code":""},{"path":"https://openpharma.github.io/simaerep/reference/is_simaerep.html","id":null,"dir":"Reference","previous_headings":"","what":"is simaerep class — is_simaerep","title":"is simaerep class — is_simaerep","text":"internal function","code":""},{"path":"https://openpharma.github.io/simaerep/reference/is_simaerep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is simaerep class — is_simaerep","text":"","code":"is_simaerep(x)"},{"path":"https://openpharma.github.io/simaerep/reference/is_simaerep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is simaerep class — is_simaerep","text":"x object","code":""},{"path":"https://openpharma.github.io/simaerep/reference/is_simaerep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"is simaerep class — is_simaerep","text":"logical","code":""},{"path":"https://openpharma.github.io/simaerep/reference/max_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Max Rank — max_rank","title":"Calculate Max Rank — max_rank","text":"like rank() ties.method = \"max\", works tbl objects","code":""},{"path":"https://openpharma.github.io/simaerep/reference/max_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Max Rank — max_rank","text":"","code":"max_rank(df, col, col_new)"},{"path":"https://openpharma.github.io/simaerep/reference/max_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Max Rank — max_rank","text":"df dataframe col character column name rank y col_new character column name rankings","code":""},{"path":"https://openpharma.github.io/simaerep/reference/max_rank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Max Rank — max_rank","text":"needed hochberg p value adjustment. need assign higher rank multiple sites p value","code":""},{"path":"https://openpharma.github.io/simaerep/reference/max_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Max Rank — max_rank","text":"","code":"df <- tibble::tibble(s = c(1, 2, 2, 2, 5, 10)) %>%  dplyr::mutate(    rank = rank(s, ties.method = \"max\")  )  df %>%  max_rank(\"s\", \"max_rank\") #> # A tibble: 6 × 3 #>       s  rank max_rank #>   <dbl> <int>    <int> #> 1     1     1        1 #> 2     2     4        4 #> 3     2     4        4 #> 4     2     4        4 #> 5     5     5        5 #> 6    10     6        6 # \\donttest{ # Database con <- DBI::dbConnect(duckdb::duckdb(), dbdir = \":memory:\")  dplyr::copy_to(con, df, \"df\") max_rank(dplyr::tbl(con, \"df\"), \"s\", \"max_rank\") #> # Source:   SQL [6 x 3] #> # Database: DuckDB v1.0.0 [koneswab@Darwin 23.6.0:R 4.4.1/:memory:] #>       s  rank max_rank #>   <dbl> <int>    <dbl> #> 1    10     6        6 #> 2     2     4        4 #> 3     2     4        4 #> 4     2     4        4 #> 5     1     1        1 #> 6     5     5        5  DBI::dbDisconnect(con) # }"},{"path":"https://openpharma.github.io/simaerep/reference/orivisit.html","id":null,"dir":"Reference","previous_headings":"","what":"create orivisit object — orivisit","title":"create orivisit object — orivisit","text":"Internal S3 object, stores lazy reference original visit data.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/orivisit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create orivisit object — orivisit","text":"","code":"orivisit(df_visit, call = NULL, env = parent.frame())"},{"path":"https://openpharma.github.io/simaerep/reference/orivisit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create orivisit object — orivisit","text":"df_visit dataframe original visit data call optional, provide call, Default: NULL env optional, provide environment original visit data, Default: parent.frame()","code":""},{"path":"https://openpharma.github.io/simaerep/reference/orivisit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create orivisit object — orivisit","text":"orivisit object","code":""},{"path":"https://openpharma.github.io/simaerep/reference/orivisit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"create orivisit object — orivisit","text":"Saves variable name original visit data, checks whether can retrieved parent environment stores summary. Original data can retrieved using .data.frame(x).","code":""},{"path":"https://openpharma.github.io/simaerep/reference/orivisit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create orivisit object — orivisit","text":"","code":"df_visit <- sim_test_data_study(   n_pat = 100,   n_sites = 5,   frac_site_with_ur = 0.4,   ur_rate = 0.6 )  df_visit$study_id <- \"A\"  visit <- orivisit(df_visit)  object.size(df_visit) #> 125288 bytes object.size(visit) #> 2288 bytes  as.data.frame(visit) #> # A tibble: 1,956 × 9 #>    patnum  site_number is_ur max_visit_mean max_visit_sd ae_per_visit_mean visit #>    <chr>   <chr>       <lgl>          <dbl>        <dbl>             <dbl> <int> #>  1 P000001 S0001       TRUE              20            4               0.2     1 #>  2 P000001 S0001       TRUE              20            4               0.2     2 #>  3 P000001 S0001       TRUE              20            4               0.2     3 #>  4 P000001 S0001       TRUE              20            4               0.2     4 #>  5 P000001 S0001       TRUE              20            4               0.2     5 #>  6 P000001 S0001       TRUE              20            4               0.2     6 #>  7 P000001 S0001       TRUE              20            4               0.2     7 #>  8 P000001 S0001       TRUE              20            4               0.2     8 #>  9 P000001 S0001       TRUE              20            4               0.2     9 #> 10 P000001 S0001       TRUE              20            4               0.2    10 #> # ℹ 1,946 more rows #> # ℹ 2 more variables: n_ae <int>, study_id <chr>"},{"path":"https://openpharma.github.io/simaerep/reference/p_adjust_bh_inframe.html","id":null,"dir":"Reference","previous_headings":"","what":"benjamini hochberg p value correction using table operations — p_adjust_bh_inframe","title":"benjamini hochberg p value correction using table operations — p_adjust_bh_inframe","text":"benjamini hochberg p value correction using table operations","code":""},{"path":"https://openpharma.github.io/simaerep/reference/p_adjust_bh_inframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"benjamini hochberg p value correction using table operations — p_adjust_bh_inframe","text":"","code":"p_adjust_bh_inframe(df_eval, col, suffix)"},{"path":"https://openpharma.github.io/simaerep/reference/pat_aggr.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate visit to patient level. — pat_aggr","title":"Aggregate visit to patient level. — pat_aggr","text":"Internal function used site_aggr() plot_visit_med75(), adds maximum visit patient.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/pat_aggr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate visit to patient level. — pat_aggr","text":"","code":"pat_aggr(df_visit)"},{"path":"https://openpharma.github.io/simaerep/reference/pat_aggr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate visit to patient level. — pat_aggr","text":"df_visit dataframe","code":""},{"path":"https://openpharma.github.io/simaerep/reference/pat_aggr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate visit to patient level. — pat_aggr","text":"dataframe","code":""},{"path":"https://openpharma.github.io/simaerep/reference/pat_pool.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a study specific patient pool for sampling — pat_pool","title":"Create a study specific patient pool for sampling — pat_pool","text":"Internal function sim_sites, filter visits greater max_visit_med75_study returns dataframe one column studies one column nested patient data.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/pat_pool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a study specific patient pool for sampling — pat_pool","text":"","code":"pat_pool(df_visit, df_site)"},{"path":"https://openpharma.github.io/simaerep/reference/pat_pool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a study specific patient pool for sampling — pat_pool","text":"df_visit dataframe, created sim_sites df_site dataframe created site_aggr","code":""},{"path":"https://openpharma.github.io/simaerep/reference/pat_pool.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a study specific patient pool for sampling — pat_pool","text":"dataframe nested pat_pool column","code":""},{"path":"https://openpharma.github.io/simaerep/reference/pat_pool.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a study specific patient pool for sampling — pat_pool","text":"","code":"df_visit <- sim_test_data_study(   n_pat = 100,   n_sites = 5,   frac_site_with_ur = 0.4,   ur_rate = 0.6 )  df_visit$study_id <- \"A\"  df_site <- site_aggr(df_visit)  df_pat_pool <- pat_pool(df_visit, df_site)  df_pat_pool #> # A tibble: 1 × 2 #>   study_id pat_pool             #>   <chr>    <list>               #> 1 A        <tibble [1,637 × 3]>"},{"path":"https://openpharma.github.io/simaerep/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://openpharma.github.io/simaerep/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"returns output rhs function","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot.simaerep.html","id":null,"dir":"Reference","previous_headings":"","what":"plot AE under-reporting simulation results — plot.simaerep","title":"plot AE under-reporting simulation results — plot.simaerep","text":"generic plot function simaerep objects","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot.simaerep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot AE under-reporting simulation results — plot.simaerep","text":"","code":"# S3 method for class 'simaerep' plot(   x,   ...,   study = NULL,   what = \"ur\",   n_sites = 16,   df_visit = NULL,   env = parent.frame() )"},{"path":"https://openpharma.github.io/simaerep/reference/plot.simaerep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot AE under-reporting simulation results — plot.simaerep","text":"x simaerep object ... additional parameters passed plot_study() plot_visit_med75() study character specifying study plotted, Default: NULL one c(\"ur\", \"med75\"), specifying whether plot site AE -reporting visit_med75 values, Default: 'ur' n_sites number sites plot, Default: 16 df_visit optional, pass original visit data retrieved parent environment, Default: NULL env optional, pass environment retrieve original visit data, Default: parent.frame()","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot.simaerep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot AE under-reporting simulation results — plot.simaerep","text":"ggplot object","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot.simaerep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"plot AE under-reporting simulation results — plot.simaerep","text":"see plot_study() plot_visit_med75()","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot.simaerep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot AE under-reporting simulation results — plot.simaerep","text":"","code":"# \\donttest{ df_visit <- sim_test_data_study(   n_pat = 100,   n_sites = 5,   frac_site_with_ur = 0.4,   ur_rate = 0.6 )  df_visit$study_id <- \"A\"  aerep <- simaerep(df_visit)  plot(aerep, what = \"ur\", study = \"A\")  plot(aerep, what = \"med75\", study = \"A\") #> purple line:          mean site ae of patients with visit_med75 #> grey line:            patient included #> black dashed line:    patient excluded #> dotted vertical line: visit_med75, 0.75 x median of maximum patient visits of site  #> solid vertical line:  visit_med75 adjusted, increased to minimum maximum patient visit of included patients #> dashed vertical line: maximum value for visit_med75 adjusted, 80% quantile of maximum patient visits of study #>   # }"},{"path":"https://openpharma.github.io/simaerep/reference/plot_dots.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots AE per site as dots. — plot_dots","title":"Plots AE per site as dots. — plot_dots","text":"plot meant supplement package documentation.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot_dots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots AE per site as dots. — plot_dots","text":"","code":"plot_dots(   df,   nrow = 10,   ncols = 10,   col_group = \"site\",   thresh = NULL,   color_site_a = \"#BDBDBD\",   color_site_b = \"#757575\",   color_site_c = \"gold3\",   color_high = \"#00695C\",   color_low = \"#25A69A\",   size_dots = 10 )"},{"path":"https://openpharma.github.io/simaerep/reference/plot_dots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots AE per site as dots. — plot_dots","text":"df dataframe, cols = c('site', 'patients', 'n_ae') nrow integer, number rows, Default: 10 ncols integer, number columns, Default: 10 col_group character, grouping column, Default: 'site' thresh numeric, threshold determine color mean_ae annotation, Default: NULL color_site_a character, hex color value, Default: '#BDBDBD' color_site_b character, hex color value, Default: '#757575' color_site_c character, hex color value, Default: 'gold3' color_high character, hex color value, Default: '#00695C' color_low character, hex color value, Default: '#25A69A' size_dots integer, Default: 10","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot_dots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots AE per site as dots. — plot_dots","text":"ggplot object","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot_dots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots AE per site as dots. — plot_dots","text":"","code":"study <- tibble::tibble(   site = LETTERS[1:3],   patients = c(list(seq(1, 50, 1)), list(seq(1, 40, 1)), list(seq(1, 10, 1))) ) %>%   tidyr::unnest(patients) %>%   dplyr::mutate(n_ae = as.integer(runif(min = 0, max = 10, n = nrow(.))))  plot_dots(study)"},{"path":"https://openpharma.github.io/simaerep/reference/plot_sim_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot simulation example. — plot_sim_example","title":"Plot simulation example. — plot_sim_example","text":"plots supplements package documentation.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot_sim_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot simulation example. — plot_sim_example","text":"","code":"plot_sim_example(   substract_ae_per_pat = 0,   size_dots = 10,   size_raster_label = 12,   color_site_a = \"#BDBDBD\",   color_site_b = \"#757575\",   color_site_c = \"gold3\",   color_high = \"#00695C\",   color_low = \"#25A69A\",   title = TRUE,   legend = TRUE,   seed = 5 )"},{"path":"https://openpharma.github.io/simaerep/reference/plot_sim_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot simulation example. — plot_sim_example","text":"substract_ae_per_pat integer, subtract aes patients site C, Default: 0 size_dots integer, Default: 10 size_raster_label integer, Default: 12 color_site_a character, hex color value, Default: '#BDBDBD' color_site_b character, hex color value, Default: '#757575' color_site_c character, hex color value, Default: 'gold3' color_high character, hex color value, Default: '#00695C' color_low character, hex color value, Default: '#25A69A' title logical, include title, Default: T legend logical, include legend, Default: T seed pass seed simulations Default: 5","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot_sim_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot simulation example. — plot_sim_example","text":"ggplot","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot_sim_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot simulation example. — plot_sim_example","text":"uses plot_dots() adds 2 simulation panels, uses made-site config three sites ,B,C simulating site C","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/reference/plot_sim_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot simulation example. — plot_sim_example","text":"","code":"# \\donttest{ plot_sim_example(size_dots = 5)  # }"},{"path":"https://openpharma.github.io/simaerep/reference/plot_sim_examples.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot multiple simulation examples. — plot_sim_examples","title":"Plot multiple simulation examples. — plot_sim_examples","text":"plot meant supplement package documentation.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot_sim_examples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot multiple simulation examples. — plot_sim_examples","text":"","code":"plot_sim_examples(substract_ae_per_pat = c(0, 1, 3), ...)"},{"path":"https://openpharma.github.io/simaerep/reference/plot_sim_examples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot multiple simulation examples. — plot_sim_examples","text":"substract_ae_per_pat integer, Default: c(0, 1, 3) ... parameters passed plot_sim_example()","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot_sim_examples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot multiple simulation examples. — plot_sim_examples","text":"ggplot","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot_sim_examples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot multiple simulation examples. — plot_sim_examples","text":"function wrapper plot_sim_example()","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/reference/plot_sim_examples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot multiple simulation examples. — plot_sim_examples","text":"","code":"# \\donttest{ plot_sim_examples(size_dot = 3, size_raster_label = 10)  plot_sim_examples()  # }"},{"path":"https://openpharma.github.io/simaerep/reference/plot_study.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ae development of study and sites highlighting at risk sites. — plot_study","title":"Plot ae development of study and sites highlighting at risk sites. — plot_study","text":"suitable visual representation AE -reporting statistics.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot_study.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ae development of study and sites highlighting at risk sites. — plot_study","text":"","code":"plot_study(   df_visit,   df_site,   df_eval,   study,   df_al = NULL,   n_sites = 16,   pval = FALSE,   prob_col = \"prob_low_prob_ur\" )"},{"path":"https://openpharma.github.io/simaerep/reference/plot_study.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ae development of study and sites highlighting at risk sites. — plot_study","text":"df_visit dataframe, created sim_sites() df_site dataframe created site_aggr() df_eval dataframe created eval_sites() study study df_al dataframe containing study_id, site_number, alert_level_site, alert_level_study (optional), Default: NA n_sites integer number risk sites, Default: 16 pval logical show p-value, Default:FALSE prob_col character, denotes probability column, Default: \"prob_low_prob_ur\"","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot_study.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ae development of study and sites highlighting at risk sites. — plot_study","text":"ggplot","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot_study.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot ae development of study and sites highlighting at risk sites. — plot_study","text":"Left panel shows mean AE reporting per site (lightblue darkblue lines) mean AE reporting entire study (golden line). Single sites plotted descending order AE -reporting probability right panel grey lines denote cumulative AE count single patients. Grey dots left panel plot indicate sites picked single plotting. AE -reporting probability dark blue lines crossed threshold 95%. Numbers upper left corner indicate ratio patients used analysis total number patients. Patients study long enough reach evaluation point (visit_med75) ignored.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot_study.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ae development of study and sites highlighting at risk sites. — plot_study","text":"","code":"# \\donttest{ df_visit <- sim_test_data_study(n_pat = 1000, n_sites = 10,     frac_site_with_ur = 0.2, ur_rate = 0.15, max_visit_sd = 8)  df_visit$study_id <- \"A\" df_site <- site_aggr(df_visit)  df_sim_sites <- sim_sites(df_site, df_visit, r = 100)  df_eval <- eval_sites(df_sim_sites)  plot_study(df_visit, df_site, df_eval, study = \"A\")  # }"},{"path":"https://openpharma.github.io/simaerep/reference/plot_visit_med75.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot patient visits against visit_med75. — plot_visit_med75","title":"Plot patient visits against visit_med75. — plot_visit_med75","text":"Plots cumulative AEs visits patients sites given study compares visit_med75.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot_visit_med75.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot patient visits against visit_med75. — plot_visit_med75","text":"","code":"plot_visit_med75(   df_visit,   df_site = NULL,   study_id_str,   n_sites = 6,   min_pat_pool = 0.2,   verbose = TRUE )"},{"path":"https://openpharma.github.io/simaerep/reference/plot_visit_med75.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot patient visits against visit_med75. — plot_visit_med75","text":"df_visit dataframe df_site dataframe, returned site_aggr() study_id_str character, specify study study_id column n_sites integer, Default: 6 min_pat_pool double, minimum ratio available patients available sampling. Determines maximum visit_med75 value see Details. Default: 0.2 verbose logical, Default: TRUE","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot_visit_med75.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot patient visits against visit_med75. — plot_visit_med75","text":"ggplot","code":""},{"path":"https://openpharma.github.io/simaerep/reference/plot_visit_med75.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot patient visits against visit_med75. — plot_visit_med75","text":"","code":"df_visit <- sim_test_data_study(n_pat = 120, n_sites = 6,     frac_site_with_ur = 0.4, ur_rate = 0.6)  df_visit$study_id <- \"A\" df_site <- site_aggr(df_visit)  plot_visit_med75(df_visit, df_site, study_id_str = \"A\", n_site = 6) #> purple line:          mean site ae of patients with visit_med75 #> grey line:            patient included #> black dashed line:    patient excluded #> dotted vertical line: visit_med75, 0.75 x median of maximum patient visits of site  #> solid vertical line:  visit_med75 adjusted, increased to minimum maximum patient visit of included patients #> dashed vertical line: maximum value for visit_med75 adjusted, 80% quantile of maximum patient visits of study #>"},{"path":"https://openpharma.github.io/simaerep/reference/poiss_test_site_ae_vs_study_ae.html","id":null,"dir":"Reference","previous_headings":"","what":"Poisson test for vector with site AEs vs vector with study AEs. — poiss_test_site_ae_vs_study_ae","title":"Poisson test for vector with site AEs vs vector with study AEs. — poiss_test_site_ae_vs_study_ae","text":"Internal function used sim_sites().","code":""},{"path":"https://openpharma.github.io/simaerep/reference/poiss_test_site_ae_vs_study_ae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Poisson test for vector with site AEs vs vector with study AEs. — poiss_test_site_ae_vs_study_ae","text":"","code":"poiss_test_site_ae_vs_study_ae(site_ae, study_ae, visit_med75)"},{"path":"https://openpharma.github.io/simaerep/reference/poiss_test_site_ae_vs_study_ae.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Poisson test for vector with site AEs vs vector with study AEs. — poiss_test_site_ae_vs_study_ae","text":"site_ae vector AE numbers study_ae vector AE numbers visit_med75 integer","code":""},{"path":"https://openpharma.github.io/simaerep/reference/poiss_test_site_ae_vs_study_ae.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Poisson test for vector with site AEs vs vector with study AEs. — poiss_test_site_ae_vs_study_ae","text":"pval","code":""},{"path":"https://openpharma.github.io/simaerep/reference/poiss_test_site_ae_vs_study_ae.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Poisson test for vector with site AEs vs vector with study AEs. — poiss_test_site_ae_vs_study_ae","text":"sets pvalue=1 mean AE site greater mean AE study ttest gives error","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/reference/poiss_test_site_ae_vs_study_ae.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Poisson test for vector with site AEs vs vector with study AEs. — poiss_test_site_ae_vs_study_ae","text":"","code":"poiss_test_site_ae_vs_study_ae(    site_ae = c(5, 3, 3, 2, 1, 6),    study_ae = c(9, 8, 7, 9, 6, 7, 8),    visit_med75 = 10 ) #> [1] 0.0009782833  poiss_test_site_ae_vs_study_ae(    site_ae = c(11, 9, 8, 6, 3),    study_ae = c(9, 8, 7, 9, 6, 7, 8),    visit_med75 = 10 ) #> [1] 0.9154536"},{"path":"https://openpharma.github.io/simaerep/reference/prep_for_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for simulation. — prep_for_sim","title":"Prepare data for simulation. — prep_for_sim","text":"Internal function called sim_sites. Collect AEs per patient visit_med75 site study vector integers.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/prep_for_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for simulation. — prep_for_sim","text":"","code":"prep_for_sim(df_site, df_visit)"},{"path":"https://openpharma.github.io/simaerep/reference/prep_for_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for simulation. — prep_for_sim","text":"df_site dataframe created site_aggr df_visit dataframe, created sim_sites","code":""},{"path":"https://openpharma.github.io/simaerep/reference/prep_for_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for simulation. — prep_for_sim","text":"dataframe","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/reference/prep_for_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data for simulation. — prep_for_sim","text":"","code":"df_visit <- sim_test_data_study(    n_pat = 100,    n_sites = 5,    frac_site_with_ur = 0.4,    ur_rate = 0.2 )  df_visit$study_id <- \"A\"  df_site <- site_aggr(df_visit)  df_prep <- prep_for_sim(df_site, df_visit) df_prep #> # A tibble: 5 × 7 #>   study_id site_number n_pat n_pat_with_med75 visit_med75 n_ae_site  n_ae_study #>   <chr>    <chr>       <int>            <dbl>       <dbl> <list>     <list>     #> 1 A        S0001          20               18          15 <int [18]> <int [71]> #> 2 A        S0002          20               16          16 <int [16]> <int [64]> #> 3 A        S0003          20               19          15 <int [19]> <int [70]> #> 4 A        S0004          20               18          14 <int [18]> <int [73]> #> 5 A        S0005          20               17          15 <int [17]> <int [72]>"},{"path":"https://openpharma.github.io/simaerep/reference/prob_lower_site_ae_vs_study_ae.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate bootstrapped probability for obtaining a lower site mean AE number. — prob_lower_site_ae_vs_study_ae","title":"Calculate bootstrapped probability for obtaining a lower site mean AE number. — prob_lower_site_ae_vs_study_ae","text":"Internal function used sim_sites()","code":""},{"path":"https://openpharma.github.io/simaerep/reference/prob_lower_site_ae_vs_study_ae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate bootstrapped probability for obtaining a lower site mean AE number. — prob_lower_site_ae_vs_study_ae","text":"","code":"prob_lower_site_ae_vs_study_ae(   site_ae,   study_ae,   r = 1000,   parallel = FALSE,   under_only = TRUE )"},{"path":"https://openpharma.github.io/simaerep/reference/prob_lower_site_ae_vs_study_ae.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate bootstrapped probability for obtaining a lower site mean AE number. — prob_lower_site_ae_vs_study_ae","text":"site_ae vector AE numbers study_ae vector AE numbers r integer, denotes number simulations, default = 1000 parallel logical, toggles parallel processing , default = F under_only compute -reporting probabilities , default = TRUE","code":""},{"path":"https://openpharma.github.io/simaerep/reference/prob_lower_site_ae_vs_study_ae.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate bootstrapped probability for obtaining a lower site mean AE number. — prob_lower_site_ae_vs_study_ae","text":"pval","code":""},{"path":"https://openpharma.github.io/simaerep/reference/prob_lower_site_ae_vs_study_ae.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate bootstrapped probability for obtaining a lower site mean AE number. — prob_lower_site_ae_vs_study_ae","text":"sets pvalue=1 mean AE site greater mean AE study","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/reference/prob_lower_site_ae_vs_study_ae.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate bootstrapped probability for obtaining a lower site mean AE number. — prob_lower_site_ae_vs_study_ae","text":"","code":"prob_lower_site_ae_vs_study_ae(   site_ae = c(5, 3, 3, 2, 1, 6),   study_ae = c(9, 8, 7, 9, 6, 7, 8),   parallel = FALSE ) #> [1] 0.011"},{"path":"https://openpharma.github.io/simaerep/reference/prune_to_visit_med75_inframe.html","id":null,"dir":"Reference","previous_headings":"","what":"prune visits to visit_med75 using table operations — prune_to_visit_med75_inframe","title":"prune visits to visit_med75 using table operations — prune_to_visit_med75_inframe","text":"prune visits visit_med75 using table operations","code":""},{"path":"https://openpharma.github.io/simaerep/reference/prune_to_visit_med75_inframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prune visits to visit_med75 using table operations — prune_to_visit_med75_inframe","text":"","code":"prune_to_visit_med75_inframe(df_visit, df_site)"},{"path":"https://openpharma.github.io/simaerep/reference/prune_to_visit_med75_inframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prune visits to visit_med75 using table operations — prune_to_visit_med75_inframe","text":"df_visit Data frame columns: study_id, site_number, patnum, visit, n_ae. df_site dataframe, returned site_aggr()","code":""},{"path":"https://openpharma.github.io/simaerep/reference/purrr_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a purrr or furrr function with a progress bar. — purrr_bar","title":"Execute a purrr or furrr function with a progress bar. — purrr_bar","text":"Internal utility function.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/purrr_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a purrr or furrr function with a progress bar. — purrr_bar","text":"","code":"purrr_bar(   ...,   .purrr,   .f,   .f_args = list(),   .purrr_args = list(),   .steps,   .slow = FALSE,   .progress = TRUE )"},{"path":"https://openpharma.github.io/simaerep/reference/purrr_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a purrr or furrr function with a progress bar. — purrr_bar","text":"... iterable arguments passed .purrr .purrr purrr furrr function .f function executed iterables .f_args list arguments passed .f, Default: list() .purrr_args list arguments passed .purrr, Default: list() .steps integer number iterations .slow logical slows execution, Default: FALSE .progress logical, show progress bar, Default: TRUE","code":""},{"path":"https://openpharma.github.io/simaerep/reference/purrr_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a purrr or furrr function with a progress bar. — purrr_bar","text":"result function passed .f","code":""},{"path":"https://openpharma.github.io/simaerep/reference/purrr_bar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute a purrr or furrr function with a progress bar. — purrr_bar","text":"Call still needs wrapped with_progress with_progress_cnd()","code":""},{"path":"https://openpharma.github.io/simaerep/reference/purrr_bar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute a purrr or furrr function with a progress bar. — purrr_bar","text":"","code":"# purrr::map progressr::with_progress(   purrr_bar(rep(0.25, 5), .purrr = purrr::map, .f = Sys.sleep, .steps = 5) ) #> [[1]] #> NULL #>  #> [[2]] #> NULL #>  #> [[3]] #> NULL #>  #> [[4]] #> NULL #>  #> [[5]] #> NULL #>   # \\donttest{ # purrr::walk progressr::with_progress(  purrr_bar(rep(0.25, 5), .purrr = purrr::walk,.f = Sys.sleep, .steps = 5) )  # progress bar off progressr::with_progress(   purrr_bar(     rep(0.25, 5), .purrr = purrr::walk,.f = Sys.sleep, .steps = 5, .progress = FALSE   ) )  # purrr::map2 progressr::with_progress(   purrr_bar(     rep(1, 5), rep(2, 5),     .purrr = purrr::map2,     .f = `+`,     .steps = 5,     .slow = TRUE  ) ) #> [[1]] #> [1] 3 #>  #> [[2]] #> [1] 3 #>  #> [[3]] #> [1] 3 #>  #> [[4]] #> [1] 3 #>  #> [[5]] #> [1] 3 #>   # purrr::pmap progressr::with_progress(   purrr_bar(     list(rep(1, 5), rep(2, 5)),     .purrr = purrr::pmap,     .f = `+`,     .steps = 5,     .slow = TRUE  ) ) #> [[1]] #> [1] 3 #>  #> [[2]] #> [1] 3 #>  #> [[3]] #> [1] 3 #>  #> [[4]] #> [1] 3 #>  #> [[5]] #> [1] 3 #>   # define function within purr_bar() call progressr::with_progress(   purrr_bar(     list(rep(1, 5), rep(2, 5)),     .purrr = purrr::pmap,     .f = function(x, y) {       paste0(x, y)     },     .steps = 5,     .slow = TRUE  ) ) #> [[1]] #> [1] \"12\" #>  #> [[2]] #> [1] \"12\" #>  #> [[3]] #> [1] \"12\" #>  #> [[4]] #> [1] \"12\" #>  #> [[5]] #> [1] \"12\" #>   # with mutate progressr::with_progress(  tibble::tibble(x = rep(0.25, 5)) %>%   dplyr::mutate(x = purrr_bar(x, .purrr = purrr::map, .f = Sys.sleep, .steps = 5)) ) #> # A tibble: 5 × 1 #>   x      #>   <list> #> 1 <NULL> #> 2 <NULL> #> 3 <NULL> #> 4 <NULL> #> 5 <NULL> # }"},{"path":"https://openpharma.github.io/simaerep/reference/sim_after_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Start simulation after preparation. — sim_after_prep","title":"Start simulation after preparation. — sim_after_prep","text":"Internal function called sim_sites prep_for_sim","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_after_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start simulation after preparation. — sim_after_prep","text":"","code":"sim_after_prep(   df_sim_prep,   r = 1000,   poisson_test = FALSE,   prob_lower = TRUE,   progress = FALSE,   under_only = TRUE )"},{"path":"https://openpharma.github.io/simaerep/reference/sim_after_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start simulation after preparation. — sim_after_prep","text":"df_sim_prep dataframe returned prep_for_sim r integer, denotes number simulations, default = 1000 poisson_test logical, calculates poisson.test pvalue prob_lower logical, calculates probability getting lower value progress logical, display progress bar, Default = TRUE under_only compute -reporting probabilities , default = TRUE check_df_visit(), computationally expensive large data sets. Default: TRUE","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_after_prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start simulation after preparation. — sim_after_prep","text":"dataframe","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/reference/sim_after_prep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start simulation after preparation. — sim_after_prep","text":"","code":"df_visit <- sim_test_data_study(    n_pat = 100,    n_sites = 5,    frac_site_with_ur = 0.4,    ur_rate = 0.2 )  df_visit$study_id <- \"A\"  df_site <- site_aggr(df_visit)  df_prep <- prep_for_sim(df_site, df_visit)  df_sim <- sim_after_prep(df_prep)  df_sim #> # A tibble: 5 × 9 #>   study_id site_number n_pat n_pat_with_med75 visit_med75 mean_ae_site_med75 #>   <chr>    <chr>       <int>            <dbl>       <dbl>              <dbl> #> 1 A        S0001          20               20          15               6.1  #> 2 A        S0002          20               17          16               6.53 #> 3 A        S0003          20               17          16               8.35 #> 4 A        S0004          20               20          15               6.55 #> 5 A        S0005          20               16          15               7.62 #> # ℹ 3 more variables: mean_ae_study_med75 <dbl>, n_pat_with_med75_study <int>, #> #   prob_low <dbl>"},{"path":"https://openpharma.github.io/simaerep/reference/sim_inframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate prob_lower for study sites using table operations — sim_inframe","title":"Calculate prob_lower for study sites using table operations — sim_inframe","text":"Calculate prob_lower study sites using table operations","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_inframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate prob_lower for study sites using table operations — sim_inframe","text":"","code":"sim_inframe(df_visit, r = 1000, df_site = NULL)"},{"path":"https://openpharma.github.io/simaerep/reference/sim_inframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate prob_lower for study sites using table operations — sim_inframe","text":"df_visit Data frame columns: study_id, site_number, patnum, visit, n_ae. r Integer tbl_object, number repetitions bootstrap simulation. Pass tbl object referring table one column many rows desired repetitions. Default: 1000. df_site, dataframe returned site_aggr(), switch visit_med75. Default: NULL","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_inframe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate prob_lower for study sites using table operations — sim_inframe","text":"","code":"df_visit <- sim_test_data_study(   n_pat = 100,   n_sites = 5,   frac_site_with_ur = 0.4,   ur_rate = 0.6 ) df_visit$study_id <- \"A\"  df_sim <- sim_inframe(df_visit) df_eval <- eval_sites(df_sim) df_eval #> # A tibble: 5 × 10 #>   study_id site_number events_per_visit_site events visits n_pat prob_low #>   <chr>    <chr>                       <dbl>  <dbl>  <dbl> <int>    <dbl> #> 1 A        S0001                       0.188     75    400    20    0     #> 2 A        S0002                       0.186     75    403    20    0     #> 3 A        S0003                       0.496    187    377    20    0.998 #> 4 A        S0004                       0.453    180    397    20    0.98  #> 5 A        S0005                       0.492    187    380    20    0.998 #> # ℹ 3 more variables: events_per_visit_study <dbl>, prob_low_adj <dbl>, #> #   prob_low_prob_ur <dbl>"},{"path":"https://openpharma.github.io/simaerep/reference/sim_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"simulate single scenario — sim_scenario","title":"simulate single scenario — sim_scenario","text":"internal function called simulate_scenarios()","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulate single scenario — sim_scenario","text":"","code":"sim_scenario(n_ae_site, n_ae_study, frac_pat_with_ur, ur_rate)"},{"path":"https://openpharma.github.io/simaerep/reference/sim_scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulate single scenario — sim_scenario","text":"n_ae_site integer vector n_ae_study integer vector frac_pat_with_ur double ur_rate double","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"simulate single scenario — sim_scenario","text":"list","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_scenario.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"simulate single scenario — sim_scenario","text":"","code":"sim_scenario(c(5,5,5,5), c(8,8,8,8), 0.2, 0.5) #> $n_ae_site #> [1] 2.5 2.5 5.0 5.0 #>  #> $n_ae_study #> [1] 8 8 8 8 #>  sim_scenario(c(5,5,5,5), c(8,8,8,8), 0.75, 0.5) #> $n_ae_site #> [1] 2.5 2.5 2.5 2.5 #>  #> $n_ae_study #> [1] 4 4 8 8 #>  sim_scenario(c(5,5,5,5), c(8,8,8,8), 1, 0.5) #> $n_ae_site #> [1] 2.5 2.5 2.5 2.5 #>  #> $n_ae_study #> [1] 4 4 4 4 #>  sim_scenario(c(5,5,5,5), c(8,8,8,8), 1, 1) #> $n_ae_site #> [1] 0 0 0 0 #>  #> $n_ae_study #> [1] 0 0 0 0 #>  sim_scenario(c(5,5,5,5), c(8,8,8,8), 0, 0.5) #> $n_ae_site #> [1] 5 5 5 5 #>  #> $n_ae_study #> [1] 8 8 8 8 #>  sim_scenario(c(5,5,5,5), c(8,8,8,8), 2, 0.5) #> $n_ae_site #> [1] 2.5 2.5 2.5 2.5 #>  #> $n_ae_study #> [1] 4 4 4 4 #>"},{"path":"https://openpharma.github.io/simaerep/reference/sim_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate prob_lower and poisson.test pvalue for study sites. — sim_sites","title":"Calculate prob_lower and poisson.test pvalue for study sites. — sim_sites","text":"Collects number AEs eligible patients meet visit_med75 criteria site.  calculates poisson.test pvalue bootstrapped probability lower mean value.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate prob_lower and poisson.test pvalue for study sites. — sim_sites","text":"","code":"sim_sites(   df_site,   df_visit,   r = 1000,   poisson_test = TRUE,   prob_lower = TRUE,   progress = TRUE,   check = TRUE,   under_only = TRUE )"},{"path":"https://openpharma.github.io/simaerep/reference/sim_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate prob_lower and poisson.test pvalue for study sites. — sim_sites","text":"df_site dataframe created site_aggr df_visit dataframe, created sim_sites r integer, denotes number simulations, default = 1000 poisson_test logical, calculates poisson.test pvalue prob_lower logical, calculates probability getting lower value progress logical, display progress bar, Default = TRUE check, logical, perform data check attempt repair under_only compute -reporting probabilities , default = TRUE check_df_visit(), computationally expensive large data sets. Default: TRUE","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate prob_lower and poisson.test pvalue for study sites. — sim_sites","text":"dataframe following columns: study_id study identification site_number site identification n_pat number patients site visit_med75 median(max(visit)) * 0.75 n_pat_with_med75 number patients site med75 mean_ae_site_med75 mean AE visit_med75 site level mean_ae_study_med75 mean AE visit_med75 study level n_pat_with_med75_study number patients study med75 excl. site pval p-value returned poisson.test prob_low bootstrapped probability mean_ae_site_med75 lower","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/reference/sim_sites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate prob_lower and poisson.test pvalue for study sites. — sim_sites","text":"","code":"df_visit <- sim_test_data_study(    n_pat = 100,    n_sites = 5,    frac_site_with_ur = 0.4,    ur_rate = 0.2 )  df_visit$study_id <- \"A\"  df_site <- site_aggr(df_visit)  df_sim_sites <- sim_sites(df_site, df_visit, r = 100)  df_sim_sites %>%  knitr::kable(digits = 2) #>  #>  #> |study_id |site_number | n_pat| n_pat_with_med75| visit_med75| mean_ae_site_med75| mean_ae_study_med75| n_pat_with_med75_study| pval| prob_low| #> |:--------|:-----------|-----:|----------------:|-----------:|------------------:|-------------------:|----------------------:|----:|--------:| #> |A        |S0001       |    20|               20|          15|               6.35|                6.31|                     71| 1.00|     1.00| #> |A        |S0002       |    20|               19|          15|               5.37|                6.57|                     72| 0.06|     0.06| #> |A        |S0003       |    20|               18|          15|               7.11|                6.12|                     73| 1.00|     1.00| #> |A        |S0004       |    20|               15|          17|               7.87|                7.03|                     61| 1.00|     1.00| #> |A        |S0005       |    20|               19|          15|               6.37|                6.31|                     72| 1.00|     1.00|"},{"path":"https://openpharma.github.io/simaerep/reference/sim_studies.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate studies. — sim_studies","title":"Simulate studies. — sim_studies","text":"Test function, test applicability poisson test, calculating bootstrapped probability obtaining specific p-value lower, use combination get_ecd_values().","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_studies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate studies. — sim_studies","text":"","code":"sim_studies(   df_visit,   df_site,   r = 100,   poisson_test = TRUE,   prob_lower = TRUE,   r_prob_lower = 1000,   under_only = TRUE,   parallel = FALSE,   keep_ae = FALSE,   min_n_pat_with_med75 = 1,   studies = NULL,   .progress = TRUE )"},{"path":"https://openpharma.github.io/simaerep/reference/sim_studies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate studies. — sim_studies","text":"df_visit dataframe df_site dataframe r integer, denotes number simulations, Default: 1000 poisson_test logical, calculates poisson.test pvalue, Default: TRUE prob_lower logical, calculates probability getting lower value, Default: FALSE r_prob_lower integer, denotes number simulations prob_lower value calculation,, Default: 1000 under_only compute -reporting probabilities , default = TRUE parallel logical, see examples registering parallel processing framework , Default: FALSE keep_ae logical, keep ae numbers output dataframe memory increase roughly 30 percent, Default: F min_n_pat_with_med75 integer, min number patients med75 site simulate, Default: 1 studies vector study names, Default: NULL .progress logical, show progress bar","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_studies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate studies. — sim_studies","text":"dataframe","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_studies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate studies. — sim_studies","text":"simulate study replicates maintaining number sites, patients visit_med75 bootstrap resampling, probabilities obtaining lower mean_ae count p-values using poisson.test calculated. adds column simulated probabilities equal lower mean_ae visit_med75","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_studies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate studies. — sim_studies","text":"","code":"# \\donttest{ df_visit1 <- sim_test_data_study(n_pat = 100, n_sites = 5,                                       frac_site_with_ur = 0.4, ur_rate = 0.6)  df_visit1$study_id <- \"A\"  df_visit2 <- sim_test_data_study(n_pat = 1000, n_sites = 3,                                       frac_site_with_ur = 0.2, ur_rate = 0.1)  df_visit2$study_id <- \"B\"  df_visit <- dplyr::bind_rows(df_visit1, df_visit2)  df_site <- site_aggr(df_visit)  sim_studies(df_visit, df_site, r = 3, keep_ae = TRUE) #> # A tibble: 24 × 10 #>        r study_id site_number visit_med75 n_pat_with_med75 n_pat_study n_ae_site #>    <dbl> <chr>    <chr>             <dbl>            <dbl>       <dbl> <chr>     #>  1     1 A        S0001                16               18          68 11,5,7,4… #>  2     1 A        S0002                18               17          53 11,16,8,… #>  3     1 A        S0003                17               18          62 13,11,13… #>  4     1 A        S0004                14               18          74 7,9,7,6,… #>  5     1 A        S0005                15               17          71 6,9,5,4,… #>  6     1 B        S0001                15              297         597 10,13,11… #>  7     1 B        S0002                15              296         598 3,10,4,6… #>  8     1 B        S0003                15              301         593 3,6,7,10… #>  9     2 A        S0001                16               18          68 10,5,7,3… #> 10     2 A        S0002                18               17          53 5,17,8,6… #> # ℹ 14 more rows #> # ℹ 3 more variables: n_ae_study <chr>, pval <dbl>, prob_low <dbl> # } if (FALSE) { # \\dontrun{ # parallel processing ------------------------- library(future) future::plan(multiprocess) sim_studies(df_visit, df_site, r = 3, keep_ae = TRUE, parallel = TRUE) future::plan(sequential) } # }"},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_patient.html","id":null,"dir":"Reference","previous_headings":"","what":"simulate patient ae reporting test data — sim_test_data_patient","title":"simulate patient ae reporting test data — sim_test_data_patient","text":"helper function sim_test_data_study()","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_patient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulate patient ae reporting test data — sim_test_data_patient","text":"","code":"sim_test_data_patient(   .f_sample_max_visit = function() rnorm(1, mean = 20, sd = 4),   .f_sample_ae_per_visit = function(max_visit) rpois(max_visit, 0.5) )"},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_patient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulate patient ae reporting test data — sim_test_data_patient","text":".f_sample_max_visit function used sample maximum number aes, Default: function() rnorm(1, mean = 20, sd = 4) .f_sample_ae_per_visit function used sample aes visit, Default: function(x) rpois(x, 0.5)","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_patient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"simulate patient ae reporting test data — sim_test_data_patient","text":"vector containing cumulative aes","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_patient.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"simulate patient ae reporting test data — sim_test_data_patient","text":"\"\"","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_patient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"simulate patient ae reporting test data — sim_test_data_patient","text":"","code":"replicate(5, sim_test_data_patient()) #> [[1]] #>  [1]  1  2  3  3  4  4  4  4  4  4  5  5  5  7  8  9 10 10 11 11 12 14 14 #>  #> [[2]] #>  [1]  2  2  3  4  5  5  5  6  6  6  7  7  8  9  9 11 11 11 11 11 11 11 12 12 #>  #> [[3]] #>  [1]  2  4  5  7  7  8  9 11 11 11 12 12 13 14 14 15 15 15 15 15 15 #>  #> [[4]] #>  [1] 0 0 1 2 3 3 3 3 4 5 5 5 5 5 #>  #> [[5]] #>  [1]  1  1  1  1  1  1  2  2  4  4  4  4  6  6  7  7  7  8  9 11 12 12 #>  replicate(5, sim_test_data_patient(     .f_sample_ae_per_visit = function(x) rpois(x, 1.2))   ) #> [[1]] #>  [1]  1  3  3  5  6  6  6  6  8  8  9 13 15 15 16 16 #>  #> [[2]] #>  [1]  2  3  4  4  4  8  9  9 11 11 11 13 15 16 16 18 22 23 23 24 25 #>  #> [[3]] #>  [1]  2  2  3  3  3  3  5  8  9 11 13 14 16 16 17 19 21 23 23 23 24 #>  #> [[4]] #>  [1]  2  4  5  5  9  9 10 11 12 16 16 20 21 22 24 25 27 29 31 34 36 37 41 41 45 #> [26] 47 #>  #> [[5]] #>  [1]  0  1  1  2  3  3  3  4  4  5  5  5  5  7  9 11 13 15 16 16 16 17 #>  replicate(5, sim_test_data_patient(     .f_sample_max_visit = function() rnorm(1, mean = 5, sd = 5))   ) #> [[1]] #> [1] 0 2 2 4 4 4 #>  #> [[2]] #> [1] 1 #>  #> [[3]] #> [1] 0 0 0 #>  #> [[4]] #>  [1] 3 3 3 3 4 4 4 4 4 4 #>  #> [[5]] #>  [1] 1 1 2 3 3 3 3 3 3 3 3 4 4 4 4 4 6 #>"},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_portfolio.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Portfolio Test Data — sim_test_data_portfolio","title":"Simulate Portfolio Test Data — sim_test_data_portfolio","text":"Simulate visit level data portfolio configuration.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_portfolio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Portfolio Test Data — sim_test_data_portfolio","text":"","code":"sim_test_data_portfolio(   df_config,   df_ae_rates = NULL,   parallel = FALSE,   progress = TRUE )"},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_portfolio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Portfolio Test Data — sim_test_data_portfolio","text":"df_config dataframe returned get_config df_ae_rates dataframe ae rates. Default: NULL parallel logical activate parallel processing, see details, Default: FALSE progress logical, Default: TRUE","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_portfolio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Portfolio Test Data — sim_test_data_portfolio","text":"dataframe following columns: study_id study identification ae_per_visit_mean mean AE per visit per study site_number site max_visit_sd standard deviation maximum patient visits per site max_visit_mean mean maximum patient visits per site patnum number patients visit visit number n_ae cumulative sum AEs","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_portfolio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Portfolio Test Data — sim_test_data_portfolio","text":"uses sim_test_data_study. use furrr package implement parallel processing simulations can take long time run. work need specify plan code run, e.g. `plan(multisession, workers = 3)","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_portfolio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Portfolio Test Data — sim_test_data_portfolio","text":"","code":"# \\donttest{ df_visit1 <- sim_test_data_study(n_pat = 100, n_sites = 10,                                  frac_site_with_ur = 0.4, ur_rate = 0.6)  df_visit1$study_id <- \"A\"  df_visit2 <- sim_test_data_study(n_pat = 100, n_sites = 10,                                  frac_site_with_ur = 0.2, ur_rate = 0.1)  df_visit2$study_id <- \"B\"  df_visit <- dplyr::bind_rows(df_visit1, df_visit2)  df_site_max <- df_visit %>%   dplyr::group_by(study_id, site_number, patnum) %>%   dplyr::summarise(max_visit = max(visit),             max_ae = max(n_ae),             .groups = \"drop\")  df_config <- get_config(df_site_max)  df_config #> # A tibble: 20 × 6 #>    study_id ae_per_visit_mean site_number max_visit_sd max_visit_mean n_pat #>    <chr>                <dbl> <chr>              <dbl>          <dbl> <int> #>  1 0001                 0.355 0001                4.23           19.9    10 #>  2 0001                 0.355 0002                4.13           19.8    10 #>  3 0001                 0.355 0003                5.03           19.3    10 #>  4 0001                 0.355 0004                4.40           20      10 #>  5 0001                 0.355 0005                3.77           20.3    10 #>  6 0001                 0.355 0006                3.58           17.2    10 #>  7 0001                 0.355 0007                5.10           19.6    10 #>  8 0001                 0.355 0008                3.74           19.2    10 #>  9 0001                 0.355 0009                4.40           19.6    10 #> 10 0001                 0.355 0010                4.50           19.4    10 #> 11 0002                 0.505 0001                1.51           17.6    10 #> 12 0002                 0.505 0002                2.99           20.5    10 #> 13 0002                 0.505 0003                3.59           19.7    10 #> 14 0002                 0.505 0004                2.70           17.8    10 #> 15 0002                 0.505 0005                4.72           21.1    10 #> 16 0002                 0.505 0006                5.70           18.9    10 #> 17 0002                 0.505 0007                2.68           20.5    10 #> 18 0002                 0.505 0008                4.28           19.1    10 #> 19 0002                 0.505 0009                3.44           18.5    10 #> 20 0002                 0.505 0010                4.86           20.1    10  df_portf <- sim_test_data_portfolio(df_config)  df_portf #> # A tibble: 3,729 × 8 #>    study_id ae_per_visit_mean site_number max_visit_sd max_visit_mean patnum #>    <chr>                <dbl> <chr>              <dbl>          <dbl> <chr>  #>  1 0001                 0.355 0001                4.23           19.9 0001   #>  2 0001                 0.355 0001                4.23           19.9 0001   #>  3 0001                 0.355 0001                4.23           19.9 0001   #>  4 0001                 0.355 0001                4.23           19.9 0001   #>  5 0001                 0.355 0001                4.23           19.9 0001   #>  6 0001                 0.355 0001                4.23           19.9 0001   #>  7 0001                 0.355 0001                4.23           19.9 0001   #>  8 0001                 0.355 0001                4.23           19.9 0001   #>  9 0001                 0.355 0001                4.23           19.9 0001   #> 10 0001                 0.355 0001                4.23           19.9 0001   #> # ℹ 3,719 more rows #> # ℹ 2 more variables: visit <int>, n_ae <int>  df_scen <- sim_ur_scenarios(df_portf,                             extra_ur_sites = 2,                             ur_rate = c(0.5, 1)) #> aggregating site level #> prepping for simulation #> generating scenarios #> getting under-reporting stats #> evaluating stats   df_scen #> # A tibble: 140 × 14 #>    study_id site_number extra_ur_sites frac_pat_with_ur ur_rate n_pat #>    <chr>    <chr>                <dbl>            <dbl>   <dbl> <int> #>  1 0001     0001                     0            0         0      10 #>  2 0001     0001                     0            0.222     0.5    10 #>  3 0001     0001                     0            0.222     1      10 #>  4 0001     0001                     1            0.333     0.5    10 #>  5 0001     0001                     1            0.333     1      10 #>  6 0001     0001                     2            0.444     0.5    10 #>  7 0001     0001                     2            0.444     1      10 #>  8 0001     0002                     0            0         0      10 #>  9 0001     0002                     0            0.119     0.5    10 #> 10 0001     0002                     0            0.119     1      10 #> # ℹ 130 more rows #> # ℹ 8 more variables: n_pat_with_med75 <dbl>, visit_med75 <dbl>, #> #   mean_ae_site_med75 <dbl>, mean_ae_study_med75 <dbl>, #> #   n_pat_with_med75_study <int>, prob_low <dbl>, prob_low_adj <dbl>, #> #   prob_low_prob_ur <dbl>  df_perf <- get_portf_perf(df_scen)  df_perf #> # A tibble: 27 × 5 #>      fpr thresh extra_ur_sites ur_rate   tpr #>    <dbl>  <dbl>          <dbl>   <dbl> <dbl> #>  1 0.001  0.555              0     0     0.1 #>  2 0.001  0.555              1     0     0.1 #>  3 0.001  0.555              2     0     0.1 #>  4 0.001  0.555              0     0.5   1   #>  5 0.001  0.555              1     0.5   1   #>  6 0.001  0.555              2     0.5   0.9 #>  7 0.001  0.555              0     1     1   #>  8 0.001  0.555              1     1     1   #>  9 0.001  0.555              2     1     1   #> 10 0.01   0.555              0     0     0.1 #> # ℹ 17 more rows # }"},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_study.html","id":null,"dir":"Reference","previous_headings":"","what":"simulate study test data — sim_test_data_study","title":"simulate study test data — sim_test_data_study","text":"evenly distributes number given patients across number given sites. simulates ae development patient reducing number reported AEs patients distributed AE--reporting sites.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_study.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulate study test data — sim_test_data_study","text":"","code":"sim_test_data_study(   n_pat = 1000,   n_sites = 20,   frac_site_with_ur = 0,   ur_rate = 0,   max_visit_mean = 20,   max_visit_sd = 4,   ae_per_visit_mean = 0.5,   ae_rates = NULL )"},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_study.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulate study test data — sim_test_data_study","text":"n_pat integer, number patients, Default: 1000 n_sites integer, number sites, Default: 20 frac_site_with_ur fraction AE -reporting sites, Default: 0 ur_rate AE -reporting rate, lower mean ae per visit used simulate patients sites flagged AE--reporting. Negative Values simulate -reporting., Default: 0 max_visit_mean mean maximum number visits patient, Default: 20 max_visit_sd standard deviation maximum number visits patient, Default: 4 ae_per_visit_mean mean ae per visit per patient, Default: 0.5 ae_rates vector visit-specific ae rates, Default: Null","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_study.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"simulate study test data — sim_test_data_study","text":"tibble columns site_number, patnum, is_ur, max_visit_mean, max_visit_sd, ae_per_visit_mean, visit, n_ae","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_study.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"simulate study test data — sim_test_data_study","text":"maximum visit number sampled normal distribution characteristics derived max_visit_mean max_visit_sd, ae per visit sampled poisson distribution described ae_per_visit_mean.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_test_data_study.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"simulate study test data — sim_test_data_study","text":"","code":"set.seed(1) df_visit <- sim_test_data_study(n_pat = 100, n_sites = 5) df_visit[which(df_visit$patnum == \"P000001\"),] #> # A tibble: 17 × 8 #>    patnum  site_number is_ur max_visit_mean max_visit_sd ae_per_visit_mean visit #>    <chr>   <chr>       <lgl>          <dbl>        <dbl>             <dbl> <int> #>  1 P000001 S0001       FALSE             20            4               0.5     1 #>  2 P000001 S0001       FALSE             20            4               0.5     2 #>  3 P000001 S0001       FALSE             20            4               0.5     3 #>  4 P000001 S0001       FALSE             20            4               0.5     4 #>  5 P000001 S0001       FALSE             20            4               0.5     5 #>  6 P000001 S0001       FALSE             20            4               0.5     6 #>  7 P000001 S0001       FALSE             20            4               0.5     7 #>  8 P000001 S0001       FALSE             20            4               0.5     8 #>  9 P000001 S0001       FALSE             20            4               0.5     9 #> 10 P000001 S0001       FALSE             20            4               0.5    10 #> 11 P000001 S0001       FALSE             20            4               0.5    11 #> 12 P000001 S0001       FALSE             20            4               0.5    12 #> 13 P000001 S0001       FALSE             20            4               0.5    13 #> 14 P000001 S0001       FALSE             20            4               0.5    14 #> 15 P000001 S0001       FALSE             20            4               0.5    15 #> 16 P000001 S0001       FALSE             20            4               0.5    16 #> 17 P000001 S0001       FALSE             20            4               0.5    17 #> # ℹ 1 more variable: n_ae <int> df_visit <- sim_test_data_study(n_pat = 100, n_sites = 5,     frac_site_with_ur = 0.2, ur_rate = 0.5) df_visit[which(df_visit$patnum == \"P000001\"),] #> # A tibble: 23 × 8 #>    patnum  site_number is_ur max_visit_mean max_visit_sd ae_per_visit_mean visit #>    <chr>   <chr>       <lgl>          <dbl>        <dbl>             <dbl> <int> #>  1 P000001 S0001       TRUE              20            4              0.25     1 #>  2 P000001 S0001       TRUE              20            4              0.25     2 #>  3 P000001 S0001       TRUE              20            4              0.25     3 #>  4 P000001 S0001       TRUE              20            4              0.25     4 #>  5 P000001 S0001       TRUE              20            4              0.25     5 #>  6 P000001 S0001       TRUE              20            4              0.25     6 #>  7 P000001 S0001       TRUE              20            4              0.25     7 #>  8 P000001 S0001       TRUE              20            4              0.25     8 #>  9 P000001 S0001       TRUE              20            4              0.25     9 #> 10 P000001 S0001       TRUE              20            4              0.25    10 #> # ℹ 13 more rows #> # ℹ 1 more variable: n_ae <int> ae_rates <- c(0.7, rep(0.5, 8), rep(0.3, 5)) sim_test_data_study(n_pat = 100, n_sites = 5, ae_rates = ae_rates) #> # A tibble: 1,968 × 8 #>    patnum  site_number is_ur max_visit_mean max_visit_sd ae_per_visit_mean visit #>    <chr>   <chr>       <lgl>          <dbl>        <dbl>             <dbl> <int> #>  1 P000001 S0001       FALSE             20            4             0.443     1 #>  2 P000001 S0001       FALSE             20            4             0.443     2 #>  3 P000001 S0001       FALSE             20            4             0.443     3 #>  4 P000001 S0001       FALSE             20            4             0.443     4 #>  5 P000001 S0001       FALSE             20            4             0.443     5 #>  6 P000001 S0001       FALSE             20            4             0.443     6 #>  7 P000001 S0001       FALSE             20            4             0.443     7 #>  8 P000001 S0001       FALSE             20            4             0.443     8 #>  9 P000001 S0001       FALSE             20            4             0.443     9 #> 10 P000001 S0001       FALSE             20            4             0.443    10 #> # ℹ 1,958 more rows #> # ℹ 1 more variable: n_ae <int>"},{"path":"https://openpharma.github.io/simaerep/reference/sim_ur.html","id":null,"dir":"Reference","previous_headings":"","what":"simulate under-reporting — sim_ur","title":"simulate under-reporting — sim_ur","text":"remove fraction AEs specific site","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_ur.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulate under-reporting — sim_ur","text":"","code":"sim_ur(df_visit, study_id, site_number, ur_rate)"},{"path":"https://openpharma.github.io/simaerep/reference/sim_ur.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulate under-reporting — sim_ur","text":"df_visit, dataframe study_id, character site_number, character ur_rate, double","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_ur.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"simulate under-reporting — sim_ur","text":"determine absolute number AEs per patient removal. remove first visit. intentionally allow fractions","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_ur.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"simulate under-reporting — sim_ur","text":"","code":"df_visit <- sim_test_data_study(n_pat = 100, n_sites = 10,                                  frac_site_with_ur = 0.4, ur_rate = 0.6)  df_visit$study_id <- \"A\"  df_ur <- sim_ur(df_visit, \"A\", site_number = \"S0001\", ur_rate = 0.35)  # Example cumulated AE for first patient with 35% under-reporting df_ur[df_ur$site_number == \"S0001\" & df_ur$patnum == \"P000001\",]$n_ae #>  [1] 0.0 0.6 0.6 1.6 1.6 1.6 1.6 1.6 1.6 2.6 2.6 2.6 2.6 2.6 2.6 2.6 2.6  # Example cumulated AE for first patient with no under-reporting df_visit[df_visit$site_number == \"S0001\" & df_visit$patnum == \"P000001\",]$n_ae #>  [1] 1 2 2 3 3 3 3 3 3 4 4 4 4 4 4 4 4"},{"path":"https://openpharma.github.io/simaerep/reference/sim_ur_scenarios.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Under-Reporting Scenarios — sim_ur_scenarios","title":"Simulate Under-Reporting Scenarios — sim_ur_scenarios","text":"Use simulated portfolio data generate -reporting stats specified scenarios.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_ur_scenarios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Under-Reporting Scenarios — sim_ur_scenarios","text":"","code":"sim_ur_scenarios(   df_portf,   extra_ur_sites = 3,   ur_rate = c(0.25, 0.5),   r = 1000,   poisson_test = FALSE,   prob_lower = TRUE,   parallel = FALSE,   progress = TRUE,   site_aggr_args = list(),   eval_sites_args = list(),   check = TRUE )"},{"path":"https://openpharma.github.io/simaerep/reference/sim_ur_scenarios.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Under-Reporting Scenarios — sim_ur_scenarios","text":"df_portf dataframe returned sim_test_data_portfolio extra_ur_sites numeric, set maximum number additional -reporting sites, see details Default: 3 ur_rate numeric vector, set -reporting rates scenarios Default: c(0.25, 0.5) r integer, denotes number simulations, default = 1000 poisson_test logical, calculates poisson.test pvalue prob_lower logical, calculates probability getting lower value parallel logical, use parallel processing see details, Default: FALSE progress logical, show progress bar, Default: TRUE site_aggr_args named list parameters passed site_aggr, Default: list() eval_sites_args named list parameters passed eval_sites, Default: list() check logical, perform data check attempt repair ","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_ur_scenarios.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Under-Reporting Scenarios — sim_ur_scenarios","text":"dataframe following columns: study_id study identification site_number site identification n_pat number patients site n_pat_with_med75 number patients site visit_med75 visit_med75 median(max(visit)) * 0.75 mean_ae_site_med75 mean AE visit_med75 site level mean_ae_study_med75 mean AE visit_med75 study level n_pat_with_med75_study number patients site visit_med75 study excl site extra_ur_sites additional sites -reporting patients frac_pat_with_ur ratio patients study -reporting ur_rate -reporting rate pval p-value returned poisson.test prob_low bootstrapped probability mean_ae_site_med75 lower pval_adj adjusted p-values prob_low_adj adjusted bootstrapped probability mean_ae_site_med75 lower pval_prob_ur probability -reporting 1 - pval_adj, poisson.test (use benchmark) prob_low_prob_ur probability -reporting 1 - prob_low_adj, bootstrapped (use)","code":""},{"path":"https://openpharma.github.io/simaerep/reference/sim_ur_scenarios.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Under-Reporting Scenarios — sim_ur_scenarios","text":"function apply -reporting scenarios site. Reducing number AEs given -reporting (ur_rate) patients site add corresponding -reporting statistics. Since -reporting probability also affected number sites -reporting additionally calculate -reporting statistics scenario additional reporting sites present. use median number patients per site study calculate final number patients lower AEs given -reporting scenario. use furrr package implement parallel processing simulations can take long time run. work need specify plan code run, e.g. plan(multisession, workers = 18)","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/reference/sim_ur_scenarios.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Under-Reporting Scenarios — sim_ur_scenarios","text":"","code":"# \\donttest{ df_visit1 <- sim_test_data_study(n_pat = 100, n_sites = 10,                                  frac_site_with_ur = 0.4, ur_rate = 0.6)  df_visit1$study_id <- \"A\"  df_visit2 <- sim_test_data_study(n_pat = 100, n_sites = 10,                                  frac_site_with_ur = 0.2, ur_rate = 0.1)  df_visit2$study_id <- \"B\"  df_visit <- dplyr::bind_rows(df_visit1, df_visit2)  df_site_max <- df_visit %>%   dplyr::group_by(study_id, site_number, patnum) %>%   dplyr::summarise(max_visit = max(visit),             max_ae = max(n_ae),             .groups = \"drop\")  df_config <- get_config(df_site_max)  df_config #> # A tibble: 20 × 6 #>    study_id ae_per_visit_mean site_number max_visit_sd max_visit_mean n_pat #>    <chr>                <dbl> <chr>              <dbl>          <dbl> <int> #>  1 0001                 0.381 0001                2.85           19.9    10 #>  2 0001                 0.381 0002                3.31           18.1    10 #>  3 0001                 0.381 0003                3.14           18.1    10 #>  4 0001                 0.381 0004                4.74           20.7    10 #>  5 0001                 0.381 0005                5.20           19.2    10 #>  6 0001                 0.381 0006                3.30           21      10 #>  7 0001                 0.381 0007                4.07           19.9    10 #>  8 0001                 0.381 0008                4.53           18.5    10 #>  9 0001                 0.381 0009                2.95           21.7    10 #> 10 0001                 0.381 0010                3.36           20.2    10 #> 11 0002                 0.491 0001                3.03           20.9    10 #> 12 0002                 0.491 0002                2.44           18.8    10 #> 13 0002                 0.491 0003                3.62           20.3    10 #> 14 0002                 0.491 0004                3.79           19.8    10 #> 15 0002                 0.491 0005                4.19           19.3    10 #> 16 0002                 0.491 0006                5.34           18.5    10 #> 17 0002                 0.491 0007                4.23           18.9    10 #> 18 0002                 0.491 0008                3.28           18.9    10 #> 19 0002                 0.491 0009                5.33           18      10 #> 20 0002                 0.491 0010                3.48           19.1    10  df_portf <- sim_test_data_portfolio(df_config)  df_portf #> # A tibble: 3,746 × 8 #>    study_id ae_per_visit_mean site_number max_visit_sd max_visit_mean patnum #>    <chr>                <dbl> <chr>              <dbl>          <dbl> <chr>  #>  1 0001                 0.381 0001                2.85           19.9 0001   #>  2 0001                 0.381 0001                2.85           19.9 0001   #>  3 0001                 0.381 0001                2.85           19.9 0001   #>  4 0001                 0.381 0001                2.85           19.9 0001   #>  5 0001                 0.381 0001                2.85           19.9 0001   #>  6 0001                 0.381 0001                2.85           19.9 0001   #>  7 0001                 0.381 0001                2.85           19.9 0001   #>  8 0001                 0.381 0001                2.85           19.9 0001   #>  9 0001                 0.381 0001                2.85           19.9 0001   #> 10 0001                 0.381 0001                2.85           19.9 0001   #> # ℹ 3,736 more rows #> # ℹ 2 more variables: visit <int>, n_ae <int>  df_scen <- sim_ur_scenarios(df_portf,                             extra_ur_sites = 2,                             ur_rate = c(0.5, 1)) #> aggregating site level #> prepping for simulation #> generating scenarios #> getting under-reporting stats #> evaluating stats   df_scen #> # A tibble: 140 × 14 #>    study_id site_number extra_ur_sites frac_pat_with_ur ur_rate n_pat #>    <chr>    <chr>                <dbl>            <dbl>   <dbl> <int> #>  1 0001     0001                     0            0         0      10 #>  2 0001     0001                     0            0.122     0.5    10 #>  3 0001     0001                     0            0.122     1      10 #>  4 0001     0001                     1            0.222     0.5    10 #>  5 0001     0001                     1            0.222     1      10 #>  6 0001     0001                     2            0.322     0.5    10 #>  7 0001     0001                     2            0.322     1      10 #>  8 0001     0002                     0            0         0      10 #>  9 0001     0002                     0            0.104     0.5    10 #> 10 0001     0002                     0            0.104     1      10 #> # ℹ 130 more rows #> # ℹ 8 more variables: n_pat_with_med75 <dbl>, visit_med75 <dbl>, #> #   mean_ae_site_med75 <dbl>, mean_ae_study_med75 <dbl>, #> #   n_pat_with_med75_study <int>, prob_low <dbl>, prob_low_adj <dbl>, #> #   prob_low_prob_ur <dbl>  df_perf <- get_portf_perf(df_scen)  df_perf #> # A tibble: 27 × 5 #>      fpr thresh extra_ur_sites ur_rate   tpr #>    <dbl>  <dbl>          <dbl>   <dbl> <dbl> #>  1 0.001  0.529              0     0    0.05 #>  2 0.001  0.529              1     0    0.05 #>  3 0.001  0.529              2     0    0.05 #>  4 0.001  0.529              0     0.5  1    #>  5 0.001  0.529              1     0.5  1    #>  6 0.001  0.529              2     0.5  0.95 #>  7 0.001  0.529              0     1    1    #>  8 0.001  0.529              1     1    1    #>  9 0.001  0.529              2     1    1    #> 10 0.01   0.517              0     0    0.05 #> # ℹ 17 more rows # }"},{"path":"https://openpharma.github.io/simaerep/reference/simaerep.html","id":null,"dir":"Reference","previous_headings":"","what":"Create simaerep object — simaerep","title":"Create simaerep object — simaerep","text":"Simulate AE -reporting probabilities.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/simaerep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create simaerep object — simaerep","text":"","code":"simaerep(   df_visit,   r = 1000,   check = TRUE,   under_only = TRUE,   visit_med75 = TRUE,   inframe = FALSE,   progress = TRUE,   param_site_aggr = list(method = \"med75_adj\", min_pat_pool = 0.2),   param_sim_sites = list(r = 1000, poisson_test = FALSE, prob_lower = TRUE),   param_eval_sites = list(method = \"BH\"),   env = parent.frame() )"},{"path":"https://openpharma.github.io/simaerep/reference/simaerep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create simaerep object — simaerep","text":"df_visit Data frame columns: study_id, site_number, patnum, visit, n_ae. r Integer tbl_object, number repetitions bootstrap simulation. Pass tbl object referring table one column many rows desired repetitions. Default: 1000. check Logical, perform data check attempt repair check_df_visit(). Computationally expensive large data sets. Default: TRUE. under_only Logical, compute -reporting probabilities . Supersedes under_only parameter passed eval_sites() sim_sites(). Default: TRUE. visit_med75 Logical, evaluation point visit_med75 used. Default: TRUE. inframe Logical, table operations used; require visit_med75. Compatible dbplyr supported database backends. progress Logical, display progress bar. Default: TRUE. param_site_aggr List parameters passed site_aggr(). Default: list(method = \"med75_adj\", min_pat_pool = 0.2). param_sim_sites List parameters passed sim_sites(). Default: list(r = 1000, poisson_test = FALSE, prob_lower = TRUE). param_eval_sites List parameters passed eval_sites(). Default: list(method = \"BH\"). env Optional, provide environment original visit data. Default: parent.frame().","code":""},{"path":"https://openpharma.github.io/simaerep/reference/simaerep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create simaerep object — simaerep","text":"simaerep object.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/simaerep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create simaerep object — simaerep","text":"Executes site_aggr(), sim_sites(), eval_sites() original visit data stores intermediate results. Stores lazy reference original visit data facilitated plotting using generic plot(x).","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/reference/simaerep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create simaerep object — simaerep","text":"","code":"df_visit <- sim_test_data_study(   n_pat = 100,   n_sites = 5,   frac_site_with_ur = 0.4,   ur_rate = 0.6 ) df_visit$study_id <- \"A\" aerep <- simaerep(df_visit) aerep #> simaerep object: #> Check aerep$df_eval prob_low_prob_ur column for under-reporting probabililty. #> Plot results using plot() generic. str(aerep) #> List of 11 #>  $ visit           :List of 3 #>   ..$ dim       : int [1:2] 1972 9 #>   ..$ df_summary: tibble [1 × 5] (S3: tbl_df/tbl/data.frame) #>   .. ..$ n_studies : int 1 #>   .. ..$ n_sites   : int 5 #>   .. ..$ n_patients: int 100 #>   .. ..$ n_visits  : int 1972 #>   .. ..$ n_aes     : int 705 #>   ..$ str_call  : chr \"df_visit\" #>   ..- attr(*, \"class\")= chr \"orivisit\" #>  $ df_site         : tibble [5 × 6] (S3: tbl_df/tbl/data.frame) #>   ..$ study_id          : chr [1:5] \"A\" \"A\" \"A\" \"A\" ... #>   ..$ site_number       : chr [1:5] \"S0001\" \"S0002\" \"S0003\" \"S0004\" ... #>   ..$ n_pat             : int [1:5] 20 20 20 20 20 #>   ..$ n_pat_with_med75  : num [1:5] 18 18 17 20 16 #>   ..$ visit_med75       : Named num [1:5] 17 15 16 15 16 #>   .. ..- attr(*, \"names\")= chr [1:5] \"80%\" \"80%\" \"80%\" \"80%\" ... #>   ..$ mean_ae_site_med75: num [1:5] 3.11 2.56 8.53 6.4 8.38 #>  $ df_sim_sites    : tibble [5 × 9] (S3: tbl_df/tbl/data.frame) #>   ..$ study_id              : chr [1:5] \"A\" \"A\" \"A\" \"A\" ... #>   ..$ site_number           : chr [1:5] \"S0001\" \"S0002\" \"S0003\" \"S0004\" ... #>   ..$ n_pat                 : int [1:5] 20 20 20 20 20 #>   ..$ n_pat_with_med75      : num [1:5] 18 18 17 20 16 #>   ..$ visit_med75           : Named num [1:5] 17 15 16 15 16 #>   .. ..- attr(*, \"names\")= chr [1:5] \"80%\" \"80%\" \"80%\" \"80%\" ... #>   ..$ mean_ae_site_med75    : num [1:5] 3.11 2.56 8.53 6.4 8.38 #>   ..$ mean_ae_study_med75   : num [1:5] 7.03 6.21 5.26 5.21 5.34 #>   ..$ n_pat_with_med75_study: int [1:5] 59 72 66 70 67 #>   ..$ prob_low              : num [1:5] 0 0 1 1 1 #>  $ df_eval         : tibble [5 × 11] (S3: tbl_df/tbl/data.frame) #>   ..$ study_id              : chr [1:5] \"A\" \"A\" \"A\" \"A\" ... #>   ..$ site_number           : chr [1:5] \"S0001\" \"S0002\" \"S0003\" \"S0004\" ... #>   ..$ n_pat                 : int [1:5] 20 20 20 20 20 #>   ..$ n_pat_with_med75      : num [1:5] 18 18 17 20 16 #>   ..$ visit_med75           : Named num [1:5] 17 15 16 15 16 #>   .. ..- attr(*, \"names\")= chr [1:5] \"80%\" \"80%\" \"80%\" \"80%\" ... #>   ..$ mean_ae_site_med75    : num [1:5] 3.11 2.56 8.53 6.4 8.38 #>   ..$ mean_ae_study_med75   : num [1:5] 7.03 6.21 5.26 5.21 5.34 #>   ..$ n_pat_with_med75_study: int [1:5] 59 72 66 70 67 #>   ..$ prob_low              : num [1:5] 0 0 1 1 1 #>   ..$ prob_low_adj          : num [1:5] 0 0 1 1 1 #>   ..$ prob_low_prob_ur      : num [1:5] 1 1 0 0 0 #>  $ r               : num 1000 #>  $ visit_med75     : logi TRUE #>  $ inframe         : logi FALSE #>  $ under_only      : logi TRUE #>  $ param_site_aggr :List of 2 #>   ..$ method      : chr \"med75_adj\" #>   ..$ min_pat_pool: num 0.2 #>  $ param_sim_sites :List of 4 #>   ..$ r           : num 1000 #>   ..$ poisson_test: logi FALSE #>   ..$ prob_lower  : logi TRUE #>   ..$ under_only  : logi TRUE #>  $ param_eval_sites:List of 2 #>   ..$ method    : chr \"BH\" #>   ..$ under_only: logi TRUE #>  - attr(*, \"class\")= chr \"simaerep\" # \\donttest{   # In-frame table operations   simaerep(df_visit, inframe = TRUE, visit_med75 = FALSE, under_only = FALSE)$df_eval #> # A tibble: 5 × 13 #>   study_id site_number events_per_visit_site events visits n_pat prob_low #>   <chr>    <chr>                       <dbl>  <dbl>  <dbl> <int>    <dbl> #> 1 A        S0001                       0.183     76    415    20    0     #> 2 A        S0002                       0.186     75    403    20    0     #> 3 A        S0003                       0.496    187    377    20    0.999 #> 4 A        S0004                       0.453    180    397    20    0.987 #> 5 A        S0005                       0.492    187    380    20    0.996 #> # ℹ 6 more variables: events_per_visit_study <dbl>, prob_low_adj <dbl>, #> #   prob_low_prob_ur <dbl>, prob_high <dbl>, prob_high_adj <dbl>, #> #   prob_high_prob_or <dbl>   simaerep(df_visit, inframe = TRUE, visit_med75 = TRUE, under_only = FALSE)$df_eval #> # A tibble: 5 × 15 #>   study_id site_number events_per_visit_site events visits n_pat prob_low #>   <chr>    <chr>                       <dbl>  <dbl>  <dbl> <int>    <dbl> #> 1 A        S0001                       0.183     56    306    18    0     #> 2 A        S0002                       0.170     46    270    18    0     #> 3 A        S0003                       0.533    145    272    17    1     #> 4 A        S0004                       0.427    128    300    20    0.892 #> 5 A        S0005                       0.523    134    256    16    0.996 #> # ℹ 8 more variables: events_per_visit_study <dbl>, prob_low_adj <dbl>, #> #   prob_low_prob_ur <dbl>, prob_high <dbl>, prob_high_adj <dbl>, #> #   prob_high_prob_or <dbl>, n_pat_with_med75 <dbl>, visit_med75 <dbl>   # Database example   con <- DBI::dbConnect(duckdb::duckdb(), dbdir = \":memory:\")   df_r <- tibble::tibble(rep = seq(1, 1000))   dplyr::copy_to(con, df_visit, \"visit\")   dplyr::copy_to(con, df_r, \"r\")   tbl_visit <- dplyr::tbl(con, \"visit\")   tbl_r <- dplyr::tbl(con, \"r\")   simaerep(tbl_visit, r = tbl_r, inframe = TRUE, visit_med75 = FALSE, under_only = FALSE)$df_eval #> # Source:     SQL [5 x 13] #> # Database:   DuckDB v1.0.0 [koneswab@Darwin 23.6.0:R 4.4.1/:memory:] #> # Ordered by: study_id, site_number #>   study_id site_number events_per_visit_site events visits n_pat prob_low #>   <chr>    <chr>                       <dbl>  <dbl>  <dbl> <dbl>    <dbl> #> 1 A        S0005                       0.492    187    380    20    0.998 #> 2 A        S0003                       0.496    187    377    20    0.998 #> 3 A        S0004                       0.453    180    397    20    0.987 #> 4 A        S0001                       0.183     76    415    20    0     #> 5 A        S0002                       0.186     75    403    20    0     #> # ℹ 6 more variables: events_per_visit_study <dbl>, prob_low_adj <dbl>, #> #   prob_low_prob_ur <dbl>, prob_high <dbl>, prob_high_adj <dbl>, #> #   prob_high_prob_or <dbl>   simaerep(tbl_visit, r = tbl_r, inframe = TRUE, visit_med75 = TRUE, under_only = FALSE)$df_eval #> # Source:     SQL [5 x 15] #> # Database:   DuckDB v1.0.0 [koneswab@Darwin 23.6.0:R 4.4.1/:memory:] #> # Ordered by: study_id, site_number #>   study_id site_number events_per_visit_site events visits n_pat prob_low #>   <chr>    <chr>                       <dbl>  <dbl>  <dbl> <dbl>    <dbl> #> 1 A        S0003                       0.533    145    272    17    1     #> 2 A        S0005                       0.523    134    256    16    1     #> 3 A        S0004                       0.427    128    300    20    0.908 #> 4 A        S0002                       0.170     46    270    18    0     #> 5 A        S0001                       0.183     56    306    18    0     #> # ℹ 8 more variables: events_per_visit_study <dbl>, prob_low_adj <dbl>, #> #   prob_low_prob_ur <dbl>, prob_high <dbl>, prob_high_adj <dbl>, #> #   prob_high_prob_or <dbl>, n_pat_with_med75 <dbl>, visit_med75 <int>   DBI::dbDisconnect(con) # }"},{"path":"https://openpharma.github.io/simaerep/reference/simaerep_inframe.html","id":null,"dir":"Reference","previous_headings":"","what":"simulate in dataframe — simaerep_inframe","title":"simulate in dataframe — simaerep_inframe","text":"simulate dataframe","code":""},{"path":"https://openpharma.github.io/simaerep/reference/simaerep_inframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulate in dataframe — simaerep_inframe","text":"","code":"simaerep_inframe(   df_visit,   r = 1000,   under_only = FALSE,   visit_med75 = FALSE,   check = TRUE,   param_site_aggr = list(method = \"med75_adj\", min_pat_pool = 0.2),   param_eval_sites = list(method = \"BH\"),   env = parent.frame() )"},{"path":"https://openpharma.github.io/simaerep/reference/simaerep_inframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulate in dataframe — simaerep_inframe","text":"df_visit Data frame columns: study_id, site_number, patnum, visit, n_ae. r Integer tbl_object, number repetitions bootstrap simulation. Pass tbl object referring table one column many rows desired repetitions. Default: 1000. under_only Logical, compute -reporting probabilities . Supersedes under_only parameter passed eval_sites() sim_sites(). Default: TRUE. visit_med75 Logical, evaluation point visit_med75 used. Default: TRUE. check Logical, perform data check attempt repair check_df_visit(). Computationally expensive large data sets. Default: TRUE. param_site_aggr List parameters passed site_aggr(). Default: list(method = \"med75_adj\", min_pat_pool = 0.2). param_eval_sites List parameters passed eval_sites(). Default: list(method = \"BH\"). env Optional, provide environment original visit data. Default: parent.frame().","code":""},{"path":"https://openpharma.github.io/simaerep/reference/simaerep_inframe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"simulate in dataframe — simaerep_inframe","text":"","code":"df_visit <- sim_test_data_study(  n_pat = 100,  n_sites = 5,  frac_site_with_ur = 0.4,  ur_rate = 0.6 ) df_visit$study_id <- \"A\"  simaerep_inframe(df_visit) #> simaerep object: #> Check aerep$df_eval prob_low_prob_ur column for under-reporting probabililty. #> Plot results using plot() generic. simaerep_inframe(df_visit, visit_med75 = TRUE)$df_eval #> # A tibble: 5 × 12 #>   study_id site_number events_per_visit_site events visits n_pat prob_low #>   <chr>    <chr>                       <dbl>  <dbl>  <dbl> <int>    <dbl> #> 1 A        S0001                       0.261     61    234    18    0.006 #> 2 A        S0002                       0.201     61    304    19    0     #> 3 A        S0003                       0.426    116    272    17    0.894 #> 4 A        S0004                       0.489    130    266    19    0.994 #> 5 A        S0005                       0.481    139    289    17    0.989 #> # ℹ 5 more variables: events_per_visit_study <dbl>, prob_low_adj <dbl>, #> #   prob_low_prob_ur <dbl>, n_pat_with_med75 <dbl>, visit_med75 <dbl> # \\donttest{ # Database con <- DBI::dbConnect(duckdb::duckdb(), dbdir = \":memory:\") df_r <- tibble::tibble(rep = seq(1, 1000))  dplyr::copy_to(con, df_visit, \"visit\") dplyr::copy_to(con, df_r, \"r\")  tbl_visit <- dplyr::tbl(con, \"visit\") tbl_r <- dplyr::tbl(con, \"r\")  simaerep_inframe(tbl_visit, r = tbl_r)$df_eval #> # Source:     SQL [5 x 10] #> # Database:   DuckDB v1.0.0 [koneswab@Darwin 23.6.0:R 4.4.1/:memory:] #> # Ordered by: study_id, site_number #>   study_id site_number events_per_visit_site events visits n_pat prob_low #>   <chr>    <chr>                       <dbl>  <dbl>  <dbl> <dbl>    <dbl> #> 1 A        S0003                       0.433    165    381    20    0.821 #> 2 A        S0001                       0.239     84    352    20    0     #> 3 A        S0002                       0.210     83    396    20    0     #> 4 A        S0004                       0.480    184    383    20    0.985 #> 5 A        S0005                       0.470    181    385    20    0.962 #> # ℹ 3 more variables: events_per_visit_study <dbl>, prob_low_adj <dbl>, #> #   prob_low_prob_ur <dbl> simaerep_inframe(tbl_visit, r = tbl_r, visit_med75 = TRUE)$df_eval #> # Source:     SQL [5 x 12] #> # Database:   DuckDB v1.0.0 [koneswab@Darwin 23.6.0:R 4.4.1/:memory:] #> # Ordered by: study_id, site_number #>   study_id site_number events_per_visit_site events visits n_pat prob_low #>   <chr>    <chr>                       <dbl>  <dbl>  <dbl> <dbl>    <dbl> #> 1 A        S0004                       0.489    130    266    19    0.986 #> 2 A        S0002                       0.201     61    304    19    0     #> 3 A        S0005                       0.481    139    289    17    0.987 #> 4 A        S0003                       0.426    116    272    17    0.894 #> 5 A        S0001                       0.261     61    234    18    0.011 #> # ℹ 5 more variables: events_per_visit_study <dbl>, prob_low_adj <dbl>, #> #   prob_low_prob_ur <dbl>, n_pat_with_med75 <dbl>, visit_med75 <int>  DBI::dbDisconnect(con) # }"},{"path":"https://openpharma.github.io/simaerep/reference/site_aggr.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate from visit to site level. — site_aggr","title":"Aggregate from visit to site level. — site_aggr","text":"Calculates visit_med75, n_pat_with_med75 mean_ae_site_med75","code":""},{"path":"https://openpharma.github.io/simaerep/reference/site_aggr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate from visit to site level. — site_aggr","text":"","code":"site_aggr(df_visit, method = \"med75_adj\", min_pat_pool = 0.2, check = TRUE)"},{"path":"https://openpharma.github.io/simaerep/reference/site_aggr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate from visit to site level. — site_aggr","text":"df_visit dataframe columns: study_id, site_number, patnum, visit, n_ae method character, one c(\"med75\", \"med75_adj\") defining method defining evaluation point visit_med75 (see details), Default: \"med75_adj\" min_pat_pool, double, minimum ratio available patients available sampling. Determines maximum visit_med75 value see Details. Default: 0.2 check, logical, perform data check attempt repair check_df_visit(), computationally expensive large data sets. Default: TRUE","code":""},{"path":"https://openpharma.github.io/simaerep/reference/site_aggr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate from visit to site level. — site_aggr","text":"dataframe following columns: study_id study identification site_number site identification n_pat number patients, site level visit_med75 adjusted median(max(visit)) * 0.75 see Details n_pat_with_med75 number patients meet visit_med75 criterion, site level mean_ae_site_med75 mean AE visit_med75, site level","code":""},{"path":"https://openpharma.github.io/simaerep/reference/site_aggr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate from visit to site level. — site_aggr","text":"determining visit number going evaluate AE reporting take maximum visit patient site take median. multiply 0.75 give us cut-point determining patient evaluated. patients evaluate take minimum maximum visits hence ensuring take highest visit number possible without excluding patients analysis. order ensure sampling pool visit large enough limit visit number 80% quantile maximum visits patients study.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/site_aggr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate from visit to site level. — site_aggr","text":"","code":"df_visit <- sim_test_data_study(   n_pat = 100,   n_sites = 5,   frac_site_with_ur = 0.4,   ur_rate = 0.6 )  df_visit$study_id <- \"A\"  df_site <- site_aggr(df_visit)  df_site %>%   knitr::kable(digits = 2) #>  #>  #> |study_id |site_number | n_pat| n_pat_with_med75| visit_med75| mean_ae_site_med75| #> |:--------|:-----------|-----:|----------------:|-----------:|------------------:| #> |A        |S0001       |    20|               18|          15|               2.39| #> |A        |S0002       |    20|               19|          13|               2.68| #> |A        |S0003       |    20|               19|          16|               7.74| #> |A        |S0004       |    20|               16|          17|               8.69| #> |A        |S0005       |    20|               16|          18|               8.19|"},{"path":"https://openpharma.github.io/simaerep/reference/with_progress_cnd.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional with_progress. — with_progress_cnd","title":"Conditional with_progress. — with_progress_cnd","text":"Internal function. Use instead with_progress within custom functions progress bars.","code":""},{"path":"https://openpharma.github.io/simaerep/reference/with_progress_cnd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional with_progress. — with_progress_cnd","text":"","code":"with_progress_cnd(ex, progress = TRUE)"},{"path":"https://openpharma.github.io/simaerep/reference/with_progress_cnd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional with_progress. — with_progress_cnd","text":"ex expression progress logical, Default: TRUE","code":""},{"path":"https://openpharma.github.io/simaerep/reference/with_progress_cnd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional with_progress. — with_progress_cnd","text":"return value, called side effects","code":""},{"path":"https://openpharma.github.io/simaerep/reference/with_progress_cnd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditional with_progress. — with_progress_cnd","text":"wrapper adds progress parameter with_progress can control progress bar user facing functions. progressbar shows interactive mode.","code":""},{"path":[]},{"path":"https://openpharma.github.io/simaerep/reference/with_progress_cnd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional with_progress. — with_progress_cnd","text":"","code":"if (interactive()) {   with_progress_cnd(    purrr_bar(rep(0.25, 5), .purrr = purrr::map, .f = Sys.sleep, .steps = 5),    progress = TRUE  )   with_progress_cnd(    purrr_bar(rep(0.25, 5), .purrr = purrr::map, .f = Sys.sleep, .steps = 5),    progress = FALSE  )  # wrap a function with progress bar with another call with progress bar  f1 <- function(x, progress = TRUE) {   with_progress_cnd(     purrr_bar(x, .purrr = purrr::walk, .f = Sys.sleep, .steps = length(x), .progress = progress),     progress = progress   ) }  # inner progress bar blocks outer progress bar progressr::with_progress(   purrr_bar(     rep(rep(1, 3),3), .purrr = purrr::walk, .f = f1, .steps = 3,     .f_args = list(progress = TRUE)   ) )  # inner progress bar turned off progressr::with_progress(   purrr_bar(     rep(list(rep(0.25, 3)), 5), .purrr = purrr::walk, .f = f1, .steps = 5,     .f_args = list(progress = FALSE)   ) ) }"},{"path":"https://openpharma.github.io/simaerep/news/index.html","id":"simaerep-060","dir":"Changelog","previous_headings":"","what":"simaerep 0.6.0","title":"simaerep 0.6.0","text":"inframe method use table operations , use visit_med75 https://github.com/openpharma/simaerep/issues/59 https://github.com/openpharma/simaerep/issues/16 update vignettes","code":""},{"path":"https://openpharma.github.io/simaerep/news/index.html","id":"simaerep-050","dir":"Changelog","previous_headings":"","what":"simaerep 0.5.0","title":"simaerep 0.5.0","text":"CRAN release: 2024-04-03 allow flexible AE rates data simulations add vignette comparing simaerep gsm performance add -reporting probability fix dplyr warnings fix warnings around ggplot cowplot https://github.com/openpharma/simaerep/issues/45","code":""},{"path":"https://openpharma.github.io/simaerep/news/index.html","id":"simaerep-043","dir":"Changelog","previous_headings":"","what":"simaerep 0.4.3","title":"simaerep 0.4.3","text":"CRAN release: 2023-03-03 delete performance unit tests (poisson faster bootstrap) accommodate CRAN request","code":""},{"path":"https://openpharma.github.io/simaerep/news/index.html","id":"simaerep-042","dir":"Changelog","previous_headings":"","what":"simaerep 0.4.2","title":"simaerep 0.4.2","text":"CRAN release: 2023-02-25 CRAN submission","code":""},{"path":"https://openpharma.github.io/simaerep/news/index.html","id":"simaerep-041","dir":"Changelog","previous_headings":"","what":"simaerep 0.4.1","title":"simaerep 0.4.1","text":"validation report","code":""},{"path":"https://openpharma.github.io/simaerep/news/index.html","id":"simaerep-040","dir":"Changelog","previous_headings":"","what":"simaerep 0.4.0","title":"simaerep 0.4.0","text":"S3 interface #17 better performance specification #26 meaningful unit test names #24 #30 #33","code":""},{"path":"https://openpharma.github.io/simaerep/news/index.html","id":"simaerep-033","dir":"Changelog","previous_headings":"","what":"simaerep 0.3.3","title":"simaerep 0.3.3","text":"better data checks error messages #19, #20, # 21 data check repair check_df_visit() became optionable","code":""},{"path":"https://openpharma.github.io/simaerep/news/index.html","id":"simaerep-032","dir":"Changelog","previous_headings":"","what":"simaerep 0.3.2","title":"simaerep 0.3.2","text":"added portfolio performance assessment","code":""},{"path":"https://openpharma.github.io/simaerep/news/index.html","id":"simaerep-031","dir":"Changelog","previous_headings":"","what":"simaerep 0.3.1","title":"simaerep 0.3.1","text":"changed MIT License holder openpharma F. Hoffmann-La Roche Ltd simaerep authors","code":""},{"path":"https://openpharma.github.io/simaerep/news/index.html","id":"simaerep-030","dir":"Changelog","previous_headings":"","what":"simaerep 0.3.0","title":"simaerep 0.3.0","text":"improved evaluation point visit_med75 allow days instead visit","code":""},{"path":"https://openpharma.github.io/simaerep/news/index.html","id":"simaerep-020","dir":"Changelog","previous_headings":"","what":"simaerep 0.2.0","title":"simaerep 0.2.0","text":"use Benjamin Hochberg procedure alpha error correction fix warnings around parallel processing improved SAS files vignette","code":""}]
